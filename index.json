[{"categories":["生活"],"content":"前言 去年就和姑姑、奶奶提了一嘴，有时间一起去桂林玩一圈，大家都挺期待，但由于疫情的原因最终没去成，而如今疫情放开，我这边工作也找到，本来就计划好等找到工作以后好好去旅行，于是便趁着告诉家人我换工作的事情（先前没有告诉家人我这边工作发生了变动，主要怕她们无意义地担心），提议周末一起去桂林旅游。 难得的是，这真就是一场说走就走的旅行，周三晚上告知她们，周五早上就出发，行动力满满！不像我朋友所说的，想组织一场家庭旅行太难了，老是聚不齐去不了。 和家人说之前其实就有看桂林相关的攻略了，不过最近的天气都会下雨，有小雨有中雨，天气真就是变幻莫测，令人难以抉择，于是就在去与不去中疯狂摇摆。如果现在不去的话，后面很大可能又没时间去了，而如果去的话，倘若下起了大雨，游玩体验估计会大打折扣，但雨似乎并不是持续一整天，我们可以伺机而动。 一直未能决定下来，直到和家人通话，去旅游的话脱口而出，就是想看看家人们开心的样子，也许这就是幸福。 ","date":"2023-05-24","objectID":"/%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/:1:0","tags":["旅行","山水","家人"],"title":"桂林游记","uri":"/%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/"},{"categories":["生活"],"content":"交通 三天两晚的行程，我从广东深圳搭高铁出发、家人驱车从老家出发，差不多耗时4小时，头天8点出发，12点在高铁站会合，然后直接驱车去往西街干饭。 距离阳朔高铁站还剩半小时的时候，天灰蒙蒙的，似乎随时都会下一场大雨，果不然，数分钟后下起了磅礴大雨，看着雨点一点点浇灭了我的热情。 直到走出车厢，外面天气晴朗无比，一阵热风瞬间吹散了我的忧心，急忙打开手机报喜，“这边天气好得很嘞！只是路上的时候下了雨”。 ","date":"2023-05-24","objectID":"/%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/:2:0","tags":["旅行","山水","家人"],"title":"桂林游记","uri":"/%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/"},{"categories":["生活"],"content":"住宿 民宿-两室一厅电梯房 这是一家挺不错的民宿，两室一厅，功能设备齐全，包含洗衣机、小冰箱等，比较适合和家人一起住，主要是卫生比较好，一般去住酒店，卫生差的一躺下就感觉全身发痒，而令我所喜的是这家不会。 ","date":"2023-05-24","objectID":"/%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/:3:0","tags":["旅行","山水","家人"],"title":"桂林游记","uri":"/%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/"},{"categories":["生活"],"content":"游玩 ","date":"2023-05-24","objectID":"/%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/:4:0","tags":["旅行","山水","家人"],"title":"桂林游记","uri":"/%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/"},{"categories":["生活"],"content":"遇龙河竹筏 ⭐️⭐️⭐️⭐️⭐️ 人工竹筏漂流，我们选择了游玩时长（一个半小时）相对较长的【金龙桥-旧县】游玩路线，整体体验下来，时长稍微有点长，当然另外也有时长偏短的路线，例如五十分钟，但感觉又短了点，可能七十分钟的就比较合适了。 如果自驾的话，是比较推荐直接去景点购买门票，320元一个筏可以乘坐两人，最开始是在闲鱼上面找到了包含接送的门票（190元/人，还能帮你拼筏，社恐必备），相对于来说贵了40元，但包括了来回接送的费用，我们一行五人就要贵200块，还是挺亏的，如果自行搭车来回，也许都比这个便宜一点。 据说负责撑筏的人就有300余人，不过我们去的时候是属于淡季，一到景点买好票不用排队就直接开始游玩了 主打的就是在山水之间的感觉，人在画中游，欣赏沿途风景以及远处的山景。 这条路线的宣传的就是有九次冲坝，但其实冲几次后感觉也就那样，山水之间的感觉远胜于冲坝所带来的略微的新鲜刺激感，更何况第一个坝直接把一整个屁股冲湿了，不得不说是会做生意的，为了防止冲坝把屁股冲湿，撑筏工一上筏就给你兜售一次性雨衣（15元），让你倒着穿用来防止屁股被河水的冲涧，雨衣变雨裤，不免感觉喜感十足。 每次来到坝附近的时候以及冲坝后，都能闻到一股浓烈的河水的气息，是清新的，混杂着些许泥土和草的气息，瞬间就找回了儿时在农村的味道，倍感物超所值。 ","date":"2023-05-24","objectID":"/%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/:4:1","tags":["旅行","山水","家人"],"title":"桂林游记","uri":"/%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/"},{"categories":["生活"],"content":"桂林千古情 ⭐️⭐️⭐️⭐️ 一个挺不错的景区，景区内部有一系列游玩的地方，甚至还有一条小吃街，当然主要是去看表演的。推荐在闲鱼购票165/人，而美团上是310/人，同样是贵宾席，其实剧场很大，观众席很多，虽说是淡季，但还能感受到人还是挺多的，贵宾席也基本上坐满了，何为贵宾席，就是相对来说就是位于前中区域的座位罢了。 刘三姐和千古情之间到底看哪个？因为是带家人一起来的，据说刘三姐的艺术成分相对于较高，而千古情则是更接地气，老少皆宜，考虑到家人也能有一个不错的观看体验，更何况家人一开始还觉得演出有什么好看的，不想浪费那个钱，所以最后还是选择了千古情。 我们一行人楼下简单地吃了一碗桂林米粉后就直接去景区了，可惜的是桂林米粉的辣椒也太辣了，选择的是八点半的场次，看表演之前还可以在景区玩上一个多小时左右，还是挺不错的。 进入景区大门后，远远地看到一个建筑上面头顶着蔚为壮观的人头四面像，沿着大道一路走到人像下，踏入售票大厅，再往里走就是景区正常的检票入口了。 通过检票入口后不远处就是一座庙，从外面难以分辨是何方神圣，打着哪都要逛一逛的原则，三脚并两脚地踏入了庙中，一瞧，原来是财神，可我并不感冒，稍即扭头去看看有没有其他什么玩意了。 家人一见是财神，便扑通一声跪在蒲团上，双手合十虔诚地一拜，我的心里稍有些排斥的，还来不及说出口，一张钞票就落入案台上的盒子中，口中还不忘叫我过去也拜上一拜，口中还念叨着，“保佑 xx 走财运，发大财”。而我则摆弄着挂钟，冷冷地说道，“我只信我自己”，一声声钟声，响彻整个庙宇，为自己带岔路而悔恨。 如果不是为了捞钱而供奉的财神，那不必排斥，可这赤裸裸地动机未免令人新生厌烦。 ","date":"2023-05-24","objectID":"/%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/:4:2","tags":["旅行","山水","家人"],"title":"桂林游记","uri":"/%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/"},{"categories":["生活"],"content":"如意峰 ⭐️⭐️⭐️⭐️ 如果说在遇龙河景区体验到了人在画中游的感觉，那桂林的山就是一直存在记忆中的远山淡影和层峦叠嶂了。这成语还是来自远古小学时期的召唤了，小学语文课本就是存在不少山山水水相关的课文，而且一般着重描景的段落还得背下来。 开车途中，大家聊到，这小县城中怎么都是吃的，想到家乡的小县城开的最多却是药店，而这里偏偏很少看到，来到新的地方，难免会让我们和自己生活多年的地方进行一个对比，总有那些不理解的点，不过整体上来说还是会觉得自己的家乡更好，虽说阳朔县靠山水吃饭，可这破破烂烂的县城形象相比家乡都落后了至少五年，成于大自然的馈赠让你闻名天下，可恰恰也败在疯狂发展旅游业导致县城商业化严重，丢失了一部分县城的形象，也只能让人想来游山玩水。 远远地就能看到长长的索道在数座山峰中穿行 ","date":"2023-05-24","objectID":"/%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/:4:3","tags":["旅行","山水","家人"],"title":"桂林游记","uri":"/%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/"},{"categories":["生活"],"content":"兴坪古镇 ⭐️⭐️ 我们只是去了20元人民币打卡点，逛了逛古城中的步行街，其实也没啥了，虽然说还有竹筏、爬山之类的项目，但不免会有视觉疲劳，因此感觉没什么好玩的，不过好在中饭吃得过瘾，算是扳回一城。 ","date":"2023-05-24","objectID":"/%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/:4:4","tags":["旅行","山水","家人"],"title":"桂林游记","uri":"/%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/"},{"categories":["生活"],"content":"吃喝 ","date":"2023-05-24","objectID":"/%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/:5:0","tags":["旅行","山水","家人"],"title":"桂林游记","uri":"/%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/"},{"categories":["生活"],"content":"椿记烧鹅 ⭐️⭐️⭐️⭐️ 头天中午去吃的一家店，怕不够吃，就点了一份中份的招牌烧鹅，皮很脆肉也入味，其实点个小份的就够了。妈妈晕车，坐了一路车过来，看起来并没有什么胃口 150 脆皮叉烧，算是这顿饭里面最好吃的，也是我吃过最好吃的叉烧了，毕竟也得6块钱一块 小炒鱼虾，非常下饭，可惜上菜上的太晚了，还剩下很多没吃完，打包回去晚上可以吃 ","date":"2023-05-24","objectID":"/%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/:5:1","tags":["旅行","山水","家人"],"title":"桂林游记","uri":"/%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/"},{"categories":["生活"],"content":"拐哥鼎锅饭 ⭐️⭐️⭐️⭐️ 头天在小红书上看到网友推荐的一家农庄，秉着每天安排一顿大餐的原则，逛完如意峰后已是饭店，下了山后就驱车前往，路途中就有很多饭店，家人还在说随便找个地方吃饭就好了，我还是告诉他们，随便找个饭店，第一是不知道好不好吃，还是那句话，出来玩就是要开开心心的，吃的不开心那也挺不舒服的，其次就是担心被宰，这种在网上也见了不少 这家饭店生意很好，外面也还有很多人排队，看老板、服务员也是挺忙的。先在外面点了餐，等了大概15分钟的样子就可以进去就座了，就座后不就老板就提着一只鸡来和顾客确认重量怎么样，主打的就是一个先杀先做，后续又等了20分钟，菜才开始上，因为是先杀先做的，倒也能理解，而且还算比较快的了 推荐一鸡两吃，竹筒鸡+砂锅鸡，鸡是整只卖的，顾客可以选择怎样的做法。砂锅鸡味道很不错，比较符合大家的口味，不过放了糖，奶奶不能吃多了，吃了几块也是赞不绝口。竹筒鸡的汤很好喝很鲜甜，但是并不能吃出来竹子的味道，也许是竹子才让它这么好喝也不一定？ 恰恰竹筒饭还是拒绝了，也许是昨天的那顿电饭煲煲的腊味饭让家人才有了抵触。 ","date":"2023-05-24","objectID":"/%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/:5:2","tags":["旅行","山水","家人"],"title":"桂林游记","uri":"/%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/"},{"categories":["生活"],"content":"金牌烧鹅啤酒鱼 ⭐️⭐️⭐️⭐️⭐️ 第三天中午还是去吃了这桂林遍地都是的啤酒鱼，没有去小红书上都在推荐的店铺，自个在美团上面选了一个看起来还不错的一家。 我：“还有啤酒鱼没吃，我们就去吃啤酒鱼呗”，奶奶笑着说：“来了一趟总要吃到才走”（可惜我并不能表达出其实际想要表达这句方言所依附的情感）。 这家的菜就非常对我家人们的胃口了，都嘎嘎干饭 一手铁板牛肉也是点得特别到位，牛肉还算比较大一块的，但丝毫不影响口感，而是特别地嫩，吃过十几元一块的牛肉，也吃过便宜到吃不出牛肉味道的牛肉，可以说是目前为止吃过最好吃的铁板牛肉了，果不其然，美食对于大家都是平等的，好吃就是好吃，不好吃就是好吃，那位挑食的小妹妹尝了一块后也开始嘎嘎干饭。 ","date":"2023-05-24","objectID":"/%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/:5:3","tags":["旅行","山水","家人"],"title":"桂林游记","uri":"/%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/"},{"categories":["生活"],"content":"苏姐糖水铺 ⭐️⭐️⭐️⭐️ 第二天晚上看完千古情后，打算先去吃个糖水再回民宿休息。自从双月湾旅游开始，晚上去吃个糖水成了我旅游中的一个必选项，也还算运气好，找了一个顺路的地儿，令人满足的是比上次去双月湾吃的糖水还要好吃！ 开到了目的地附近，才知道这边才是生活区，有着浓重的烟火气息，道路两旁堆满了各种小吃车，和旅游商业化严重的地段行成了鲜明的对比，西街那边的路边开满了各种xxx啤酒鱼，这边却难以见到，更多的是一些偏家常的店铺，更接地气。 点餐的时候一时间没反应过来老板的询问，确认我是否就要糖水，后来才反应过来，我想吃的清补凉就是他们口中的糖水。当然点的还是我爱的清补凉，不过相对于以往吃的那种白糖水打底的清补凉，这次点了一个红糖水打底的。老板问我想不想试试红糖水的时候，随口就答应了，但一边想着尝试新的口味的时候，心里还在犯嘀咕总想着会不会没得老的口味好吃啊，真正落座开吃第一口后就能感觉到这清补凉的一个正宗，蹦入味蕾的是一阵清甜，凉感在口腔中散发，“嗯～好吃！“，脑海中却又蹦出想尝尝白糖水打底的念头，哎，低头看看这分量满满的一碗还是作罢。 ","date":"2023-05-24","objectID":"/%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/:5:4","tags":["旅行","山水","家人"],"title":"桂林游记","uri":"/%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/"},{"categories":["技术"],"content":"面试情况一览 公司 结果 难度 体验 微信键盘 ❌ ⭐️⭐️⭐️⭐️ ⭐️⭐️⭐️ 得物 ❌ ⭐️⭐️ ⭐️⭐️ 华盛通 ✅ ⭐️⭐️ ⭐️⭐️⭐️ 最右 ✅ ⭐️⭐️⭐️ ⭐️⭐️⭐️⭐️ 快手 ✅ ⭐️⭐️⭐️ ⭐️⭐️⭐️⭐️ 拼多多 ❌ ⭐️⭐️⭐️ ⭐️⭐️⭐️ 剪映 ❌ ⭐️⭐️⭐️⭐️ ⭐️⭐️⭐️ 百度 ✅ ⭐️⭐️⭐️ ⭐️⭐️⭐️⭐️ taptap ✅ ⭐️⭐️⭐️ ⭐️⭐️⭐️⭐️ ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:1:0","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"准备工作 ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:2:0","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"微信键盘 ❌ ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:3:0","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"一面（4月13日 1h30min） 开局问项目介绍项目 MVI原理 为什么要使用MVI？你了解到的有没有其他的什么架构或者框架能解决这些问题？ MVI横向对比其他的架构，MVC、MVVM，优缺点 有遇到哪些问题？问题是怎么解决的？有没有其他的方案？ 缺点怎么避免？有没有其他的方案？ 应对历史债所做的处理，如何保证单向数据流以及单一数据源？ 页面间通信怎么做？事件总线机制？说了下自己理解的可行的方案；别人怎么做的？页面 state 如何把全局的 state 合理地 merge 进来 Redux是啥，说说原理，store、action、reducer、纯函数、不可变数据、数据追溯方便 开始问kotlin，先问你用了多久了 协程原理？挂起点？状态机？挂起就一定会切线程吗？会调度到同一个线程吗？ Dispatcher原理？Dispatcher.MAIN、IO、DEFAULT -\u003e CoroutineScheduler调度原理？答了全局阻塞队列、任务队列、任务窃取。。。层层深入还没仔细看过协程调度逻辑 开始问java八股 进程和线程的区别？ 线程共享的内存区域？独享的内存区域？ OOM了解吗？一般怎么会引发 OOM？哪些地方会发生OOM 继续Android八股 view绘制流程？测量流程详细介绍了一下，MeasureSpec，当前view measureSpec的计算方式 如果一个view大小or布局发生变化，怎么重新渲染的？没太了解过这个流程，说了下自己的看法，层层往上判断是否影响到父view，只处理受影响到的view进行局部刷新 recyclerview缓存机制？怎么增加缓存容量？系统提供的第三级缓存应该可以做，但是我没做过，听说有很多坑 列表滑动卡顿有遇到过吗？ 你们的app有什么性能问题？渲染性能、导出之类的，你做过哪些性能优化？ 算法 原题 5 分钟 ac 合并一组升序链表；常规遍历合并做法、优化时间复杂度的递归合并做法 你的 Android studio 怎么长这样？挺好看的 。。。preview 版本 反问 微信键盘的技术栈？有没有比较难的地方啊？有没有考虑跨端方案？有对标哪款产品吗？ 用的都是常用的技术栈 不过网络请求框架是自己写的，不是 Android 层面的，是 c++层面，因为比较关注数据隐私问题 工具比较关注性能指标需要用原生 我们做好自己的产品就可以了 有啥性能问题呢？ 。。。就那些，你们有啥性能问题呢？ 。。。 好了我没有什么问题了那今天我们就结束吧 。。。我还想问 总结 亮点 技术思考 方案总结 问题 堆外OOM是怎么样的？一时没理解到问题没想出来 没有做过很值得说的性能优化，就没得聊 recyclerview增加缓存，从来没用到过提供给开发者使用的缓存接口 recyclerview滑动卡顿有遇到过吗？没遇到，没得聊 view变化导致的重绘流程没想过 ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:3:1","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"二面（4月18日 1h40min） 开局两道算法题 35min 一个字符串，包含大小写英文字母，从中找出出现第k多的字符；25min 提供一个0 or 1随机数生成器，写一个0-5的随机数生成器；没做出来，想到一半不让想了 10min 项目 MVI 八股 View绘制流程？在onCreate中view.post 可以获取到正确的view的宽高，为什么？ Glide缓存池？三级缓存？为什么需要一级的actvie cache，为什么要用弱引用实现？ OkHttp的拦截器链 问了下二面的面试官评价： 还是希望有更多工程化的思想。比如业界方案对比，有一些可量化的数据指标体现成果。 除了日常业务需求开发，其他方面也可以多加强下积累。 能理解面试官的反馈，其中说了写这个架构中遇到的一些细节的问题，遇到的问题怎么解决的，有没有更好的方案以及具体的成果数据。这个后面也有去做一个具体的梳理以及数据的编造，比如说对开发、维护效率的提升之类的。但由于是捏造的，并不是那么靠谱，如果面试官对这个比较感兴趣，再问一下可能就会站不住脚了（捏造数据是同事建议我的，因为他面试的时候也这样做过，不需要太老实，但是要保证可以圆回来就行）。 到后面面试的时候才意识到，其实不用说太多使用MVI架构时项目中遇到的问题，不用说那么多细节，叙述重点不应该在这里，项目的亮点更多要关注于MVI架构的出发点、搭建过程以及带来的收益。 ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:3:2","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"得物 ❌ ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:4:0","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"一面（4月20日 50min） 项目 简单八股 算法：数组中找到和为target的两个数 ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:4:1","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"二面（4月21日 30min） 客户端负责人，只聊项目，一直让我说项目的亮点难点，答得不太好，没想到也约三面了。 这时候也还是处于面试的开始阶段，一时间就被问噎住了，项目得好好梳理。 ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:4:2","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"三面（4月23日 20min） 问得很广很泛，应该是做音视频的，但是我并没有相关经历，问得也并不是常规的一些问题，就能感觉到妥妥地挂了。 一开始以为会如同同事说的那样就是纯聊天，谁知道面试的体验这么不好。因为面试后一直不给反馈结果，多次询问HR，HR也只是说面试官没有给反馈 ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:4:3","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"快手 ✅ ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:5:0","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"一面（4月21日 60min） Java八股 ArrayList：数据满了，如果我再add一个，会发生什么流程？扩容？用的什么函数？哪里用的深拷贝or浅拷贝 HashMap；put流程？什么时候转红黑树？什么时候扩容？解决Hash冲突的方式还有什么？ 锁：synchronize原理？会有几个Monitor.exit？为什么在synchronize中才能调用wait、notify、notifyAll？对比ReentrantLock？ 线程池？线程有几种状态？阻塞状态又有什么子状态？ Android八股 Handler原理？Handler.post vs view.post区别？怎么获取到view的大小？为什么能获取到？为什么handler不会阻塞主线程？（面试官说三年经验的要Handler Java 层面的原理都要清楚） RecyclerView：缓存机制？item相关的接口有哪些？remove一个item会发生什么？Activity的什么周期有什么变化？RecyclerView的生命周期有什么变化？相关的缓存发生了什么变化 kotlin协程：launch创建协程的参数有哪些？分别有什么作用？ 项目 MVI数据流向，问了些场景问题 算法： 是否是同构字符串？ 还以为挂了，因为八股问得很细，比如这个if条件怎么写的，这个真的没再去回顾源码并答不上来，面试官也反馈说我八股答得并不好，建议我还是准备下八股。想到面试官一面说着反对背八股，一面还把八股问得这么细，脑海中一阵问号？？？。其实面试完后也很受打击，以至于有点怀疑自己，没想到两个工作日后约二面了，当时以后后面的面试还会这样，于是便把面试往后排了，免得上去又被吊打。 ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:5:1","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"二面（5月11日 1h） 项目 常见八股 写了个单例 算法：数组nums1、nums2，合并nums2的数到nums1中，nums1中的size为n+m，nums1中数为n，nums2中数为m； ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:5:2","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"三面（5月12日 1h） 项目 八股：Service和线程 设计模式六大原则，哪个原则最重要 设计题： 3张图片下载；单个顺序下载、打包下载、并行下载的场景？ 点击广告，跳转应用，打开快手；想想怎么计算分成，怎么知道是从这个广告跳转下载的？ 首页接口挂了，从产品角度和技术角度想想解决方案 ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:5:3","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"HR面（5月15日 20min） 未来方向选择？ 目前有哪几家offer？ ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:5:4","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"拼多多 ❌ 跨境电商 ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:6:0","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"一面（4月25日 1h10min） 项目，就按照简历上面的项目一个一个聊 MVI、响应式框架 Java八股 HashMap原理？支持多线程并发吗？支持并发的容器有？ Android八股 绘制流程 事件分发？手指按住一个View，然后移动手指移出View的范围，再抬手，会收到哪些事件？会响应onclick吗？ 场景题 实现一个缓存池 一个小时后约二面了 ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:6:1","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"二面（4月28日 1h） 项目 八股 算法：不同的二叉搜索树 呆逼了，面试时候脑子有点抽，这种算法题都没有写完出来，挂得好 ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:6:2","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"剪映 ❌ ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:7:0","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"一面（4月24日 1h） 项目 MVI、响应式框架搭建的过程 一开始并没有说要去搭建一个响应式的框架，一开始是用的goggle官方推荐的MVI的形式 过程中发现到问题：逻辑层包含着业务逻辑，如网络请求，又包含着对Action的相应的处理逻辑，就是根据Action修改我们的UIState；所以开始思考这种相似的逻辑能不能抽离出来放到ViewModel之外，这样ViewModel里面的逻辑相对于来说更纯粹了；统一管理State的转化 技术选型：为什么选择是Redux框架 1. redux是这类框架里面最流行的，使用量最多的，当然也有调研过其他的前端状态存储的框架；例如flux、vuex，是多个数据源的 2. 其次呢是我们鹅剪这边有过实践了 更符合MVI架构，单一的数据源， 技术选型：Store对外暴露的数据容器选择，是LiveData还是Flow？ 是怎么一步步完善的？ 基础知识 synchronized vs ReentrantLock View绘制流程？view卡顿怎么定位？什么工具？onDraw怎么优化？子线程能不能绘制UI？ Service vs IntentService？IntentService使用场景 算法 链表的头节点和倒数第k个节点交换 5分钟搞定，先说思路，再写代码，然后再说说每一行代码的作用，这种题目一般是要考虑好边界问题的处理； 虽然说一遍写出来有bug，会问你再想想有没有什么问题，脑海中运行代码debug，然后快速找出问题； 结果是有个边界没处理到，也就算了 面评：项目细节还得再梳理下，包括方案的选型，架构的设计。算法很不错，包括所需的时间以及结果的正确度 ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:7:1","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"二面（5月5日 1h） 项目 八股 锁；volatile 使用场景 场景题：低并发和高并发 算法：n个数中生成m个不重复的随机数 面评：算法很不错，基础细节有些问题 ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:7:2","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"三面（5月11日 1h） 八股 handler机制 启动模式 绘制流程 https？怎么加密的？常见的code有哪些？ 项目 MVI架构 为什么要使用？ 对比MVVM 使用的收益，怎么量化的？ 算法 两个大数相减，大数为字符串 ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:7:3","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"最右 ✅ ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:8:0","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"一面（4月26日 1h10min） 不聊项目 Handler消息机制？消息怎么创建？缓存池？还有什么地方也用了类似的缓存池？什么时候Message target是0呢？ 场景题：有一个第三方库的handler你可以拿到，其中有大量的Message，其中有个一个Message你需要特殊处理下，怎么做？ 绘制流程？是深度优先还是广度优先？为什么？ 场景题：需求是输入b实际上显示为d的镜像的View，怎么实现？ App启动时，有多少线程？主线程、UIRenderThread、binder线程 JVM呢？答了GC线程 面试官说还有什么堆裁剪线程 说说你遇到的难题 surfaceView动画失效 数据库Gson反序列化出来null值的Float，Float存在于List中 智力题 正方形，存在o点，使得o点与四个点形成的三角形为等腰三角形，这样的o点有多少个？ ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:8:1","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"二面（4月28日 45min） 聊简历上面的项目，没有深入扩展去问 你懂网络方面的知识吗？我说我只了解一点，没有做过网络相关的工作 accessToken和refreshToken的区别？ 如何绕过DNS？ 如何自定义微信列表Item的View？ ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:8:2","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"HR面（4月28日 30min） 离职原因？ 工作经历？ 说说对新工作的期望？ 说说工作这两年给你带来了什么？ 工作上遇到最难的事情？有意义的事情？作为一个owner承担了哪些东西？ 说说自己的优点和缺点？ 如果项目上中途遇到问题，时间又紧迫怎么处理？ 不稳定和稳定，更倾向哪一个？ 平常会干嘛？怎么学习的？喜欢搞什么？ 说说对新工作更看待哪3点？ 职级？期望薪资？ 六险一金，最高档交公积金，900块钱餐补，9-10点上班，9-10点下班，中午午休2小时，不打卡，工作地点在迅雷大厦 目前成员7人，没有iOS端，需招聘Android2人；技术负责人就是二面的面试官 ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:8:3","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"百度 ✅ ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:9:0","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"一面[国际化]（4月27日 45min） MVI？MVVM？MVP 内存泄漏原理？用什么工具检测的？LeakCanary原理？能检测Service吗？ 协程原理 OkHttp：责任链？重试重定向拦截器在第几个？Http 和 Https的区别？HTTPS是怎么加密的？ Glide：生命周期、缓存设计、图片加载优化 你怎么检测卡顿？编舞者 第二天给了反馈，挂了；面试官有点吊儿郎当，网络的知识的确欠缺，问的开源库中的一些细节没有说的很好，挂了正常 ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:9:1","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"一面[百度地图导航]（5月12日 1h） 项目 八股居多 ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:9:2","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"二面[百度地图导航]（5月15日 1h） 项目30min MVI 架构 如何推动项目进展？ 八股20min Service vs IntentService（面试官惊讶你这个知识点挺偏的，这你都回答上来了…） 事件分发机制 注解 ClassLoader？双亲委派模型？ 异常怎么监测？ 怎么知道App退到了后台？ OOM？哪些情况会发生？如何干掉OOM，看这篇就够了！ 一个App最多有多少个进程？最多多少个线程？ Crash怎么排查的？ANR是什么？怎么排查？ 怎么判断一个对象可以被回收？ ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:9:3","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"三面[百度地图导航]（5月16日 1h） 项目 15min 软技能 35min 你是怎么推动项目的进展的？ 遇到问题怎么处理的？可能会导致项目延期的问题怎么处理？举例说明 你更倾向于是项目中一个成员还是项目的owner？为什么呢？说了下成长过程，曾经作为项目成员是如何萌发owner意识的 你说你的代码质量不错，有什么可以体现呢？bug率、领导同事的反馈、外部团队的反馈 你的优势点是什么？你的缺陷是什么？ 你平时会干什么？读的书有哪些？读书、看电影、打游戏 你平时是怎么学习的？1. 书籍 2. 大厂技术分享 3. 优质博客 你觉得工作中最重要的几个点是什么？1. owner意识，责任心 2. 团队协作、沟通能力 3. 技术能力 你目前的薪资是多少？ 问答 10min 如果我能够成功通过面试，我会承担什么样的角色？对我有什么期望？ 项目的前景？ 大家是否都会有机会参与到一些性能优化的工作？ 人员梯度构成？有校招生 百度导航没有HR面，直接收集薪资流水了；我理解是三面聊得很好，头一次遇到面试官问薪酬的，大概是直接想要我了 ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:9:4","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"华盛通 ✅ ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:10:0","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"一面（4月27日 1h） 纯基础 HashMap原理？是否线程安全？如何保证线程安全呢？concurrentHashMap怎么实现的？ synchronize的锁升级知道吗？CAS？volatile原理？内存屏障指令？ 双亲委托模型？为什么要有这个模型？ view绘制流程？是深度优先还是广度优先？为什么？ Handler消息机制 事件分发机制 算法 如何判断链表有环？多种方案 如何找出无序数组中的第k大的值？多种方案 ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:10:1","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"二面（5月4日 20min） 项目 你说的代码质量好怎么体现的？说说编程规范？ kotlin协程原理，对比线程的优势？ ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:10:2","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"HR面（5月4日 1min） 你的期望薪资是多少？ ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:10:3","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"taptap ✅ ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:11:0","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"一面（5月4日 2h） 项目 八股 算法：实现LRUCache ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:11:1","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"二面（5月9日 1h） 项目 50min 主要就在聊MVI架构、其次问了下其他的项目，聊得比较浅。虽然说二面有三个面试官，但是并没有太大的压力 算法 5min 合并两个升序链表 问答 5min ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:11:2","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"三面（5月10日 1h） 项目 算法：二叉树的最近公共祖先 未来的规划？希望下一个工作是怎么样的？面试官也给了一些建议，后面才知道这个面试官并不是做Android的，但是的确也不错。 面试官聊了聊广告SDK以及当前团队的情况包括工作节奏啥的 ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:11:3","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["技术"],"content":"HR面（5月11日 20min） 问问目前的面试情况？ 期望薪资 未来的工作方向的选择？ ","date":"2023-04-14","objectID":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/:11:4","tags":["面试","Android","JAVA"],"title":"面试经历-2023","uri":"/%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-2023/"},{"categories":["生活"],"content":" 享受生活，热爱生活，发现生活中的美 ","date":"2023-03-21","objectID":"/life-001-%E4%BA%BA%E7%94%9F/:0:0","tags":["思考","生活"],"title":"Life 001 人生","uri":"/life-001-%E4%BA%BA%E7%94%9F/"},{"categories":["生活"],"content":"阅读 ","date":"2023-03-21","objectID":"/life-001-%E4%BA%BA%E7%94%9F/:1:0","tags":["思考","生活"],"title":"Life 001 人生","uri":"/life-001-%E4%BA%BA%E7%94%9F/"},{"categories":["生活"],"content":"人生 人生 8.5 《人生》是路遥的一部中篇小说，发表于1982年，它以改革时期陕北高原的城乡生活为时空背景，叙述了高中毕业生高加林回到土地又离开土地，再回到土地这样人生的变化过程。高加林同农村姑娘刘巧珍、城市姑娘黄亚萍之间的感情纠葛构成了故事发展的矛盾，也正是体现那种艰难选择的悲剧。 《人生》这本书很好看，目前的年度最佳，对我还是有一定的影响的 仿佛看见了自己，那种内心的挣扎 “人生的道路虽然漫长，但紧要处常常只有几步，特别是当人年轻的时候。” 虽然刘巧珍是一个目不识丁的农民，但是感情、思想、人品是杠杠的，爱得热烈，拿得起也放得下，一些方面男主高加林也是自愧不如的；只可惜高加林最后半路上抛弃了\"宝\"一般的巧珍，选择了看似和他匹配的黄亚萍，黄亚萍同样是一个接受过教育的年轻人，能够与他一同谈论文化方面的话题，满足高层次的精神需求，然而人在得意时容易忘乎所以，之间存在的背景、家世的差距也抛之脑后，也未曾想过一朝一夕之后便狠狠地跌落在地，只能屁滚尿流地滚回农村，才想起巧珍的爱。 这本书的主线就是叙述高加林的人生的起起伏伏，而我对该书的体会则是人生海海，山山而川 人生海海，山山而川 的原句来自于麦家的小说《人生海海》『人生海海，山山而川，不过尔尔』 人生像大海一样茫然，总是起起落落，有多不确定因素，走过平湖烟雨，跨过岁月山河，最终发现也不过如此。——来自网上说的我觉得最贴切释义 为什么我没有补上\"不过尔尔\"，不是因为字数限制，而是我还没有这种境界。 ","date":"2023-03-21","objectID":"/life-001-%E4%BA%BA%E7%94%9F/:1:1","tags":["思考","生活"],"title":"Life 001 人生","uri":"/life-001-%E4%BA%BA%E7%94%9F/"},{"categories":["生活"],"content":"工作 ","date":"2023-03-21","objectID":"/life-001-%E4%BA%BA%E7%94%9F/:2:0","tags":["思考","生活"],"title":"Life 001 人生","uri":"/life-001-%E4%BA%BA%E7%94%9F/"},{"categories":["生活"],"content":"我们中心都被裁了？！ 最近我的人生也激起了一些波澜，在一个平常的下午，我还在勤勤恳恳地排查问题，一如往常的我，面对这些疑难杂症早已是一副云淡风轻的样子。坐在旁边的同事忽然拍了下我的肩膀，一脸喜悦无以言表，一副满腔话语不吐不快的模样，但半天没憋出一句话，我满脑子疑问，随即试探性地问道：你是要走了吗？“我们中心都被裁了！\"，老哥激动地说道。 ","date":"2023-03-21","objectID":"/life-001-%E4%BA%BA%E7%94%9F/:2:1","tags":["思考","生活"],"title":"Life 001 人生","uri":"/life-001-%E4%BA%BA%E7%94%9F/"},{"categories":["生活"],"content":"流程式的官方通知，民间的消息总比官方快 掩不住激动的心情，早已经不想呆的团队终于迎来了解散的这一天 leader还是流程式地找组内成员一个一个聊了过去，但感觉其实没有这个必要，直接一起通知就好了，还节省时间，并没有什么说不了的事情。 ","date":"2023-03-21","objectID":"/life-001-%E4%BA%BA%E7%94%9F/:2:2","tags":["思考","生活"],"title":"Life 001 人生","uri":"/life-001-%E4%BA%BA%E7%94%9F/"},{"categories":["生活"],"content":"双赢？含泪挣20w赔偿金，被迫加速到人生第一个百万 去年就开始在看机会，并且断断续续准备了面试，但是这种断断续续准备的面试，并不是很靠谱，你要说复习到什么进度呢？那还真的说不好 ","date":"2023-03-21","objectID":"/life-001-%E4%BA%BA%E7%94%9F/:2:3","tags":["思考","生活"],"title":"Life 001 人生","uri":"/life-001-%E4%BA%BA%E7%94%9F/"},{"categories":["生活"],"content":"人生无常，同事错失大额赔偿 有一个比我小一届的同事，找到了武汉那边的工作，立马辞职了，没想到过了几天整个中心都被裁了，错失一大波赔偿 ","date":"2023-03-21","objectID":"/life-001-%E4%BA%BA%E7%94%9F/:2:4","tags":["思考","生活"],"title":"Life 001 人生","uri":"/life-001-%E4%BA%BA%E7%94%9F/"},{"categories":["生活"],"content":"全新的人生体验，生活总得向上 其实对我来说是一件全新的人生体验，虽然说在目前这个环境下，被裁并不是一件很好的一件事，但是既然被裁了，说再多的话也没用，积极迎接未来便可，况且之前本就想逃离这个一潭死水的项目组。况且生活总得向上，只是有人推波助澜，还抓着你说，快走吧，我会给你一笔赔偿金的，让你加速踏出自己的舒适圈。 ","date":"2023-03-21","objectID":"/life-001-%E4%BA%BA%E7%94%9F/:2:5","tags":["思考","生活"],"title":"Life 001 人生","uri":"/life-001-%E4%BA%BA%E7%94%9F/"},{"categories":["生活"],"content":"面试那些事 ","date":"2023-03-21","objectID":"/life-001-%E4%BA%BA%E7%94%9F/:2:6","tags":["思考","生活"],"title":"Life 001 人生","uri":"/life-001-%E4%BA%BA%E7%94%9F/"},{"categories":["生活"],"content":"环境不好，哆哆嗦嗦，怒骂菜狗 目前整个市场的就业环境并不是很好，买方市场，僧多粥少的情况，为了争夺一个岗位，需要排队，而且最好要排在第一位才有机会 ","date":"2023-03-21","objectID":"/life-001-%E4%BA%BA%E7%94%9F/:2:7","tags":["思考","生活"],"title":"Life 001 人生","uri":"/life-001-%E4%BA%BA%E7%94%9F/"},{"categories":["生活"],"content":"来一瓶红牛？ 刚开始面试的时候还是比较虚的，其一就是很久没有面试，不知道目前的面试的要求、面试的难度，都是一无所知，其二就是一开始准备的并不是那么充分，面试技巧也基本为零，这就导致需要外物来提神，生怕由于脑子一抽，问题回答得不好，高低陪个红牛，增加自信 ","date":"2023-03-21","objectID":"/life-001-%E4%BA%BA%E7%94%9F/:2:8","tags":["思考","生活"],"title":"Life 001 人生","uri":"/life-001-%E4%BA%BA%E7%94%9F/"},{"categories":["生活"],"content":"渐入佳境，重拳出击 随着面试的场次增多，期间也不断梳理项目，补充基础知识，也自信了很多，可以保证叙述的条理性，有条不紊，面试也渐渐如鱼得水一般，开始随意拿捏面试官，更不要说陪一瓶红牛了，巅峰状态下不太需要这种额外的安慰剂来给自己打气，直接几天内火速走完3个公司的面试流程，拿下offer。 ","date":"2023-03-21","objectID":"/life-001-%E4%BA%BA%E7%94%9F/:2:9","tags":["思考","生活"],"title":"Life 001 人生","uri":"/life-001-%E4%BA%BA%E7%94%9F/"},{"categories":["生活"],"content":"长沙 or 深圳？ 生活 or 高薪？965 or 995？ 长沙华盛通的流程走得很快，offer也很快发了下来，因此就需要立马选择是否接下这个offer，这还是处于面试前期的阶段 ","date":"2023-03-21","objectID":"/life-001-%E4%BA%BA%E7%94%9F/:2:10","tags":["思考","生活"],"title":"Life 001 人生","uri":"/life-001-%E4%BA%BA%E7%94%9F/"},{"categories":["生活"],"content":"还是决定再卷几年，完成原始积累 认真思考了今天，觉得还是先接下这个 offer 吧，免得到手的 offer 又拱手让人，后面拿到其他的 offer 再一起对比看看。但是事与愿违，当我和 HR 说接 offer 的时候，她先问了我什么时候可以入职，然后说出了有其他的人接了这个offer，并且本周就可以入职，然后说只有一个 hc，下次有机会再合作了。当时感觉这事就很离谱，既然我是排第一位，也没和我说在某个期限内为我保留 offer，而是直接和其他候选人聊好了，等到我给出我这边的结论的时候再说出来，顿时感觉是一种挺恶心的行为，但回头一想别人似乎没有义务为你的纠结考虑这么多，只是并不是那么体面而已。 ","date":"2023-03-21","objectID":"/life-001-%E4%BA%BA%E7%94%9F/:2:11","tags":["思考","生活"],"title":"Life 001 人生","uri":"/life-001-%E4%BA%BA%E7%94%9F/"},{"categories":["生活"],"content":"巅峰状态，面试如鱼得水，各个轻松拿下 ","date":"2023-03-21","objectID":"/life-001-%E4%BA%BA%E7%94%9F/:2:12","tags":["思考","生活"],"title":"Life 001 人生","uri":"/life-001-%E4%BA%BA%E7%94%9F/"},{"categories":["生活"],"content":"带家人一起旅游 去年早已说过和家人一起去桂林旅行，但是由于种种原因迟迟不能兑现，恰好今年被裁了，找到工作以后还有一段gap的时间，于是就有了桂林游记。 ","date":"2023-03-21","objectID":"/life-001-%E4%BA%BA%E7%94%9F/:2:13","tags":["思考","生活"],"title":"Life 001 人生","uri":"/life-001-%E4%BA%BA%E7%94%9F/"},{"categories":["生活"],"content":"深圳 or 上海？ 技术满足、生活满足、陌生的城市 ","date":"2023-03-21","objectID":"/life-001-%E4%BA%BA%E7%94%9F/:2:14","tags":["思考","生活"],"title":"Life 001 人生","uri":"/life-001-%E4%BA%BA%E7%94%9F/"},{"categories":["生活"],"content":"和对象一起旅游 由于S请不到假，没办法去远一点的地方旅行，就近选择了一直想去的汕头，便有了汕头游记。 ","date":"2023-03-21","objectID":"/life-001-%E4%BA%BA%E7%94%9F/:2:15","tags":["思考","生活"],"title":"Life 001 人生","uri":"/life-001-%E4%BA%BA%E7%94%9F/"},{"categories":["生活"],"content":"奇思妙想 为什么读书对人的成长帮助很大？没有其他更有效的途径了吗？ ","date":"2023-03-21","objectID":"/life-001-%E4%BA%BA%E7%94%9F/:3:0","tags":["思考","生活"],"title":"Life 001 人生","uri":"/life-001-%E4%BA%BA%E7%94%9F/"},{"categories":["生活"],"content":"值得一读 人类的终极工具 chatGPT 完全是另外一个维度的工具，积累了人类历史上的很多文字和知识，并且可以不断地进化。如果具备一些人类的核心能力，比如逻辑、推理和归纳，chatGPT 就是一个活了几百年的人，并且随着时间的推移不断地进化和自我更新。当 chatGPT 这种技术和波士顿动力的机器人结合起来，这个活了几百年的老人就有了身体。这是不是很恐怖？ 文章提供了一个不错的角度，倘若chatGPT充分去吸收人类历史上的知识，再结合一个肉身，那岂不是分分钟可以秒杀大多数的人类？这就好比知识可以传承，知识的获取将轻而易举，那将无法想象，首先让我想到的就是三体中的三体人，三体人的文明之所以有所高度，和记忆的遗传有很大的关系。 ","date":"2023-03-21","objectID":"/life-001-%E4%BA%BA%E7%94%9F/:4:0","tags":["思考","生活"],"title":"Life 001 人生","uri":"/life-001-%E4%BA%BA%E7%94%9F/"},{"categories":["技术"],"content":"好久不面试，突然准备面试，其实是挺难受的，就简历这一环节可能都整整花费了我一周的时间去思考、修改。 简历 耗时1周，写简历是一件很苦恼的一件事，总觉得自己的简历没啥好写，还是要深度去思考挖掘 算法 耗时2周半，《剑指offer》基本看完，题目刷完，后续面试过程中又在持续刷leetcode热题100，虽说面试考察的题型大多数属于链表、树之类的，但偶尔也出现了未遇见过的题目，包括随机数生成之类的，如果时间不充足，还是优先刷热门的题型应付面试比较合适 八股 耗时1周半，面试期间不断查漏补缺 项目 耗时1周，面试期间不断优化梳理，包括项目的充实度，可挖掘的东西以及能通过言语体现出来的东西 面试技巧 面试过程中不断完善 ","date":"2023-03-12","objectID":"/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87-2023/:0:0","tags":["面试","Android","JAVA"],"title":"面试准备-2023","uri":"/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87-2023/"},{"categories":["技术"],"content":"简历 开发者客栈-在线简历制作 简历准备了好久，感觉简历是很难写的 ","date":"2023-03-12","objectID":"/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87-2023/:1:0","tags":["面试","Android","JAVA"],"title":"面试准备-2023","uri":"/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87-2023/"},{"categories":["技术"],"content":"复习 算法 动态规划 队列 二叉树 栈 回溯 八大排序 堆排序 快速排序 归并排序 冒泡排序 插入排序 计数排序 基数排序 希尔排序 堆 图 拓扑排序 bfs；查找图中的最短路径，使用队列实现，可以使用两个队列轮转 dfs；查找图中的路径 贪心算法 计算机网络 TCP|IP 三次握手、四次挥手 Java 线程池 基础 并发 Android 基础 view绘制流程 Handler Binder 事件分发 协程 开源框架 OkHttp 拦截器 连接池 缓存 Glide 三级缓存 生命周期感知 with load into Retrofit 动态代理 适配器 项目梳理+总结 ","date":"2023-03-12","objectID":"/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87-2023/:2:0","tags":["面试","Android","JAVA"],"title":"面试准备-2023","uri":"/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87-2023/"},{"categories":["技术"],"content":"算法 为什么01背包和完全背包的状态转移方程存在差异？ 『 一文搞懂完全背包问题 』从0-1背包到完全背包，逐层深入+数学推导 可以理解完全背包可以多次放入同一物品，所以要再从dp[i]中去找，这也和完全背包内层循环是顺序遍历相呼应。 正因为01背包要考虑到上一行的状态，如果是一维DP，则内层循环需要逆序遍历。 「完全背包问题」内层循环正序，而「0-1 背包问题」中内层循环反序？ 是的，完全背包问题和 01 背包问题在实现上的一个区别就是内层循环的顺序不同。 在完全背包问题中，我们可以选择多次放入同一种物品，因此内层循环应该正序遍历背包容量，以便能够考虑放入多个第 i 种物品的情况。具体而言，内层循环应该从 w[i] 开始，遍历到背包容量 j，状态转移方程为： dp[i][j] = max(dp[i-1][j], dp[i][j-w[i]] + v[i]) 其中，dp[i-1][j] 表示在考虑前 i-1 种物品时，背包容量为 j 时的最大价值，dp[i][j-w[i]] + v[i] 表示在考虑前 i 种物品时，背包容量为 j-w[i] 时的最大价值，加上放入一个第 i 种物品的价值 v[i]。 而在 01 背包问题中，每种物品只能选择放或不放，因此内层循环应该倒序遍历背包容量，以确保每个状态只考虑了前面的状态，而不会重复考虑同一个物品。具体而言，内层循环应该从背包容量 j 开始，倒序遍历到 w[i]，状态转移方程为： dp[i][j] = max(dp[i-1][j], dp[i-1][j-w[i]] + v[i]) 其中，dp[i-1][j] 表示在考虑前 i-1 种物品时，背包容量为 j 时的最大价值，dp[i-1][j-w[i]] + v[i] 表示在考虑前 i-1 种物品时，背包容量为 j-w[i] 时的最大价值，加上放入一个第 i 种物品的价值 v[i]。 ","date":"2023-03-12","objectID":"/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87-2023/:2:1","tags":["面试","Android","JAVA"],"title":"面试准备-2023","uri":"/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87-2023/"},{"categories":["技术"],"content":"操作系统 分页 疑问 页帧号为什么要左移再加上偏移量? 页帧号左移再加上偏移量是因为在虚拟内存系统中，一个进程的虚拟地址空间被划分为多个固定大小的页（Page）或页面，而物理内存也被划分为相同大小的页框（Page Frame）。 当进程需要访问一个虚拟地址时，操作系统需要将该虚拟地址转换为物理地址，这个转换的过程就叫做地址映射。地址映射的过程包括两个步骤： 将虚拟地址中的页号与物理地址中的页帧号进行映射； 将虚拟地址中的页内偏移量加上物理地址中的页帧内偏移量。 因此，将页帧号左移再加上偏移量的操作实际上是完成了第二步的地址映射操作，将虚拟地址中的页内偏移量加上了物理地址中的页帧内偏移量，从而得到了最终的物理地址。 需要注意的是，页帧号左移的位数是根据页面大小来确定的。例如，如果页面大小为4KB，那么页帧号需要左移12位，因为2的12次方等于4KB。因此，物理地址的前几位是页帧号，后面的几位是页帧内偏移量。 疑问 为什么多队列多处理器调度（MQMS）虽然通过工作窃取（Work Stealing）避免了负载不均的问题，但是就会出现缓存亲和性的问题啊？还是说这个问题相对负载不均并不是那么严重？？？ ","date":"2023-03-12","objectID":"/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87-2023/:2:2","tags":["面试","Android","JAVA"],"title":"面试准备-2023","uri":"/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87-2023/"},{"categories":["技术"],"content":"Android Android源码 Choreographer Android Choreographer 源码分析 基础知识 用十张图帮你解析RecyclerView的缓存复用机制了！ 常见的框架 Glide Android Glide源码剖析系列 优缺点 优点 内存占用低，Glide默认的Bitmap格式是RGB_565，比ARGB_8888格式的内存开销要小一半，所以图片质量会稍微差一些，当然这些配置都是可以修改的。 Glide缓存的图片大小是根据ImageView尺寸来缓存的。这种方式优点是加载显示非常快。且可以设置缓存图片的尺寸 高效处理Bitmap，使用Bitmap Pool来对Bitmap进行复用，主动调用recycle回收需要回收的Bitmap，减小系统回收压力 缺点 体积相对来说比较大，目前最新版的大小在500k左右 当我们从远程URL地址下载图片时，Picasso相比Glide要快很多。可能的原因是Picasso下载完图片后直接将整个图片加载进内存，而Glide还需要针对每个ImageView的大小来适配压缩下载到的图片，这个过程需要耗费一定的时间。（当然我们可以使用thumbnail()来减少压缩的时间） 三级缓存 活动缓存；Map\u003cKey,WeakReference\u003e，如果活动缓存没有命中，而内存缓存命中了，则会将内存缓存中的资源移动到活动缓存；如果活动缓存中的资源被标记回收了，则将移除活动缓存，放入内存缓存 内存缓存（LRU）；LinkedHashMap，访问顺序 磁盘缓存（LRU）；保存原图、保存压缩后的图、都保存 BitmapPool Bitmap 复用是指在使用 Bitmap 时，将已经创建过的 Bitmap 对象重新利用，以避免重复创建和销毁 Bitmap 造成的内存和性能消耗。Bitmap 复用的原理是利用 Bitmap 对象的内存块，将 Bitmap 对象的属性和图像数据重置，从而达到重用的目的，这样可以避免频繁的内存分配和回收，提高应用程序的性能和内存使用率。 Bitmap 之所以可以复用，一方面是因为 Bitmap 对象本身是存储在内存中的一块连续的字节数组，只要不释放其内存块，就可以将其包含的属性和图像数据重置，从而复用它。另一方面，是因为 Bitmap 对象的使用周期相对较长，在很多应用场景中，同一个尺寸的 Bitmap 对象会被多次使用，因此进行 Bitmap 复用可以有效地减少内存分配和回收的次数，进而提升应用性能和内存使用率。 Bitmap 复用需要注意以下几点： Bitmap 复用只适用于尺寸和格式相同的 Bitmap 对象。 在 Bitmap 复用的过程中，需要注意复用的 Bitmap 对象是否已经被释放或重置，避免内存泄漏或位图错误。 综上所述，Bitmap 复用是一种有效的内存和性能优化方式，可以通过重用已有的 Bitmap 对象减少内存分配和回收的次数，提高应用程序的性能和内存使用率。 问题 如果Glide的调用在后台线程，则会使用和application生命周期的RequestManager；这是为什么呢？首先想到的就是UI组件肯定得在主线程调用 OKHttp 设计模式 责任链模式 拦截器链： RetryAndFollowUpInterceptor 重试和重定向拦截器，负责网络请求重定向、重试逻辑 BridgeInterceptor 桥接拦截器，从应用程序代码到网络代码的桥梁，首先从用户请求构建网络请求，然后继续调用网络，最后根据网络响应构建用户响应 CacheInterceptor 缓存拦截器，请求缓存相关逻辑以及将响应写入缓存，包括缓存策略 ConnectInterceptor 连接拦截器，打开与目标服务的连接 CallServerInterceptor 请求服务器拦截器，对服务器进行网络调用 开发者可以自行添加拦截器，包括应用拦截器、网络拦截器； 应用拦截器\u0026网络拦截器 应用拦截器处于内部拦截器之前，网络拦截器处于CallServerInterceptor之前，ConnectInterceptor之后。 应用拦截器的proceed肯定会调用一次，网络拦截器的proceed不调用或者调用多次，因为可能命中了缓存或者进行了重试或者重定向。 一般应用拦截器可以用来打印网络请求相关的日志，网络拦截器可以发起网络请求的相关数据。 CacheIntercept 主要就是通过缓存策略结合具体的网络或者缓存情况来进行逻辑处理 如果网络请求不可用，且本地没有缓存，则返回504的错误码 如果[不使用缓存][本地没有缓存][缓存过期or失效]，则直接发起网络请求 网络请求回来，[本地有缓存]\u0026\u0026发现远程资源并没有更新[304]，则直接使用缓存 否则判断是否要将请求response进行缓存;[开启缓存策略][response能够缓存] 虚拟机 dalvik vs art Binder 为什么AMS和zygote进程通信不用Binder，而是socket？因为fork操作不能在多线程的环境下 为什么SystemServer进程与Zygote进程通讯采用Socket而不是Binder mmap mmap是一种内存映射文件的方法，它将一个文件映射到进程的地址空间中，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一一对映的关系。实现这样 的映射关系后，进程就可以采用指针的方式读写操作这一段内存，而系统会自动会写脏页面到对应的文件磁盘上，即完成了对文件的操作而不必要再调用read、write等系统 调用函数。相反，内核空间对这段内存区域的修改也直接反映用户空间，从而实现不同进程间的数据共享 Android源码应用 ContentProvider 我们知道Android的IPC大部分是使用binder，ContentProvider也不例外，如果要传输比较大的文件，binder就不能很好地胜任（binder通信的限制在1M-8k），所以Android采用了匿名内存共享数据来把需要在进程间传输的数据都写到共享内存中去，然后只通过Binder进程间通信机制来传输一个共享内存的文件描述符给对方就好了，对方拿到打开文件描述符就可以对共享内存的数据进行读写。 ContentProvider.openFileDescriptor() Android系统已经帮我们提供文件共享的实现了 FileProvider ContentProvider解析 ContentProvider原理总结 Android ContentProvider原理总结 模块化 模块之间的通信？ 单工程-\u003e模块化-\u003e组件化 模块化：按业务模块来划分 组件化：各个业务会依赖到的可重用的逻辑，比如说日志组件、网络组件、ui组件等 模块之间的通信呢？ 我们这边是用的Router，各个模块会依赖Router基础库，向外部暴露统一的接口，注册到Router中，因此各个模块都可以通过Router来获取到其他模块对外暴露的接口，通过Router的中转，依赖接口隔离各个模块的具体的实现逻辑，所以各模块之间的依赖关系是很清晰的。 api 对外暴露的类？ 就是我们各个模块下存在一个api的目录，用于存储本模块对外暴露的接口或者类；这些接口或类在编译的时候，会copy到base_interface的模块，各个业务模块都会 依赖这个基础的模块；除此之外，对外暴露的api通常有一个叫做Service的概念，意外着是这个module对外提供的服务或者能力，这个Service的具体实现是在本模块中。 编译期间各个模块都会生成Service到Service具体实现的一个映射类，Router初始化的时候会调用map将其注册到内存中，由于Service接口在base模块，各个业务模块都能获取到对应的类，各模块只需要通过getService来获取即可，这样通过接口就完全将各模块解耦开来。 ","date":"2023-03-12","objectID":"/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87-2023/:2:3","tags":["面试","Android","JAVA"],"title":"面试准备-2023","uri":"/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87-2023/"},{"categories":["技术"],"content":"kotlin基础 内联 lambda优化 从 Java8 开始，Java 借助 invokedynamic 来完成的 Lambda 的优化。 invokedynamic 用于支持动态语言调用。在首次调用时，它会生成一个调用点，并绑定该调用点对应的方法句柄。后续调用时，直接运行该调用点对应的方法句柄即可。说直白一点，第一次调用 invokeddynamic 时，会找到此处应该运行的方法并绑定， 后续运行时就直接告诉你这里应该执行哪个方法。 重学 Kotlin —— inline，包治百病的性能良药？ ","date":"2023-03-12","objectID":"/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87-2023/:2:4","tags":["面试","Android","JAVA"],"title":"面试准备-2023","uri":"/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87-2023/"},{"categories":["技术"],"content":"Java基础 动态代理 Android插件化原理解析——Hook机制之动态代理 JMM 工作内存和主内存 工作内存和主内存之间存在一套协议 多线程环境下要保证线程之间共享变量的可见性 volatile关键字 java单例模式与指令重排 并发 锁优化技术：锁粗化、锁消除、锁升级 偏向锁-\u003e轻量级锁-\u003e自旋锁-\u003e自适应自旋锁-\u003e重量级锁 monitorenter、monitorexit CAS compare and swap Java线程是基于内核线程实现的，会映射到内核线程，因此线程的切换涉及系统调用，陷入内核态 死磕 Java 并发编程（7）：读写锁 ReentrantReadWriteLock 源码解析 万字长文，带你深入理解AQS 队列同步器 生产者消费者 为什么condition.signal要在lock.unlock之前，这之间的是怎么运作的？ ReentrantLock中Condition的wait方法、signal方法简单场景回顾 ConcurrentHashmap 深入解析ConcurrentHashMap：感受并发编程智慧 ","date":"2023-03-12","objectID":"/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87-2023/:2:5","tags":["面试","Android","JAVA"],"title":"面试准备-2023","uri":"/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87-2023/"},{"categories":["技术"],"content":"Android ViewModel 生命周期是怎么样的 2.0之前空的Fragment；2.0以后，AndroidX的支持，LifecycleOwner支持 Parcelable和Serializable的区别 每日一问 Parcelable 为什么效率高于 Serializable ？ ","date":"2023-03-12","objectID":"/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87-2023/:2:6","tags":["面试","Android","JAVA"],"title":"面试准备-2023","uri":"/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87-2023/"},{"categories":["技术"],"content":"项目 拍摄页改版 发布页需求：同步到微博、封面支持文字编辑能力、支持话题推荐 TavCut接入微视，贴纸 渲染卡顿上报、素材库技术上报、微视蓝领需求、话题详情页改版、 素材库（UI组件） 剪辑、拍摄：音乐混剪、合拍、边看边标（加密视频预览播放） 拍同款：上报，涉及的链路长、拍同款应用 话题列表页 MVI Flow搭建Redux核心框架 上报也是使用action 演变 MVI雏形，viewmodel暴露dispatch接口-\u003e 讨论架构，引入redux -\u003e 存在ViewAction和StateAction -\u003e 存在usecase层，抽出viewmodel中可复用的逻辑 -\u003e 新增ReportAction用于上报 -\u003e 引入middleware，usecase中的逻辑迁移到此 -\u003e 去除ViewAction Repository对外暴露数据的接口使用Flow承载 包括为了兼容旧的业务逻辑，以前是存在很多EventBus的方式接受请求回报，统一封装在repository层，对外屏蔽EventBus，这种应该退出历史舞台 View可以内部闭环的逻辑就没必要通过Viewmodel去处理了 历史债：使用jce定义的数据结构，非data class，无法做数据diff 为什么UiState下还要区分HasData、NoData 如果列表中的Item的功能足够复杂，所以会拆分为多个区域去处理对应的UI显示以及以及业务逻辑，与此同时，对应的区域存在对应的数据去描述，而且需要处理局部刷新的问题：对比数据变化-\u003eUI变化的区域，使用payload去进行刷新，如果用户的一个操作会导致多个UI区域刷新，则需要payload多个数据到recyclerView的item，所以getChangePayload中的逻辑则是这样的：创建一个用于list用于容纳payloads，如果某个区域数据变化，则add该区域的payload数据，对应的区域处理对应的payload EventBus收归到Repository，EventBusRepository，对外提供flow copy不会导致内存爆掉吗？因为state都是用的copy的方式去描述页面状态的变化，答案当然是不会，state的变化并不是深拷贝，而是拷贝所变化的部分，也就是差异化拷贝，可以理解state是一个树状的一个结构，一般来说state树发生变化也只是叶子节点的数据发生变化，每一次的变化不会涉及到整个state的对象的深拷贝，所以内存的压力可以不用考虑 MVI优缺点 优点 单向数据流，容易对State的变化进行跟踪和回溯 唯一可信源，减少了复杂性 通过定义的Action以及State就可以快速理解当前的业务逻辑，可以直接当成当前业务的接口文档来看 对State进行集中管理，可以有效减少MVVM架构ViewModel对外暴露的LiveData 可测性好，State的变化的函数是纯函数，有利于单测，80% 可维护性好，后续新增业务逻辑，只需要添加相应的Action，然后处理对应的Action扭转状态 缺点 state是不变的，因此每当state需要更新时都要创建新对象替代老对象，这会带来一定内存开销 随着业务的增长，State也会膨胀 MVVM的优缺点 缺点 随着业务的增长，ViewModel也会增加，ViewModel中的LiveData等业务逻辑也会增长，维护成本也在增高 多个子模块间要通信，需要持有对应模块的ViewModel，这就意味着需要把对方的ViewModel作用域提升，这样的话如果子模块复杂，互相持有 技术方案选型 响应式的框架，框架的输入是UI的事件，我们抽象定义为Action，框架的输出是UI的状态，UI只需要关心自己所对应的状态数据即可； 【一开始是goggle官方推荐的MVI】 一开始是按照官方推荐MVI的示例来做的，State由ViewModel持有，UI订阅State，ViewModel对外提供dispatch的接口，参数为Action，UI发送Action事件后，viewModel处理对应事件的业务逻辑并更新State，然后就是存在数据仓库层Repository用于获取页面数据，也存在一个叫做UseCase的层，用于抽取ViewModel中的可通用的业务逻辑，例如点赞、关注 【产生业务思考】 然后随着业务的开发，发现ViewModel中 一是存在 根据Action去更新State的一个个方法，其次是其他的业务逻辑；然后就思考，State是不是应该有个统一管理的地方呢？联想到我们鹅剪的剪辑框架，基于redux做的，就是统一管理State，有确定的输入和输出，State有对应的reducer去处理，reducer是一个个纯函数 【为什么选择Redux框架？】 1. redux是这类框架里面最流行的，使用量最多的，当然也有调研过其他的前端状态存储的框架；例如flux、vuex，是多个数据源的 2. 其次呢是我们鹅剪这边有过实践了 更符合MVI架构，单一的数据源，然后我这边就和负责架构的同学提议，可以采用redux框架来管理状态，将状态更新相关的代码可以抽离到一个独立的地方 【LiveData vs FLow】 然后我这边就开始封装Redux框架，至于为什么我没有直接把鹅剪的框架迁移过来，也做了一些考虑。鹅剪的Redux框架结合LiveData实现，考虑到LiveData的特性，需要在LiveData之上再做一层封装，1. LiveData不支持数据流的，在我们的UI上面，一个Button只需要关注它关注的状态就好了，但给到UI这边是一个大UIState，需要select出它所关注的状态 2. 就是LiveData发送同样的值，订阅者也会收到 而这些特性Flow天热就支持了，考虑到这边团队也在用flow，所以就直接采用Flow+Redux来实现就好了；当然Flow也有一个问题就是LiveData特有的优势，那就是生命周期感应，但是LiveData也是基于LifeCycle来的，一看官方也有提供用于Flow使用的Api，也是基于lifecycle实现的，可以在UI中合理地订阅flow。对，框架就这样搭建起来了，就是简单的Store、Action、State、Reducer这几个主要的概念 【添加middleware】 后续就是继续提升框架的一个包容性，刚刚我们也说到，我们把State变化的逻辑从ViewModel中抽离了出来，取而代之的是ViewModel持有我们的Store，剩下的就还有一些业务逻辑，比如点赞、关注、拉取页面数据、数据上报等，然后就是引入了middleware的概念，中间件，Action会先从Store的dispatch接口进来，再进入一个个middleware，最后再进入内部的reducer进行状态变化，然后再一层层出来，类似于一个责任链的概念，middleware都有机会接受到Action来处理一些逻辑，例如复杂数据处理、网络请求、数据上报之类的；我们也提供了通用的middleware，例如打印日志 【代码抽离】 这样我们就可以把ViewModel中剩下的业务逻辑也抽离放置到Redux框架的middleware中了，例如followmiddleware、likemiddleware，fetchDataMiddleware，类似与点赞、关注middleware又持有的是一些usecase，usecase可以在各个页面直接复用，ViewModel就纯粹到只有2个接口，一个是dispatch，一个是uiState 【框架使用优化】 其次考虑到UI层并未使用声明式的UI框架，如compose，UI层还存在一些UI订阅对应的State的模板代码（启动一个协程，然后select出对应的state，再调用distinctuntilChanged，最后再collect订阅），实属丑陋；采用kotlin扩展函数、中缀表达式、闭包语法优化 简化状态订阅的代码逻辑，框架就基本成型了，后续的需求就可以直接使用了 【框架使用分享】 其中我们会制定一些规则以及梳理一些最佳实践的案例，在组内进行分享 拍同款 scheme协议设计 业务场景标记字段 businessType 通用素材数据定义 MaterialInfo MaterialInfo编码考虑？Base64 or URL encode？考虑到URL encode对字符长度的增加过大，代码库中有使用Base64编码的先验，因此直接使用Base64编码；同时由于是在URL中进行传输，所以需要考虑Base64的编码模式 通用素材预加载机制：为提升用户的体验，在Router路由框架中添加素材预加载的拦截器，检测到scheme中存在素材则启动预加载逻辑，拉取素材详情并下载素材包；同时在用户打开剪辑页的拦截器，如果素材未加载成功则显示全屏的Loading，否则不拦截； 异常处理逻辑：包括版权素材不可剪情况下的异常提示（无版权）、视频换链失败异常提示、 封装通用的放号授权逻辑：参考Glide的实现封装到一个空的Fragment中，对外提供统一的接口；在落地页，如剪辑页、拍摄页进行弹窗授权 正确上报用户视频使用素材：尽量保证修改所影响的范围，梳理各个场景的逻辑，增补相应的字段即可；其中也发现了问题，当时是后台同学发现存在上报的字符串被截断了的case，后台同学排查发现数据入库存在字符串长度限制（6000），同时端上也找到了上报的素材存在超长的case（例如在剪辑工具下使用了各种素材），意味着端上上报需要按照产品定义的优先级去尽量上报素材，并且限制每种类型的素材的上报数量限制；","date":"2023-03-12","objectID":"/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87-2023/:2:7","tags":["面试","Android","JAVA"],"title":"面试准备-2023","uri":"/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87-2023/"},{"categories":["技术"],"content":"面试题目 聊一下 Binder 的实现，如果让你 hook binder 拿到 binder 里面传输的数据你会怎么做 Android知识体系之Binder Hook MVC \u0026 MVP \u0026 MVVM，这么多设计模式你都用过，你觉得哪个更好，他们之前主要的差别是什么 Android架构学习之路三-MVX 聊一下 coroutines 的底层实现 你做过什么性能优化？ 开放性问题 你对自己有什么规划 就是希望自己能够继续成长吧，因为目前自我感觉距离高级工程师还有不少差距，项目的经验、接触的东西、以及深度还不够 为了达成这样一个目标，就是保持长期进行技术学习的一个习惯，不限于新的技术，比如说compose、kmm，可以趁着新技术的发展深入地学习一波，随着技术的发展，自己也能积累到不错的东西，例如一些通用的知识或者解决方案； 其次还包括一些经典框架的源码分析、基础架构、框架层面的架构能力； 然后是持续学习基础方面的知识，比如操作系统、Linux的一些知识还需要不断地修炼； 最后就是需要保持blog的输出和沉淀 最近在关注什么新的技术？最近关注的是nowinandroid这个项目、compose、kmm 有没有做过一下性能优化的例子，展开讲讲 有做过，只是做的东西比较小；比如说我们这边有个需求是需要在请求头里面携带上我们所使用的底层渲染库的版本以及所支持的能力的版本号，以便后台可以下发合适的素材，light、pag，一开始是直接使用的这些库提供的native接口去获取，如果这些库so没有load，则会先去load，虽说这样一看是没什么问题；但是后面发现会影响到App的冷启动，导致耗时会增加100ms，后续做的一个优化是将这些库的版本号写在gralde文件里面，然后可以通过BuildConfig去读取，这样读取就不会存在什么耗时了；虽然说这样存在弊端，就是人为去更新这些版本可能会存在问题，比如说忘记更新了或者更新错了，所以又补充了一个先从网络获取配置的逻辑，如果能正常读取到则用后台配置的，否则用本地的，这样就为了防止本地配置错误加了一个兜底的逻辑 如果加入我们，你觉得会给团队带来什么？我想知道如果我加入你们，会让我承担一个怎么样的角色或者说我会负责哪方面的东西？虽然说项目的方向对我来说是一个比较新的东西，但是我想以我的学习能力与热情，我会随着项目快速成长起来，能够承担更重要的角色，同时会保证项目的交付质量以及代码的质量 （首先先明确自己需要在团队内承担一个怎么样的角色，是需要反问的。其次再表明自己的决心，以及对工作的热爱，无非就是保证需求、项目交付的质量，虽然说对自己可能是一个比较新的东西，但也要表明要把它吃透的决心，而且希望自己能够快速成长起来，能够承担更重要的角色） ","date":"2023-03-12","objectID":"/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87-2023/:3:0","tags":["面试","Android","JAVA"],"title":"面试准备-2023","uri":"/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87-2023/"},{"categories":["生活"],"content":" 享受生活，热爱生活，发现生活中的美 ","date":"2023-02-09","objectID":"/life-000-%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/:0:0","tags":["思考","生活"],"title":"Life 000 献给阿尔吉侬的花束","uri":"/life-000-%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/"},{"categories":["生活"],"content":"计划 2023年过去了2个多月，才终于着手制定今年的年度计划，实属不易，不是没时间去做这么一回事，更多的可能是不愿去面对这种事情，可能和前段时间的心态有关联，而且对于大多数人来说当然是没有勇气去面对可能发生变化的人生，更何况是针对于此做一个计划，更舒适的还是在自己能够把握的地方度过一年又一年。 无非关于更好地生活、提升自己、阅读、运动这几个方面着手。 以前怎么也想不到自己的肚子也会变得如此多赘肉，可现实如此狠狠地给了我一巴掌，不得不承认这赘肉的力量属实很强，去年一顿蹦蹦跳跳体重减少了十斤左右也无法明显撼动其地位，不得让我好奇这甩掉的肉是哪里的？ ","date":"2023-02-09","objectID":"/life-000-%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/:1:0","tags":["思考","生活"],"title":"Life 000 献给阿尔吉侬的花束","uri":"/life-000-%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/"},{"categories":["生活"],"content":"旅游 终于赶在二月底的周末开启了今年的第一个旅游计划 ","date":"2023-02-09","objectID":"/life-000-%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/:2:0","tags":["思考","生活"],"title":"Life 000 献给阿尔吉侬的花束","uri":"/life-000-%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/"},{"categories":["生活"],"content":"大鹏所城 逛街，古城中主干道发展着一些小商铺 ","date":"2023-02-09","objectID":"/life-000-%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/:2:1","tags":["思考","生活"],"title":"Life 000 献给阿尔吉侬的花束","uri":"/life-000-%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/"},{"categories":["生活"],"content":"较场尾 海边几百米的沙滩 ","date":"2023-02-09","objectID":"/life-000-%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/:2:2","tags":["思考","生活"],"title":"Life 000 献给阿尔吉侬的花束","uri":"/life-000-%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/"},{"categories":["生活"],"content":"杨梅坑 第二天简单地吃了一顿早餐，十二点多老板娘就来敲门告知要退房了，本计划着下午花一个半小时到杨梅坑再吃中饭，可事与愿违，路上所花的时间已经超出我的预期 ","date":"2023-02-09","objectID":"/life-000-%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/:2:3","tags":["思考","生活"],"title":"Life 000 献给阿尔吉侬的花束","uri":"/life-000-%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/"},{"categories":["生活"],"content":"鹿嘴山庄 这属于杨梅坑的旅游景点，到达杨梅坑以后还要坐十五分钟左右的观光车，阳光甚好的春天，坐着粉红色的观光车，音响刚好播放着周杰伦的歌，坐在司机旁边，小车满载着游客沿着海岸线，一片片浪花在眼前闪过，往远处眺望则是海天充斥着眼眶，海和天空还是存在界限的，并不是所谓的海天一色。 这是个旅游业发展下的千篇一律的山庄，商业化下的制度恶心着一批又一批的游客，亘古不变的是那万变的海，那密密麻麻的人群对着所谓的地标打着无聊的卡，却不知杨梅坑至鹿嘴山庄的那几公里才是美景的所在。 ","date":"2023-02-09","objectID":"/life-000-%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/:2:4","tags":["思考","生活"],"title":"Life 000 献给阿尔吉侬的花束","uri":"/life-000-%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/"},{"categories":["生活"],"content":"阅读 ","date":"2023-02-09","objectID":"/life-000-%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/:3:0","tags":["思考","生活"],"title":"Life 000 献给阿尔吉侬的花束","uri":"/life-000-%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/"},{"categories":["生活"],"content":"献给阿尔吉侬的花束 献给阿尔吉侬的花束 9.1 声称能改造智能的科学实验在白老鼠阿尔吉侬身上获得了突破性的进展，下一步急需进行人体实验。个性和善、学习态度积极的心智障碍者查理·高登成为最佳人选。手术成功后，查理的智商从68跃升为185，然而那些从未有过的情绪和记忆也逐渐浮现。 这是一本挺有意思的书，讲的是一个智商68的人，经过手术达到了智商180，书里说的就是这个变化的过程以及变化之后所发生的一些事，曾经是一个笨蛋，被身边的人各种欺负却不知情，反而以为大家都是他的朋友，感觉很开心，直到到变聪明以后才知道事情残酷的真相 从开始有了情绪，会思考，会学习，到质疑权威… 笨蛋的时候，不知道别人是在作弄他，对待世界都是友好的，以为大家作弄他后的笑是大家对他的喜欢，到开始变聪明的时候，意识到了之前大家的所作所为，也一开始对身边的人充满了警惕 智商飞速提升的同时，然而情感并不完备，但是人生的经历却是很必要的，一开始看起来有点揠苗助长 想到最近看的《一人之下第五季 EP6》中碧游村中村长的修身炉，能够帮助普通人变成异人，球儿说了一段关于此事的看法 但是如果能够让智障变聪明，变成正常人，这种研究还是有意义的，同时也要注重情感方面的呵护 ","date":"2023-02-09","objectID":"/life-000-%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/:3:1","tags":["思考","生活"],"title":"Life 000 献给阿尔吉侬的花束","uri":"/life-000-%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/"},{"categories":["生活"],"content":"命运 命运 9 编辑推荐： 继畅销四百万册的非虚构作品《皮囊》之后，睽违八年，蔡崇达携长篇小说新作《命运》重磅归来！ 献给想要改变命运的你：“只要活下去，命运终是赢不了我们的。” ◇李敬泽作序，刘德华、韩寒、白岩松、程永新联袂推荐——直面人生本质命题，直抵人心的惊喜之作。 ◇大海追问生 在海边的人，一如命运追问我们：你的人生，是要去冒险“讨大海”，还是就安逸“讨小海”？你想要怎么活？你找到要成为的自己了吗？ ◇书写一个人的无常，看见所有人的命运：以《皮囊》核心人物阿太跌宕百年的传奇人生为主线，那些与命运咬牙切齿的搏斗，那些沉默寡言的爱与矢志不忘的告别。一个人的心灵成长史，也是我们每个人命运的回声。 ◇穷尽一个女人为改写命运所能做的全部努力，召回一个中国人内心失落百年的精神故土。她对命运不服过，不信过，与之搏斗；她的人生得到过、失去过，始终“我命由我”；她生下了自己的命运，这人间她来过，她永不再回。 ◇有些人是慢慢懂得爱为何物的，而有些人是一瞬间才懂得爱的。找到爱之前，要先找到自己：“想过不同人生的人，生活过不到一起去。” ◇如何面对死亡，就如何面对生活，如何面对时间。知道了如何死去，才知道如何活着。“好的死亡就像熟透了自然从树上落下来的果子，死的时候，世间和自己都没有伤口。” ◇我们都是听着别人的故事活下来的，看向故事里我们的历史与来处，就能望见我们的选择与未来：“人的灵魂就是这故事长出来的。人以一身又一身的皮囊，装这一个又一个故事。” ◇《皮囊》是命运刺破人生的苦痛，《命运》是皮囊孤勇一搏的选择。《命运》超越了《皮囊》，并向文学的本质命题深深一跃。 ◇典藏精装，小巧开本搭配质感双封，以轻盈之姿传递厚重命题。 ◇众生艰辛，多少人如此艰难而又必须沉默地蹚过一个又一个日子；命运如海，人心有了羁绊，才有了着落。一本让你痛哭、给你力量的心灵故事，读罢才发现，那眼泪竟是为自己而流。 内容简介 ： 《命运》是蔡崇达继《皮囊》之后，时隔八年潜心创作的长篇小说。 《皮囊》里的那句“皮囊是拿来用的，不是拿来伺候的。”正是出自《命运》的主人公，阿太之口。《命运》以九十九岁的她一生的故事为主线，串联起福建闽南沿海小镇几代人的人生故事、命运选择与时代浮沉。 全书以阿太的五段回忆，切入时间长河中人们不得不直面的一个个本质命题： 层层浪：你们就此没有过去，只有将来—— 当原本稳固的活法被打碎，给人庇护的传统秩序被割裂，陷入巨大无常中的一个个单薄的人，要如何活下去？内心的安宁要放置在何处？ 海上土：灵感是浮游在海上的土—— 羁绊和意义是人心灵的压舱石，当生活的浪头打过来时不至于被掀翻。阿太生命中那些失去了压舱石的人，被命运一个个顺水推舟地带走了。而此时的她，尚只有十六岁。 田里花：想结果的花，都早早低头—— 背负着“无子无孙无儿送终”的命运预言，她成了亲，有了婆家与丈夫，抱养了孩子。但见过命运的人会明白，命运的激流从未停止，人在其中并不知晓，哪一次告别，就是诀别。 厕中佛：腐烂之地，神明之所—— 时代的巨浪之下，如何守住内心的清明与信仰？这世上容易的活法，就是为别人而活。而如果那人恰好也是为你而活，那么日子再苦，也过得像地瓜一样甜了。 天顶孔：要么入土为安，要么向天开枪—— 阿太的故事走到了落幕时分，死亡成了她亲密的旧友。她终是生下了自己的命运，成为自己命运的母亲。这人间她来过，她永不再回。 媒体评论： 这是一部关于底部的书。 在个人的生命里、在我们的共同生活中，那些在底部暗自运行、从根本上支撑着我们的信念；那些让我们在有限的选择和浩大的无常中站立着、向前走去的力量；那些让我们相信生活和生命自有意义的、内心的神灵。 树意识不到它的根，树枝和树叶欢快地迎向天空，但树的生长、伸展其实来自于它的根。泥土中的力量引领我们向上。 所以，《命运》终是关于“根”的，耐心的、千回百转的讲述，是一次远行——向着我们的根、向着我们精神的故乡和远方。 ——李敬泽 崇达在英语世界的亮相是如此炫目，他所描绘的那不断变化的中国肖像引人入胜。他的作品闪耀着一位优秀小说作者的聪明才智。 ——美国《出版人周刊》 感人至深……蔡崇达对至亲之人的深深敬意与爱意，在他笔下那些动人而凄美的形象中熠熠生辉。 ——美国《书目杂志》 蔡崇达的作品是根据当地的民间传统写成的，一部不折不扣的现代小说。它不仅在类型上相当罕见，在翻译著作中，尤其显得独特。它帮助读者发现大多数人看不到的生活，这种共情的建立能够跨越国界，跨越文化，跨越语言。 ——迪伦·金（《皮囊》英文版译者） 一本直面死亡的书，但是看下来感觉叙述有点突兀，并没有把主要的矛盾点写出来就开始描写人的反应，描写对苦难的不解，就开始长篇大论的控诉，到底苦难在哪里呢？我没理解得到。为什么怎么活每一代人都要纠结着这个，难道那时候的人大多数都是这样的吗？ 当时一本看完的时候，并没有太过于思考，今天又回顾了下这本书，感觉名不副实，豆瓣9.0的评分的确有点夸张，并没有看上去那么好 绝对是过度营销的一本书 虽然说没有这篇点评那么夸张，但是有一段的想法与我类似，俗称\"嘴替\" ","date":"2023-02-09","objectID":"/life-000-%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/:3:2","tags":["思考","生活"],"title":"Life 000 献给阿尔吉侬的花束","uri":"/life-000-%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/"},{"categories":["生活"],"content":"值得一读 大厂西游记 【尊享版】那两年沉淀的时间增值心法-JsonChao 孔雨晴课题组 NeurIPS 2022 入选论文解读：当大多数人错了怎么办？ 很令人耳目一新的一个研究，根据自己的答案以及猜测别人的答案的数据能够构建一个答案预测模型，然后又根据预测模型去预测出正确答案，我们可以看到\"聪明\"的人能够预测大众的答案 ","date":"2023-02-09","objectID":"/life-000-%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/:4:0","tags":["思考","生活"],"title":"Life 000 献给阿尔吉侬的花束","uri":"/life-000-%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/"},{"categories":["生活"],"content":"回忆 想起来一件事 之前有个亲戚老是拿我去激励他屋里的孩子 读书要加系 然后我就说了一嘴 我又不喜欢读书 然后那个亲戚瞬间就呆了 仿佛受到了不小的冲击 然后呆滞地重复了我的话 不喜欢读书… ","date":"2023-02-09","objectID":"/life-000-%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/:5:0","tags":["思考","生活"],"title":"Life 000 献给阿尔吉侬的花束","uri":"/life-000-%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/"},{"categories":["随笔"],"content":"大致描述下最近的状态 孤独、陌生、恐婚、忧愁、死亡 婚姻，不想结婚，不想面对那么多烦恼人的事，只想做自己，让自己开心幸福就好。甚至想着这辈子不结婚也是可以的了……伴侣也是让人感到陌生，太表面太表面的东西 关于死亡的梦，这种梦还能做得很舒适，而且还在享受这个梦，体验身心的死亡，精神世界逐渐泯灭消亡，想着死了也一了百了，没有那么多的烦恼与压力，很轻松愉快。听起来是很怪的，我不知道我现在处于一种什么样的状况，是正常的还是不正常的呢？ 要上班了，心情不好，总是心不在焉的，很忧愁，就算妹妹给我放喜剧电影却也根本笑不起来，只是很勉强，最后也不得不向其坦白。但是愁的点在哪我那一时也不明了，要上班是不痛快，但症结不在于此，后来女朋友的妈妈一句话点明了我，“可能还有事没搞完”，或许一些人与人之间的感情还是没能进一步推进，有的需要完善，有的需要缝缝补补，有的需要多说几句，有的需要少说几句，有的需要碎碎念一下 我想我是病了吧……各种复杂的负面情绪 ","date":"2023-01-29","objectID":"/%E5%85%B3%E4%BA%8E%E6%81%90%E5%A9%9A%E6%AD%BB%E4%BA%A1%E5%AD%A4%E7%8B%AC/:0:0","tags":["情感"],"title":"关于恐婚、死亡、孤独","uri":"/%E5%85%B3%E4%BA%8E%E6%81%90%E5%A9%9A%E6%AD%BB%E4%BA%A1%E5%AD%A4%E7%8B%AC/"},{"categories":["学习"],"content":" kotlin协程 《深入理解kotlin协程》 简单协程框架demo flow blog撰写 深入理解flow 深入理解redux框架 KSP KMM 了解KMM Compose 简单入门 基础 操作系统导论 数据结构与算法 ","date":"2022-11-26","objectID":"/study_roadmap/:0:0","tags":["学习","技术"],"title":"Study Roadmap","uri":"/study_roadmap/"},{"categories":["生活周刊"],"content":" 享受生活，热爱生活，发现生活中的美 ","date":"2022-11-19","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-010-%E7%9F%A5%E6%9B%B4%E9%B8%9F/:0:0","tags":["思考","生活","阅读"],"title":"生活周刊 010 知更鸟","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-010-%E7%9F%A5%E6%9B%B4%E9%B8%9F/"},{"categories":["生活周刊"],"content":"阅读 杀死一只知更鸟 9.2 成长总是个让人烦恼的命题。成长有时会很缓慢，如小溪般唱着叮咚的歌曲趟过，有时却如此突如其来，如暴雨般劈头盖脸……三个孩子因为小镇上的几桩冤案经历了猝不及防的成长——痛苦与迷惑，悲伤与愤怒，也有温情与感动。这是爱与真知的成长经典。 《杀死一只知更鸟》获1961年普利策奖。 美国图书馆借阅率最高的书，英国青少年最喜爱的小说之一。 美国中学推荐课外读物。 由小说改编的电影获第25届奥斯卡三项大奖。 美国电影协会评选的“100名银幕英雄与恶人”中，派克主演的芬奇律师名列英雄第一位。 作为史上最受喜爱的小说之一，《杀死一只知更鸟》已获得显赫声誉。它赢得过普利策奖，被翻译成四十多种语言，在世界范围内售出超过三千万册，并曾被拍成，备受欢迎的电影。 ——哈珀•柯林斯出版集团 斯塔尔六月对北卡罗来纳州律师协会发表演说时，自比为《杀死一只知更鸟》中勇敢的南方白人律师阿蒂克斯•芬奇。斯塔尔凭着他的道德优越感，不把规则、秩序和正直放在眼里，这样一个人居然自比为芬奇，实在令我和比尔难以忍受。 ——希拉里•克林顿 年轻时看过《梅岗城故事》（即《杀死一只知更鸟》），对片中法律人为弱势者争取权益奋斗，为恶法非法或恶法亦法辩论的故事感到澎湃不已，更加确定要成为法律人的心愿。 ——许宗力（台大法学院院长） 本周读了《杀死一只知更鸟》，很早就知道了这本书，但是不看简介单从书名是无法知道这本书的主要内容是什么 还是打开了这本书并且逐渐被内容所俘获，不愧是豆瓣top17，这是一本关于成长和家庭教育的书，目前看是主要依据主人公的童年故事中铺垫开来， 从小孩子的视角，让我看到了同一件事，在小孩和大人看来或许完全不是一个理解层次，这就很容易产生分歧，更多的是需要家长的倾听与理解，以及作为家长的引导也是非常重要的，一定要有耐心能够听完孩子的想法 其中印象深刻的一个片段：主人公因为其他小孩辱骂阿迪克斯，忍无可忍揍了那个小孩一顿而在叔叔不了解其中缘由的前提下受到了一顿责骂，事后回家，主人公和叔叔的表现也很不错，主人公愿意主动表达你误解了并询问是否要了解其缘由，叔叔也表示愿意倾听，而不是一上来就开始否定之类的操作。因为在阿迪克斯的教育背景下，在以往兄妹两人争吵，阿迪克斯是愿意听听各方的论述，了解其中缘由。 童年那死去的记忆开始攻击我，无比熟悉的成长经历，受到的反馈却是截然相反，不得不说主人公的成长很幸福。 深有体会的是，书中描写的那些内容，可以和自己成长过程中经历过的一些事联系起来，那些无比熟悉的场景。一些事情从父母那里得到的反馈却与这本书里面的主人公受到的反馈截然相反。难怪这本书如此好评，关于成长和教育的那些事，对于大多数人来说并不会感到陌生，更多的是颇有感触。 这其中让人联想到的是中国式的家长，也许是刻板印象，是不会愿意承认自己错误的，更甚一点连自己有错都意识不到，当然好一点的可能是能意识到自己的错误，但是绝不会低头承认，为了维护那早已不值一提的威严，但是自己本身不会意识到，还在一个劲地倔强 除非你穿上一个人的鞋子，像他那样走来走去，否则你永远无法真正了解一个人。 她死得无怨无悔，不欠任何人，也不依赖任何东西。她是我见过最勇敢的人。 已然快要忘记好久好久以前的夏天是什么滋味了，风扇整天地嗡嗡转着，却丝毫吹不走带着温度的风。那是一个南方普通得不再普通的夏天，七八月的酷暑，整个暑期都蜗居在家，电脑外放着流行歌曲，充斥着整个房间，甚至从二楼的房间沿着天井冲进了一楼的客厅。我想在客厅里看电视的爷爷也是不堪其扰的，在我们家里，对于老年人来说，过大的声音都是一种难以忍受的噪音，就如同烟雾报警器一样，是会一触即发的。但他似乎很少说我，他通常不愿意对我说教而是对我特别包容，想起曾经过于放肆的画面，回忆起那独有的包容，至今也是倍感羞愧。 当然小时候的夏天也常常在外面玩，虽说没能感受乡下的那种快乐，那种稻田一躺，仰望整片蓝天白云 ","date":"2022-11-19","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-010-%E7%9F%A5%E6%9B%B4%E9%B8%9F/:1:0","tags":["思考","生活","阅读"],"title":"生活周刊 010 知更鸟","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-010-%E7%9F%A5%E6%9B%B4%E9%B8%9F/"},{"categories":["生活周刊"],"content":" 享受生活，热爱生活，发现生活中的美 ","date":"2022-10-06","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-009-%E8%9B%A4%E8%9F%86%E5%85%88%E7%94%9F/:0:0","tags":["思考","生活","阅读","电影"],"title":"生活周刊 009 蛤蟆先生","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-009-%E8%9B%A4%E8%9F%86%E5%85%88%E7%94%9F/"},{"categories":["生活周刊"],"content":"生活 ","date":"2022-10-06","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-009-%E8%9B%A4%E8%9F%86%E5%85%88%E7%94%9F/:1:0","tags":["思考","生活","阅读","电影"],"title":"生活周刊 009 蛤蟆先生","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-009-%E8%9B%A4%E8%9F%86%E5%85%88%E7%94%9F/"},{"categories":["生活周刊"],"content":"工作 很无语的一段国庆假期，为了一个其实感觉起来并没有什么的项目，还得被安排过来加班，确是增加了怨气，自己原有的计划也被打乱。 虽说口中说着，后面可以再请假，连个周末也还是有五天的，可以回家也可以去旅游，但是却把自己和身边的人的时间又错乱开了，还是会丢失一些难以换回的东西。 ","date":"2022-10-06","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-009-%E8%9B%A4%E8%9F%86%E5%85%88%E7%94%9F/:1:1","tags":["思考","生活","阅读","电影"],"title":"生活周刊 009 蛤蟆先生","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-009-%E8%9B%A4%E8%9F%86%E5%85%88%E7%94%9F/"},{"categories":["生活周刊"],"content":"吃坏肚子 国庆加完班的后面假期的一天晚上去附近吃了杀猪粉，吃的时候和泽敏还一个劲夸，吃完倒是喷射了一晚上，每隔半个小时或者一刻钟肚子就来事，本以为睡着就没事了，可谁知睡得好好的还是能被肚子的不舒服弄醒过来，直奔厕所。 中途也吃了药，不知道是药效慢还就是不顶用，一晚上还是跑了三四次厕所，睡眠断断续续的，一头睡到了第二天十一点。 第二天打电话给商家，起初老板开口就否认，后续叫了一个员工与我沟通，他们也不知道如何处理这件事，甚至来问我要怎么样，其实我也感觉比较无语，老板还让我把药盒拍给他。最后沟通下来赔偿了我那顿饭的钱以及医药费，一共131人民币。 ","date":"2022-10-06","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-009-%E8%9B%A4%E8%9F%86%E5%85%88%E7%94%9F/:1:2","tags":["思考","生活","阅读","电影"],"title":"生活周刊 009 蛤蟆先生","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-009-%E8%9B%A4%E8%9F%86%E5%85%88%E7%94%9F/"},{"categories":["生活周刊"],"content":"视频 ","date":"2022-10-06","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-009-%E8%9B%A4%E8%9F%86%E5%85%88%E7%94%9F/:2:0","tags":["思考","生活","阅读","电影"],"title":"生活周刊 009 蛤蟆先生","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-009-%E8%9B%A4%E8%9F%86%E5%85%88%E7%94%9F/"},{"categories":["生活周刊"],"content":"远山淡影 关键词：治愈、鸡皮疙瘩都起来了、唯美、远山淡影、青海茶卡（盐池）盐湖 、想去 ","date":"2022-10-06","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-009-%E8%9B%A4%E8%9F%86%E5%85%88%E7%94%9F/:2:1","tags":["思考","生活","阅读","电影"],"title":"生活周刊 009 蛤蟆先生","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-009-%E8%9B%A4%E8%9F%86%E5%85%88%E7%94%9F/"},{"categories":["生活周刊"],"content":"阅读 ","date":"2022-10-06","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-009-%E8%9B%A4%E8%9F%86%E5%85%88%E7%94%9F/:3:0","tags":["思考","生活","阅读","电影"],"title":"生活周刊 009 蛤蟆先生","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-009-%E8%9B%A4%E8%9F%86%E5%85%88%E7%94%9F/"},{"categories":["生活周刊"],"content":"跑步 这周读完了《当我谈跑步时，我谈些什么》，原来这本书的书名也是作者借鉴一个他所喜欢的作家的，如果我不知道，后面我写了一个文章的标题，或许我也会说我也是借鉴我喜欢的一个作家的文章标题。 本书的内容从书名就可以很清楚知道是说些什么的，其中着重强调一个持之以恒的力量以及过程中如何克服的一些困难，如同一个长者一般和与读者分享跑步相关的种种经历、感受以及所付出的行动。 国庆加班的一天晚上，领导请吃烧烤，同行的同事聊到了跑步相关的话题，一聊才得知他已经坚持跑步十年了。 平时看这位同事在微信的运动步数榜单常居首位，身体体格看起来也是比较壮，其实一问才知道肚子上面也是很多赘肉，其实他的目的也不是为了减肥，跑了十年，是开始享受跑步的过程以及对身体的好处。 他说他非常享受跑步过程中思想放飞的感觉，可以很深入地去想去思考一些事情，其实这个大家也是很容易get到的，就算不跑步的人，平时洗澡的时候或多或少也有过类似的状态，在即刻App上可以看到有一个叫做浴室沉思的话题。 其实也就是之前看到的一种叫做心流的概念。 ","date":"2022-10-06","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-009-%E8%9B%A4%E8%9F%86%E5%85%88%E7%94%9F/:3:1","tags":["思考","生活","阅读","电影"],"title":"生活周刊 009 蛤蟆先生","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-009-%E8%9B%A4%E8%9F%86%E5%85%88%E7%94%9F/"},{"categories":["生活周刊"],"content":"蛤蟆先生 这周也读完了《蛤蟆先生去看心理医生》，真是一本好书，虽说自己不至于像蛤蟆先生那样处于一个极度抑郁的状态，但看了这本书还是能有新的感触以及新的认识。 其一书中心理医生对蛤蟆先生一直是处于一个引导者的角色，并不是简单地给出一个确切的回答或者说一些听起来很睿智但是却又不切实际的话，而是一步一步地引导这蛤蟆先生去探寻自己的内心，如果后续我处于这样一个角色的时候，我希望也能做到心理医生那样去引导别人。 其二就是\"我好，你也好\"的概念。人在这个社会中生存，无法避免会与其他人的产生联系，不免产生比较， 下面这句杨绛先生的话在书友的想法中看到了好几次了，找出来了附上。 无论人生上到哪一层台阶，阶下有人在仰望你，阶上亦有人在俯视你，你抬头自卑，低头自得，唯有平视，才能看见真实的自己。 —— 杨绛 这句话也很不错，人善被人欺，还是保持自己的初心的同时带有一丝锋芒，也能令某些人望而却步。 你有不伤别人的教养，却缺少一种不被人伤害的气场，若没有人护你周全，就请以后善良中带点锋芒，为自己保驾护航。你要知道，在这个世界，你若好到毫无保留，对方就坏到肆无忌惮！—— 杨绛 这句话也很经典，《山月记》还没读完，但印象很深刻，也在书友的想法中看到了，也一同贴一下。 我深怕自己本非美玉，故而不敢加以辛苦琢磨，却又半信自己是块美玉，故又不肯庸庸碌碌与瓦砾为伍。于是我渐渐地脱离凡尘，疏远世人，结果便是一任愤懑与羞恨日益助长内心那怯弱的自尊心。——《山月记》 书中也有关于高情商的阐述，不再是我以往认为的那样，只是很会为人处世，其实还有对于个人情绪的把控。 概括而言，他们都有强大的自我意识，了解自己的情感。他们能管理情绪，能从悲伤和不幸中重新振作。但也许最重要的是，他们能控制冲动，也懂得延迟满足，从而避免轻率的决定和不妥的行为。 —— 《蛤蟆先生去看心理医生》 蛤蟆先生探寻的过程中也是极其痛苦的，但还是得勇敢地迈出那一步才能寻找到自己的内心。 同时也很庆幸自己没有受到这样的影响，很多童年的事情都已经忘却。 ","date":"2022-10-06","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-009-%E8%9B%A4%E8%9F%86%E5%85%88%E7%94%9F/:3:2","tags":["思考","生活","阅读","电影"],"title":"生活周刊 009 蛤蟆先生","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-009-%E8%9B%A4%E8%9F%86%E5%85%88%E7%94%9F/"},{"categories":["技术"],"content":" 翻译自repeatOnLifecycle API design story，使用Google or DeepL翻译以及人工校对，后来发现Google在各大平台已经发布了中文版本，不过感受到了机翻的意思表达不那么明确，官方的中文版还OK的，正好也能对比一下，提高下英文水准。 在这篇博文中，你将了解Lifecycle.repeatOnLifecycle API背后的设计决策，以及为什么我们删除了2.4.0版lifecycle-runtime-ktx库的第一个alpha版本中添加的一些辅助函数。 一路走来，你会看到某些协程API在某些情况下的使用是多么危险，命名是多么困难，以及为什么我们决定在库中只保留低级别的suspend API。 另外，你会意识到所有的API决定都需要在复杂性、可读性和API的易错性方面做出一些权衡。 特别感谢Adam Powell、Wojtek Kaliciński、Ian Lake和Yigit Boyar提供的反馈和讨论这些API的形态。 注意：如果您正在寻找repeatOnLifecycle指南，请查看博文：从AndroidUI收集流的更安全的方法。 ","date":"2022-09-17","objectID":"/repeatonlifecycle-api%E8%AE%BE%E8%AE%A1%E6%95%85%E4%BA%8B/:0:0","tags":["kotlin","flow","coroutine","翻译"],"title":"repeatOnLifecycle API设计故事","uri":"/repeatonlifecycle-api%E8%AE%BE%E8%AE%A1%E6%95%85%E4%BA%8B/"},{"categories":["技术"],"content":"repeatOnLifecycle Lifecycle.repeatOnLifecycle API的诞生主要是为了让Android中UI层的Flow收集更加安全。它的可重启行为考虑到了UI的生命周期，使得它成为完美的默认API，只在屏幕上的UI可见时处理逻辑。 注意：LifecycleOwner.repeatOnLifecycle也是可用的。它将功能委托给它的Lifecycle。有了这个，任何已经属于LifecycleOwner范围的代码都可以省略显式接收器。 repeatOnLifecycle是一个挂起函数。repeatOnLifecycle会暂停调用的协程，然后在给定的生命周期达到目标状态或更高时，在一个新的协程中运行一个你作为参数传递的给定的代码块。如果生命周期的状态低于目标值，为该块启动的协程就会被取消。最后，repeatOnLifecycle函数本身不会恢复调用的协程，直到生命周期处于DESTROYED。 让我们看看这个API的作用。如果你读过我之前的博文：从AndroidUI收集流的更安全的方法，这些对你来说应该都不是惊喜。 class LocationActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) // Create a new coroutine from the lifecycleScope // since repeatOnLifecycle is a suspend function lifecycleScope.launch { // Suspend the coroutine until the lifecycle is DESTROYED. // repeatOnLifecycle launches the block in a new coroutine every time the // lifecycle is in the STARTED state (or above) and cancels it when it's STOPPED. repeatOnLifecycle(Lifecycle.State.STARTED) { // Safely collect from locations when the lifecycle is STARTED // and stop collecting when the lifecycle is STOPPED someLocationProvider.locations.collect { // New location! Update the map } } // Note: at this point, the lifecycle is DESTROYED! } } } 注意：如果你对repeatOnLifecycle是如何实现的感兴趣，这里有一个源代码链接。 ","date":"2022-09-17","objectID":"/repeatonlifecycle-api%E8%AE%BE%E8%AE%A1%E6%95%85%E4%BA%8B/:1:0","tags":["kotlin","flow","coroutine","翻译"],"title":"repeatOnLifecycle API设计故事","uri":"/repeatonlifecycle-api%E8%AE%BE%E8%AE%A1%E6%95%85%E4%BA%8B/"},{"categories":["技术"],"content":"为什么它是一个挂起函数 由于可以保留调用上下文，所以挂起函数是执行重启行为的最佳选择。它在调用协程时遵从Job树。由于repeatOnLifecycle的内部实现是使用suspendCancellableCoroutine，它可以和取消操作共同运作：取消发起调用的协程的同时也会取消repeatOnLifecycle和它重启执行的block。 另外，我们还可以在repeatOnLifecycle之上添加更多的API，比如Flow.flowWithLifecycle流操作符。更重要的是，如果你的项目需要它还允许你在这个API之上创建辅助函数。这就是我们试图用LifecycleOwner.addRepeatingJobAPI做的事情，我们在lifecycle-runtime-ktx:2.4.0-alpha01中添加了这个API，事实上，在alpha02中删除了它。 ","date":"2022-09-17","objectID":"/repeatonlifecycle-api%E8%AE%BE%E8%AE%A1%E6%95%85%E4%BA%8B/:2:0","tags":["kotlin","flow","coroutine","翻译"],"title":"repeatOnLifecycle API设计故事","uri":"/repeatonlifecycle-api%E8%AE%BE%E8%AE%A1%E6%95%85%E4%BA%8B/"},{"categories":["技术"],"content":"移除addRepeatingJob API LifecycleOwner.addRepeatingJobAPI在库的第一个alpha版本中添加了这个功能，现在已经从库中移除，它是这样实现的。 /* Copyright 2022 Google LLC. SPDX-License-Identifier: Apache-2.0 */ public fun LifecycleOwner.addRepeatingJob( state: Lifecycle.State, coroutineContext: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -\u003e Unit ): Job = lifecycleScope.launch(coroutineContext) { repeatOnLifecycle(state, block) } 给定一个LifecycleOwner，你可以运行一个suspend块，每当它的生命周期进入和离开目标状态时就会重新启动。这个API使用LifecycleOwner的lifecycleScope来触发一个新的协程并在其中调用repeatOnLifecycle。 使用addRepeatingJobAPI，上面的代码会是这样的。 class LocationActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) lifecycleOwner.addRepeatingJob(Lifecycle.State.STARTED) { someLocationProvider.locations.collect { // New location! Update the map } } } } 乍一看，你可能认为这种代码更干净，需要的代码更少。然而，如果你不仔细注意的话，有一些隐藏的问题会让你自食其果： 尽管addRepeatingJob接受一个挂起代码块，但addRepeatingJob不是一个挂起函数。因此，你不应该在协程中调用它！！ 更少的代码？你只节省了一行代码，代价是拥有一个更容易出错的API。 第一点可能看起来很明显，但它总是让开发者上当。而且讽刺的是，实际上它是基于协程的一个最核心的概念：结构化并发。 addRepeatingJob不是一个挂起函数，因此，默认情况下不支持结构化并发（需要你注意的是你可以通过使用coroutineContext参数来手动使其支持）。由于block参数是一个挂起的lambda，你把这个API与协程联系起来，你可以很容易地写出这样的危险代码： class LocationActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) val job = lifecycleScope.launch { doSomeSuspendInitWork() // DANGEROUS! This API doesn't preserve the calling Context! // It won't get cancelled when the parent coroutine is cancelled! addRepeatingJob(Lifecycle.State.STARTED) { someLocationProvider.locations.collect { // New location! Update the map } } } // If something goes wrong, cancel the coroutine launched above try { /* ... */ } catch(t: Throwable) { job.cancel() } } } addRepeatingJob做的是协程的事情，没有什么能阻止我在协程中调用它，对吗？ 由于addRepeatingJob使用隐含在实现细节中的lifecycleScope创建新的协程来运行重复块，新的协程不遵从结构化的并发，也不保留调用协程的上下文。因此，当你调用job.cancel()时，将不会被取消。这可能会导致你的应用程序中出现非常不易察觉的bug，很难调试。 ","date":"2022-09-17","objectID":"/repeatonlifecycle-api%E8%AE%BE%E8%AE%A1%E6%95%85%E4%BA%8B/:3:0","tags":["kotlin","flow","coroutine","翻译"],"title":"repeatOnLifecycle API设计故事","uri":"/repeatonlifecycle-api%E8%AE%BE%E8%AE%A1%E6%95%85%E4%BA%8B/"},{"categories":["技术"],"content":"repeatOnLifecycle才是大赢家 addRepeatingJob里面使用的隐式CoroutineScope是使API在某些情况下使用不安全的原因。这是一个隐藏的问题，需要特别注意才能写出正确的代码。这一点是避免在库中的 repeatOnLifecycle之上增加包装API的反复论证。 suspend repeatOnLifecycleAPI的主要好处是，它默认与结构化并发合作，而addRepeatingJob没有。它还能帮助你思考你希望重复的任务在哪个范围内执行。这个API是自解释的并且符合开发者的预期： 和其他的挂起函数一样，它会将当前协程的执行中断，直到特定事件发生。比如这里是当生命周期被销毁时继续执行。 没有意外惊吓! 它可以和其他的协程代码一起使用，并且会按照您的预期工作。 repeatOnLifecycle周围的代码可读性高，对新手来说是有意义的：“首先，我启动一个跟随用户界面的生命周期的新协程。然后，我需要调用repeatOnLifecycle使得每当用户界面达到这个生命周期状态时启动执行这个block\"。 ","date":"2022-09-17","objectID":"/repeatonlifecycle-api%E8%AE%BE%E8%AE%A1%E6%95%85%E4%BA%8B/:4:0","tags":["kotlin","flow","coroutine","翻译"],"title":"repeatOnLifecycle API设计故事","uri":"/repeatonlifecycle-api%E8%AE%BE%E8%AE%A1%E6%95%85%E4%BA%8B/"},{"categories":["技术"],"content":"Flow.flowWithLifecycle Flow.flowWithLifecycle操作符（实现在此）是建立在repeatOnLifecycle之上的，只有当生命周期至少处于minActiveState时，才会发射上游流发送的项目。 class LocationActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) lifecycleScope.launch { someLocationProvider.locations .flowWithLifecycle(lifecycle, STARTED) .collect { // New location! Update the map } } } } 尽管这个API也有一些需要注意的问题，但我们还是决定保留它，因为它作为一个Flow操作符很有用。例如，它可以很容易地在Jetpack Compose中使用。尽管你可以通过使用produceState和repeatOnLifecycleAPI在Compose中实现同样的功能，但我们还是把这个API留在库中，作为更多响应式方法的替代。 正如KDoc中记录的那样，问题在于你添加flowWithLifecycle操作符的顺序很重要。在flowWithLifecycle操作符之前应用的操作符会在生命周期低于minActiveState时被取消。然而，在这之后应用的操作符不会被取消，即使没有项目被发送。 对于最好奇的人来说，这个API名称以Flow.flowOn(CoroutineContext)操作符为先例，因为Flow.flowWithLifecycle改变了用于收集上游流的CoroutineContext，而使下游不受影响。 ","date":"2022-09-17","objectID":"/repeatonlifecycle-api%E8%AE%BE%E8%AE%A1%E6%95%85%E4%BA%8B/:5:0","tags":["kotlin","flow","coroutine","翻译"],"title":"repeatOnLifecycle API设计故事","uri":"/repeatonlifecycle-api%E8%AE%BE%E8%AE%A1%E6%95%85%E4%BA%8B/"},{"categories":["技术"],"content":"我们应该增加一个额外的API吗？ 鉴于我们已经有了Lifecycle.repeatOnLifecycle、LifecycleOwner.repeatOnLifecycle和Flow.flowWithLifecycleAPIs。我们应该添加其他的API吗？ 新的API所带来的混乱与它们要解决的问题一样多。有多种方法来支持不同的用例，而最短的路径在很大程度上取决于周围的代码。可能对你的项目有用的东西，可能对其他人没有用。 这就是为什么我们不想为所有可能的情况提供API，可用的API越多，对开发者来说就越混乱，不知道什么时候该用什么。因此，我们做出决定，只保留最底层的API。有时，少即是多。 ","date":"2022-09-17","objectID":"/repeatonlifecycle-api%E8%AE%BE%E8%AE%A1%E6%95%85%E4%BA%8B/:6:0","tags":["kotlin","flow","coroutine","翻译"],"title":"repeatOnLifecycle API设计故事","uri":"/repeatonlifecycle-api%E8%AE%BE%E8%AE%A1%E6%95%85%E4%BA%8B/"},{"categories":["技术"],"content":"命名很重要（也很困难） 这不仅关系到我们支持哪些用例，而且还关系到如何命名它们! 名称应该符合开发者的预期，并遵循Kotlin协程的约定。比如说： 如果API使用隐式CoroutineScope（例如addRepeatingJob中隐式使用的lifecycleScope）启动一个新的协程，这必须反映在命名中，以避免错误的预期。在这种情况下，launch应该以某种方式包含在名称中。 collect是一个挂起函数。如果它不是一个挂起函数，就不要在API名称前加上collect。 注意：Compose的collectAsStateAPI是一个特殊情况，我们对它的名字没有意见。它不能与挂起函数混淆，因为在Compose中没有@Composable suspend fun这样的东西。 甚至LifecycleOwner.addRepeatingJob的API也是一个很难命名的问题。因为它用lifecycleScope创建了新的协程，所以它的前缀应该是launch。然而，我们想消除协程在后台使用的事实，而且由于它添加了一个新的生命周期观察者，这个名字与其他LifecycleOwnerAPIs的名字更一致。 这个名字也多少受到了现有LifecycleCoroutineScope.launchWhenX挂起API的影响。由于launchWhenStarted和repeatOnLifecycle(STARTED)提供了完全不同的功能（launchWhenStarted暂停了协程的执行，而repeatOnLifecycle取消并重新启动一个新的协程），如果新API的名称相似（例如，用launchWhenever来表示重启API），开发者可能会感到困惑，甚至在不知不觉中交替使用它们。 ","date":"2022-09-17","objectID":"/repeatonlifecycle-api%E8%AE%BE%E8%AE%A1%E6%95%85%E4%BA%8B/:7:0","tags":["kotlin","flow","coroutine","翻译"],"title":"repeatOnLifecycle API设计故事","uri":"/repeatonlifecycle-api%E8%AE%BE%E8%AE%A1%E6%95%85%E4%BA%8B/"},{"categories":["技术"],"content":"一行代码收集数据流 LiveData的observe函数具有生命周期感知，并且只在生命周期至少开始时处理排放。如果你要从LiveData迁移到Kotlin flow，你可能会认为有一个单行的替换是个好主意！你可以删除模板代码，而且迁移很直接。 因此，您可以像Ian Lake在他第一次开始使用repeatOnLifecycleAPI 时所做的那样。他创建了一个名为collectIn的便捷包装器，如下所示（为了遵循上面讨论的命名约定，我将其重命名为launchAndCollectIn）： /* Copyright 2022 Google LLC. SPDX-License-Identifier: Apache-2.0 */ inline fun \u003cT\u003e Flow\u003cT\u003e.launchAndCollectIn( owner: LifecycleOwner, minActiveState: Lifecycle.State = Lifecycle.State.STARTED, crossinline action: suspend CoroutineScope.(T) -\u003e Unit ) = owner.lifecycleScope.launch { owner.repeatOnLifecycle(minActiveState) { collect { action(it) } } } 这样你就可以像这样从用户界面调用它： class LocationActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) someLocationProvider.locations.launchAndCollectIn(this, STARTED) { // New location! Update the map } } } 这个包装器，虽然在这个例子中看起来很好很直接，但它存在着我们前面提到的关于LifecycleOwner.addRepeatingJob的同样问题。它不尊重调用的上下文，在其他循环程序中使用会很危险。此外，原来的名字真的很有误导性：collectIn并不是一个挂起的函数 如前所述，开发者希望collect函数能够挂起。也许，这个封装函数的更好的名字可以是Flow.launchAndCollectIn，以防止不良使用。 ","date":"2022-09-17","objectID":"/repeatonlifecycle-api%E8%AE%BE%E8%AE%A1%E6%95%85%E4%BA%8B/:8:0","tags":["kotlin","flow","coroutine","翻译"],"title":"repeatOnLifecycle API设计故事","uri":"/repeatonlifecycle-api%E8%AE%BE%E8%AE%A1%E6%95%85%E4%BA%8B/"},{"categories":["技术"],"content":"iosched的封装函数 repeatOnLifecycle必须与Fragments中的viewLifecycleOwner一起使用。在开源的 Google I/O 应用程序iosched项目中，团队决定创建一个封装函数，以避免在 Fragments 中滥用 API，其 API 名称非常明确：Fragment.launchAndRepeatWithViewLifecycle。 注意：实现与addRepeatingJobAPI非常相似。当使用alpha01版本的库编写此代码时，在alpha02中添加的repeatOnLifecycleAPI lint 检查没有到位。 ","date":"2022-09-17","objectID":"/repeatonlifecycle-api%E8%AE%BE%E8%AE%A1%E6%95%85%E4%BA%8B/:9:0","tags":["kotlin","flow","coroutine","翻译"],"title":"repeatOnLifecycle API设计故事","uri":"/repeatonlifecycle-api%E8%AE%BE%E8%AE%A1%E6%95%85%E4%BA%8B/"},{"categories":["技术"],"content":"你需要封装函数吗？ 如果你需要在repeatOnLifecycleAPI之上创建包装器，以适应你的应用程序中最常见的用例，请问你是否真的需要它，以及为什么需要它。如果你确信并想继续下去，我建议你选择一个非常明确的API名称，以明确定义包装器的行为，避免误用。同时，要非常清楚地记录它，让新来的人能够充分理解使用它的意义。 我希望这篇博文能让您了解团队在决定如何处理repeatOnLifecycleAPI以及我们可以在其之上添加的潜在帮助方法时的考虑因素。 再次感谢 Adam Powell、Wojtek Kaliciński、Ian Lake 和 Yigit Boyar 提供反馈并讨论这些 API 的形态。 ","date":"2022-09-17","objectID":"/repeatonlifecycle-api%E8%AE%BE%E8%AE%A1%E6%95%85%E4%BA%8B/:10:0","tags":["kotlin","flow","coroutine","翻译"],"title":"repeatOnLifecycle API设计故事","uri":"/repeatonlifecycle-api%E8%AE%BE%E8%AE%A1%E6%95%85%E4%BA%8B/"},{"categories":["技术"],"content":"基础 Flow是一种基于流的编程模型，可以理解在Kotlin协程中提供的响应式编程方式就是Flow Flow的定义很简单，表示它是一个可以被订阅收集的东西 public interface Flow\u003cout T\u003e { @InternalCoroutinesApi public suspend fun collect(collector: FlowCollector\u003cT\u003e) } 而其中的FlowCollector代表流的接收者，其中定义了发送数据的功能。 public interface FlowCollector\u003cin T\u003e { /** * Collects the value emitted by the upstream. * This method is not thread-safe and should not be invoked concurrently. */ public suspend fun emit(value: T) } ","date":"2022-09-16","objectID":"/flow/:1:0","tags":["kotlin","flow","coroutine"],"title":"kotlin flow","uri":"/flow/"},{"categories":["技术"],"content":"LiveData 简单易用，但难以处理复杂数据 postValue丢失数据 数据倒灌 不防抖 ","date":"2022-09-16","objectID":"/flow/:1:1","tags":["kotlin","flow","coroutine"],"title":"kotlin flow","uri":"/flow/"},{"categories":["技术"],"content":"冷流 Flow是一种 “冷流”(Cold Stream)。 冷流是一种数据源，该类数据源的生产者会在每个监听者开始消费事件的时候执行，从而在每个订阅上创建新的数据流。 这种冷流的行为我们可以从SafeFlow的实现中得知，在订阅的时候会执行传入的代码块： private class SafeFlow\u003cT\u003e(private val block: suspend FlowCollector\u003cT\u003e.() -\u003e Unit) : AbstractFlow\u003cT\u003e() { override suspend fun collectSafely(collector: FlowCollector\u003cT\u003e) { // 执行代码块 collector.block() } } 而一旦消费者停止监听（例如：collect所在协程被取消了），数据流将会被自动关闭，不会再发射数据。 结构式并发；父子协程之间的关系；主从作用域、协同作用域 协程的取消 UI层订阅Flow的最佳实践 Flow的创建 flow { delay(100) // ok emit(1) // ok withContext(Dispatcher.IO) { emit(2) // fail with ISE } } public fun \u003cT\u003e flow( @BuilderInference block: suspend FlowCollector\u003cT\u003e.() -\u003e Unit ): Flow\u003cT\u003e = SafeFlow(block) flow是一个高阶函数，参数是带接收者FlowCollector并且有suspend修饰符的函数类型，意味着block代码块中可以调用挂起函数 emit函数不是线程安全的，不应该并发调用，所以再flow的代码块中不允许切换线程 除此之外还封装了asFlow、flowOf等函数，都是基于flow{}实现的，方便调用方使用 public fun \u003cT\u003e Iterable\u003cT\u003e.asFlow(): Flow\u003cT\u003e = flow { forEach { value -\u003e emit(value) } } @FlowPreview public fun \u003cT\u003e (suspend () -\u003e T).asFlow(): Flow\u003cT\u003e = flow { emit(invoke()) } public fun \u003cT\u003e flowOf(vararg elements: T): Flow\u003cT\u003e = flow { for (element in elements) { emit(element) } } ","date":"2022-09-16","objectID":"/flow/:1:2","tags":["kotlin","flow","coroutine"],"title":"kotlin flow","uri":"/flow/"},{"categories":["技术"],"content":"热流 SharedFlow 共享流 1-\u003en public interface SharedFlow\u003cout T\u003e : Flow\u003cT\u003e { /** * A snapshot of the replay cache. */ public val replayCache: List\u003cT\u003e } 以广播方式在其所有Flow器之间共享发射值的热流，以便所有收集器获得所有发射值。共享流称为热流，因为它的活动实例独立于收集器的存在而存在。 这与常规Flow相反，例如由flow { ... }函数定义的，它是冷的并且为每个收集器单独启动。 共享流程永远不会完成。在共享流上调用Flow.collect永远不会正常完成，由Flow.launchIn函数启动的协程也不会正常完成。共享流的活动收集器称为订阅者。 StateFlow 特殊的ShareFlow replay = 1 对标LiveData，必须有一个默认值，因为对外提供了一个接口用于获取当前值 public interface StateFlow\u003cout T\u003e : SharedFlow\u003cT\u003e { /** * The current value of this state flow. */ public val value: T } 事件：事件是一次有效的，新订阅者不应该收到旧的事件，事件数据适合用SharedFlow(replay=0) 状态：状态是可以恢复的，新订阅者允许收到旧的状态数据，状态数据适合用StateFlow 比如说ViewModel通知View显示一个弹窗提示，切后台后回来会走onStart，会重新订阅事件对应的Flow，因此会再次收到事件，而显示弹窗 ","date":"2022-09-16","objectID":"/flow/:1:3","tags":["kotlin","flow","coroutine"],"title":"kotlin flow","uri":"/flow/"},{"categories":["技术"],"content":"操作符 终端操作符 collect collectLatest // 有新值发出时，如果此时上个收集还没完成，则会取消掉上个值的收集操作并开始新收集操作 fold reduce lanchIn first // 返回流发出的第一个元素然后取消流收集，如果为空会抛异常 firstOrNull // 返回流发出的第一个元素然后取消流收集。如果流为空，则返回null ... 中间操作符 // 回调 onStart onEach onCompletion onEmpty onSubscription // 变换 transform // 对发出的值进行变换 transformLatest // 当原始流发出一个新值时，前一个transform块被取消 transformWhile // 这个变换的lambda的返回值为Boolean，如果为false则不再进行后续变换（取消订阅），为ture则继续执行 fun Flow\u003cDownloadProgress\u003e.completeWhenDone(): Flow\u003cDownloadProgress\u003e = transformWhile { progress -\u003e emit(progress) // always emit progress !progress.isDone() // continue while download is not done } } map mapNotNull mapLatest // 当有新值发送时如果上个变换还没结束，会先取消掉 // 过滤 filter filterInstance filterNot filterNotNull takeWhile // 返回包含满足给定predicate的第一个元素的流 debounce // 防抖节流，指定时间内的值只接收最新的一个，其他的过滤掉。搜索联想场景适用 sample // 采样 distinctUntilChanged // 组合 combine combineTransform merge flattenConcat // 功能 merge catch buffer conflate ","date":"2022-09-16","objectID":"/flow/:1:4","tags":["kotlin","flow","coroutine"],"title":"kotlin flow","uri":"/flow/"},{"categories":["技术"],"content":"UI收集流的最佳实践 生命周期？资源浪费？ launch vs launchWhenX vs repeatOnLifecycle launch 和视图的生命周期同步 launchWhenX 在应用程序处于后台时接收更新可能会导致崩溃，这可以通过暂停视图中的收集来解决。然而，当应用程序在后台时，上游流量保持活跃，可能会浪费资源 repeatOnLifecycle（Best Practices） 可以在每当生命周期处于STARED会在新的协程中启动执行代码块，并在生命周期进入STOPPED时取消协程，即取消Flow的收集 // 创建新的协程 lifecycleScope.launch { // 每当生命周期处于STARED会在新的协程中启动执行代码块，并在生命周期进入STOPPED时取消协程 repeatOnLifecycle(Lifecycle.State.STARTED) { // 当生命周期处于STARTED时安全地从flow中获取数据，生命周期进入STOPPED时停止收集数据 viewModel.coldFlow.collect { Log.i(\"FlowTest\", \"repeatOnLifecycle $it\") } } // 当运行到此处，生命周期已进入DESTROYED状态 repeatOnLifecycle(Lifecycle.State.STARTED) { viewModel.coldFlow.collect { Log.i(\"FlowTest\", \"repeatOnLifecycle $it\") } } } ","date":"2022-09-16","objectID":"/flow/:1:5","tags":["kotlin","flow","coroutine"],"title":"kotlin flow","uri":"/flow/"},{"categories":["技术"],"content":"冷流转化为热流 使用shareInorshateIn扩展方法可以使冷流转化为热流 public fun \u003cT\u003e Flow\u003cT\u003e.shareIn( scope: CoroutineScope, // 指定开始共享的协程作用域 started: SharingStarted, // 控制什么时候启动和停止共享的策略 replay: Int = 0 // 重播给新订阅者的值的数量(不能为负数，默认为零) ): SharedFlow\u003cT\u003e public fun \u003cT\u003e Flow\u003cT\u003e.stateIn( scope: CoroutineScope, started: SharingStarted, initialValue: T // 初始值 ): StateFlow\u003cT\u003e 共享策略 SharingStarted.Eagerly 立即开始共享并且不会停止 SharingStarted.Lazily 当收个订阅者出现时开始共享并且会停止 SharingStarted.WhileSubscribed 当第一个订阅者出现时开始共享，当最后一个订阅者消失时立即停止共享（默认），永远保持重播缓存（默认） public fun WhileSubscribed( stopTimeoutMillis: Long = 0, // 配置最后一个订阅者消失和共享协程停止之间的延迟（以毫秒为单位)，默认为零（立即停止） replayExpirationMillis: Long = Long.MAX_VALUE // 配置共享协程停止和重放缓存重置之间的延迟（以毫秒为单位）默认为Long.MAX_VALUE（永远保留重放缓存，不重置缓冲区） ) 推荐使用SharingStarted.WhileSubscribed(5000)共享策略作为默认实现 如果Activity配置发生改变，数据是不会丢的，5000ms足够Activity从配置改变到恢复 可以搭配repeatOnLifecycle（UI层安全收集流）使用，如果应用切后台则UI层会取消对于流的collect（取消订阅），而这里因为配置WhileSubscribed策略超时后会自动停止共享，共享流会断开对上游冷流的collect（取消订阅），上游冷流的数据的生产也就会被cancel掉，避免应用处于后台时还存在数据的生产 ","date":"2022-09-16","objectID":"/flow/:1:6","tags":["kotlin","flow","coroutine"],"title":"kotlin flow","uri":"/flow/"},{"categories":["技术"],"content":"实战 简单示例 class BooksRepository{ val userData = flow { emit(Book(\"1984\")) emit(Book(\"茶馆\")) emit(Book(\"一句顶一万句\")) emit(Book(\"山月记\")) } } class BookViewModel{ val books: StateFlow\u003cList\u003cBookState\u003e\u003e = booksRepository.userData .filter { it.author == \"刘震云\" } .stateIn( scope = viewModelScope, started = SharingStarted.WhileSubscribed(5_000), initialValue = BooksFeedUiState.Loading ) } class BookListFragment : Fragment() { ... private fun initObserver() { lifecycleScope.launch { repeatOnLifecycle(Lifecycle.State.STARTED) { viewModel.books.collect { adapter.submitList(it) } } } } ... } Flow实现数据拉取 class VideoDetailRepository { private val api by lazy { NetworkApi.getInstance().createApi(MovieApi::class.java) } fun getVideoSelectData(videoSelectRequest: VideoSelectRequest): Flow\u003cResult\u003cVideoSelectResponse\u003e\u003e { return api.getVideoSelect(videoSelectRequest.toStGetVideoSelectReq()).map { if (it.ret == 0) { Result.success(it.toVideoSelectResponse()) } else { Result.failure(Exception(it.msg)) } }.catch { emit(Result.failure(it)) } } } class ViewModel{ ... private val store by lazyStore(::videoSelectReducer, VideoSelectState()) val state get() = store.state init { viewModelScope.launch(Dispatchers.IO) { loadTypeFlow.transform { loadType -\u003e store.dispatch(UpdateLoadStateAndType(LoadState.LOADING, loadType)) repository.getVideoSelectData( createVideoSelectRequest( _curVideoSelectModel, loadType, state.value.pageState.attachInfo ) ).let { emitAll(it) } }.collect { result -\u003e Logger.i(TAG, \"curVideoSelectModel = $_curVideoSelectModel\") result.onSuccess { Logger.i(TAG, \"load data success, size = ${it.videoInfo.size}\") store.dispatch(LoadDataSuccess(curVideoSelectStyle, it)) }.onFailure { throwable -\u003e Logger.e(TAG, \"getVideoSelectData\", throwable) store.dispatch(UpdateLoadState(LoadState.ERROR)) } } } } .... } class VideoSelectFragment : Fragment(R.layout.fragment_video_select) { ... private fun initObserver() { viewModel.state.map { it.pageState.canLoadBackward } .distinctUntilChanged() .launchAndCollectIn(viewLifecycleOwner) { viewBinding.refreshLayout.setEnableLoadMore(it) } viewModel.state .map { it.videoItemStates } .distinctUntilChanged() .launchAndCollectIn(viewLifecycleOwner) { dataList -\u003e pictureTextSelectAdapter.submitList(dataList) } } ... } inline fun \u003creified T\u003e Flow\u003cT\u003e.launchAndCollectIn( owner: LifecycleOwner, minActiveState: Lifecycle.State = Lifecycle.State.STARTED, collector: FlowCollector\u003cT\u003e ) = owner.lifecycleScope.launch { owner.repeatOnLifecycle(minActiveState) { this@launchAndCollectIn.collect(collector) } } Flow版本Redux框架 完整代码仓库 ","date":"2022-09-16","objectID":"/flow/:1:7","tags":["kotlin","flow","coroutine"],"title":"kotlin flow","uri":"/flow/"},{"categories":["技术"],"content":"进阶 look forward to ","date":"2022-09-16","objectID":"/flow/:2:0","tags":["kotlin","flow","coroutine"],"title":"kotlin flow","uri":"/flow/"},{"categories":["技术"],"content":"Q\u0026A ","date":"2022-09-16","objectID":"/flow/:3:0","tags":["kotlin","flow","coroutine"],"title":"kotlin flow","uri":"/flow/"},{"categories":["技术"],"content":"参考 nowinandroid 实战 | 使用 Kotlin Flow 构建数据流 “管道” 设计repeatOnLifecycle API 背后的故事 repeatOnLifecycle API design story A safer way to collect flows from Android UIs Flow 操作符 shareIn 和 stateIn 使用须知 Deep dive into Coroutine Flow 2 Migrating from LiveData to Kotlin’s Flow ","date":"2022-09-16","objectID":"/flow/:4:0","tags":["kotlin","flow","coroutine"],"title":"kotlin flow","uri":"/flow/"},{"categories":["生活周刊"],"content":" 享受生活，热爱生活，发现生活中的美 ","date":"2022-09-03","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-008-%E8%BF%9C%E5%B1%B1%E6%B7%A1%E5%BD%B1/:0:0","tags":["思考","生活","阅读","电影"],"title":"生活周刊 008 远山淡影","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-008-%E8%BF%9C%E5%B1%B1%E6%B7%A1%E5%BD%B1/"},{"categories":["生活周刊"],"content":"生活 ","date":"2022-09-03","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-008-%E8%BF%9C%E5%B1%B1%E6%B7%A1%E5%BD%B1/:1:0","tags":["思考","生活","阅读","电影"],"title":"生活周刊 008 远山淡影","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-008-%E8%BF%9C%E5%B1%B1%E6%B7%A1%E5%BD%B1/"},{"categories":["生活周刊"],"content":"工作 由于拖拉，两周的周刊只能一起写了，由于疫情，本打算中秋出去散散心，也苦于在复习与旅游之间纠结。 下半年有个很明确的一个目标就是复习好去面试，上周末在字节的同事就已经发来邀约，我还是很明确要跳出目前这种舒适圈，工作内容没什么新鲜的东西，没有什么挑战性，不能够在工作中进步，裁员也不会裁到我，这样的工作也不是我想要的。 ","date":"2022-09-03","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-008-%E8%BF%9C%E5%B1%B1%E6%B7%A1%E5%BD%B1/:1:1","tags":["思考","生活","阅读","电影"],"title":"生活周刊 008 远山淡影","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-008-%E8%BF%9C%E5%B1%B1%E6%B7%A1%E5%BD%B1/"},{"categories":["生活周刊"],"content":"中秋 中秋那天按例出去吃了一顿饭，去的是广式酒楼，味道也还行，乳鸽还是很好吃的，有点不解的是吃了好几家，其实味道都差不多。 ","date":"2022-09-03","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-008-%E8%BF%9C%E5%B1%B1%E6%B7%A1%E5%BD%B1/:1:2","tags":["思考","生活","阅读","电影"],"title":"生活周刊 008 远山淡影","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-008-%E8%BF%9C%E5%B1%B1%E6%B7%A1%E5%BD%B1/"},{"categories":["生活周刊"],"content":"吵 长期不见面必定很是想念，但寥寥几天相处又能滋生不少情愫。 有时候，一个人的言语和行为甚至会让你分不清这个人到底是谁，面目清晰却觉得无比陌生。 面对怒火还能无休止地挑战，咄咄逼人，而真的逼到人无可奈何而更加面目可憎，才开始害怕你将做出什么，又开始贬低你未发生的暴力。这种意义上的软暴力又何从不让人惧怕，心灵上的折磨并不比身体上的暴力轻松，其实大家都想逃离暴力，不管软硬。也让我想起了，之前我的行为也曾如此可耻，以至于真的被拳打脚踢了一波，才懂得面对怒火，最多BB几句，不可惹到人面目可憎。只笑这世间好轮回，今日得的果，只是前日种的因。 怒到面目可憎，一点点失去理智，哪管什么爱，不想打人不想骂人，不想继续被激怒，只想一个人呆着。还记得平日里听到同事嘲弄一个找房的同事，和老婆同居，只租下一间卧室，日后吵架都没地方可呆，当时倒不以为意，现在只想喊救命。 不好的行为一点点来激怒到人了，却不能发怒，就算大声一点都能被说双标，一句话顶万句，定让你哑口无言，任人宰割。只因为你之前做了，现在她做了，反而你觉得不对了，就能被说双标，而不管她所做的行为有多不耻不对，但是不能说她不对，只能是你双标！还论不到她的错上，只因为你双标。其实想想用说别人双标来逃避自己做错的事，是在很是能拿捏，说不了这件事是错的，那这件事就只能是对的，这可能才是真正的双标，因为把问题都归于前者的人，只要你做过，后者再做，就不能说是错的了，要说是前者的人双标，而且不管前者是否意识到之前做错了，是否能控制住，是否是无意间，只要你做了，再说别人就是双标狗！真的太高了！ 发怒伤旁人不说，更伤自己，精神备受摧残，事后只觉得身体被掏空，好累，如果可以，谁愿意这样，最多大声一点便可。记得以前被激怒还会一下子感觉头晕目眩，可能是血一下冲上脑袋的副作用，不过现在倒不会了，还是要克制，逃离傻逼。 ","date":"2022-09-03","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-008-%E8%BF%9C%E5%B1%B1%E6%B7%A1%E5%BD%B1/:1:3","tags":["思考","生活","阅读","电影"],"title":"生活周刊 008 远山淡影","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-008-%E8%BF%9C%E5%B1%B1%E6%B7%A1%E5%BD%B1/"},{"categories":["生活周刊"],"content":"音乐 九月初是开学季，听着本兮的歌，有瞬闪回了初二那年的暑假，电脑外放的声音充满了整个房间，那些歌儿也充斥了我整个夏天。 很推荐《告诉自己忘了他》！ ","date":"2022-09-03","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-008-%E8%BF%9C%E5%B1%B1%E6%B7%A1%E5%BD%B1/:2:0","tags":["思考","生活","阅读","电影"],"title":"生活周刊 008 远山淡影","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-008-%E8%BF%9C%E5%B1%B1%E6%B7%A1%E5%BD%B1/"},{"categories":["生活周刊"],"content":"视频 ","date":"2022-09-03","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-008-%E8%BF%9C%E5%B1%B1%E6%B7%A1%E5%BD%B1/:3:0","tags":["思考","生活","阅读","电影"],"title":"生活周刊 008 远山淡影","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-008-%E8%BF%9C%E5%B1%B1%E6%B7%A1%E5%BD%B1/"},{"categories":["生活周刊"],"content":"远山淡影 关键词：治愈、鸡皮疙瘩都起来了、唯美、远山淡影、青海茶卡（盐池）盐湖 、想去 ","date":"2022-09-03","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-008-%E8%BF%9C%E5%B1%B1%E6%B7%A1%E5%BD%B1/:3:1","tags":["思考","生活","阅读","电影"],"title":"生活周刊 008 远山淡影","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-008-%E8%BF%9C%E5%B1%B1%E6%B7%A1%E5%BD%B1/"},{"categories":["生活周刊"],"content":"电影 美国战狼，虽说是老套的主旋律电影，但是还是很cool，很有激情，观感很好 高空恐惧症福音，最后的反转挺不错；朋友圈：如果用上IPhone14会少大半时长 周末和泽敏一起看的，之前看过无剧透的电影评价，虽说的确剧情存在莫名其妙的地方（亲生母亲突然现身），但还是有好几个点会揪住我的心，是一部值得看的电影。 ","date":"2022-09-03","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-008-%E8%BF%9C%E5%B1%B1%E6%B7%A1%E5%BD%B1/:4:0","tags":["思考","生活","阅读","电影"],"title":"生活周刊 008 远山淡影","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-008-%E8%BF%9C%E5%B1%B1%E6%B7%A1%E5%BD%B1/"},{"categories":["生活周刊"],"content":"阅读 https://book.douban.com/subject/26575679/ 这周开始读《当我谈跑步时，我谈些什么》。 作者33多岁才开始写作跑步，并且还取得了很不错的成绩，我们经常能听到的一句话：“种一棵树最好的时间是十年前，其次是现在”，其实是很在理的。而且重要的是跑步能坚持那么久，距今都四十年了，不免让我想起了《霍元甲》里李连杰的一句台词：“这一拳20年的功力，你们挡得住吗？\"。四十年的长期坚持跑步，对身体的好处那不敢想，据书里作者自述很少生病，身体很硬朗。 ","date":"2022-09-03","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-008-%E8%BF%9C%E5%B1%B1%E6%B7%A1%E5%BD%B1/:5:0","tags":["思考","生活","阅读","电影"],"title":"生活周刊 008 远山淡影","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-008-%E8%BF%9C%E5%B1%B1%E6%B7%A1%E5%BD%B1/"},{"categories":["生活周刊"],"content":" 享受生活，热爱生活，发现生活中的美 ","date":"2022-08-27","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-007-%E9%9A%90%E5%85%A5%E5%B0%98%E7%83%9F/:0:0","tags":["思考","生活","阅读","电影","水果"],"title":"生活周刊 007 隐入尘烟","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-007-%E9%9A%90%E5%85%A5%E5%B0%98%E7%83%9F/"},{"categories":["生活周刊"],"content":"生活 ","date":"2022-08-27","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-007-%E9%9A%90%E5%85%A5%E5%B0%98%E7%83%9F/:1:0","tags":["思考","生活","阅读","电影","水果"],"title":"生活周刊 007 隐入尘烟","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-007-%E9%9A%90%E5%85%A5%E5%B0%98%E7%83%9F/"},{"categories":["生活周刊"],"content":"运动 有氧运动：开合跳 力量训练：哑铃 跑步还是搁置了，跑步服没用上，目前每天是在开合跳和撸铁两者交替，一周下来身上的肌肉还是会酸痛的，可能是因为很久没有锻炼缘故吧 ","date":"2022-08-27","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-007-%E9%9A%90%E5%85%A5%E5%B0%98%E7%83%9F/:1:1","tags":["思考","生活","阅读","电影","水果"],"title":"生活周刊 007 隐入尘烟","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-007-%E9%9A%90%E5%85%A5%E5%B0%98%E7%83%9F/"},{"categories":["生活周刊"],"content":"水果 买了几个超大的水蜜桃，对于桃子，我喜欢吃软的水蜜桃，她喜欢吃硬的脆的桃。 上次吃了一个感觉第一口很不错的脆桃，多吃几口，到里面就不甜了，整体欠佳，应该也有一整个都好吃的在等我遇到。 二十多年来都不喜欢吃水果，也不说是不喜欢吧，就是很少吃，加上也没能常常吃到很好吃的水果，小时候能吃到一串好吃的葡萄都很开心，另外也不是经常吃得起好水果的家庭，因此就错过了许多，诸如： 菠萝 小时候一般都是买路边一辆板车拉着卖的，而且是跟着大人出去玩，口渴了，花一块钱买一片菠萝，这种菠萝一般要看运气，有的贼酸，有的还挺甜。而不是现在在百果园买一盒菠萝，甜得不真实，觉得自己以前吃的都是假的，当然百果园的菠萝，说贵也是真的贵，不过胜在口味稳定。当然在泽敏那边也吃到了好吃的菠萝，就是平常的水果店，物美价廉。 黑藤巨峰 这也是这个月在百果园发现的，买回来一尝，甜度、口感让我瞬间回到了十余年前那童年，能留在记忆里中的Top1的葡萄也只能是它了。 皮不用剥，一口吸一个，果肉吸出来后，再吸一吸皮内的汁水，甜甜的，带一点点涩，刚刚好，但又不是葡萄肉那种味道，只觉得吃它的精髓大概就在这了。 黑藤巨峰的特点就是高甜低酸，而且还是百果园的招牌，前两个月买的【巨峰葡萄】都是酸酸甜甜，有的酸度还大于甜度，我就不喜欢吃这种，但还是连续买了好几次，直至买到了【黑藤巨峰】。 后面也吃到了便宜的、普通的巨峰葡萄，也是很好吃！ 阳光青提 价格较贵 果大，一口一个，嘎嘣脆，一股清甜。 榴莲 这个就吃得更少了，印象中只有那么一两次，而且吃的一小块，压根没吃出榴莲的感觉出来，就无了。今年在泽敏的对榴莲的执着下，百果园购入了一个，特意备注帮忙选择一个皮薄肉多的榴莲，仿佛如果选得不好，我就退款的意味所在。 荔枝 以前不知道荔枝还有那么多品种，不同品种之间的口味还不同，同一品种之间的荔枝口味也天差地别，比如说以前为数不多吃过的，是妃子笑，但这荔枝拔完枝，核上面也有一些黑点，后来百度才知道是虫屎，让人吃起来甚是不爽，要用手扒拉掉，要不迟到嘴里还得呸呸呸，而不是一口一个荔枝，而且这种荔枝吃起来口味还不好，带着酸涩，偶尔吃到几个饱满的，也算一个惊喜，也一样，以为荔枝都是这样的，而且妃子笑这种看起来就是还没成熟的，这种偏见就深植于心，殊不知它的外表本就如此。 水蜜桃 一开始只喜欢吃软的水蜜桃，那种一口下去水分满满，甜甜的，一口咬下去满满地桃香。 在软的水蜜桃和硬的水蜜桃上有过纠结，你喜欢吃软的桃还是硬的桃？由于之前有很多局限在，对硬的桃也没有多大的印象，只能选择吃过的软桃。 但是最近吃到了一种晚熟的桃，相对于来说是硬的，桃的口感香甜，百果园的晚三月水蜜桃，桃香浓郁，有种特别的风味。 不过也吃到这同一品种，也有软的桃，也有稍硬的桃，看了介绍才知道这桃刚摘下来口感脆嫩香甜，放几天再吃则绵软多汁。 最近在看莫言《晚熟的人》，所以看见相似的辞藻——晚熟的桃，书中的故事和现实中产生了联系，就会有种亲切感，晚熟的桃，晚三个月成熟，生长期更长，糖度相对更高，风味更浓郁，历经三季生长，更甜更多汁。 那晚熟的人呢， ","date":"2022-08-27","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-007-%E9%9A%90%E5%85%A5%E5%B0%98%E7%83%9F/:1:2","tags":["思考","生活","阅读","电影","水果"],"title":"生活周刊 007 隐入尘烟","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-007-%E9%9A%90%E5%85%A5%E5%B0%98%E7%83%9F/"},{"categories":["生活周刊"],"content":"电影 《隐入尘烟》 虽说上周就看了，不过还是没来得及梳理和总结，本周也陆续看到网友对此的讨论，可以说是我今年看得最好的一部影片。据说除了女主，其他的都是素人，尤其是男主，演的那么自然，据说是导演的姨夫。 喜欢看这种小人物的故事，两个不受待见的人相濡以沫，苦难的生活中偶尔也有那么一丝沁甜，可最终一切还是随着拆房而扬起的灰尘，一同隐入尘烟之中，随风而散。 其实也并没有那么多感受，影视中的细节的发现是需要用点心，影视语言不可能像文字那样定定地杵在那。也许是前些时间余华的文学作品看得多，早已习惯，要说苦难，卖血更苦，在细雨中一声声呼喊更令人心碎。 说不上来太多为什么，就是喜欢这种影视，喜欢方言，喜欢小人物，喜欢苦难中的那份感情，喜欢看看村头老头老太太坐在一起八卦的场景。 如果是现实，可能我真的会觉得有铁很怪，但会不会依旧觉得挺有意思呢？还是会避之而不及呢?可能每个村子里都有这样让人觉得怪怪的人，但很少有人能理解。 ","date":"2022-08-27","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-007-%E9%9A%90%E5%85%A5%E5%B0%98%E7%83%9F/:2:0","tags":["思考","生活","阅读","电影","水果"],"title":"生活周刊 007 隐入尘烟","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-007-%E9%9A%90%E5%85%A5%E5%B0%98%E7%83%9F/"},{"categories":["生活周刊"],"content":"阅读 看完了《置身事内》，觉得作者最后一句话挺有意思，也比较符合我的想法：不为了什么，只为了活得更明白一点。 所以这本书没什么宏大的构思和框架，也没有预测，就是介绍些当下的情况，如果能帮助读者理解身边的一些事情，从热闹的政经新闻中看出些门道，从严肃的政府文件中觉察出些机会，争取改善一下生活，哪怕只是增加些谈资，也足够了。我是个经济学家，基于专业训练的朴素信念也有一个：生活过得好一点，比大多数宏伟更宏伟。 周末陪泽敏去医院才了解到深圳关于医保分档的问题，因为她没在深圳落户，只能在指定医院能走医保。由于看了这本书，我也就扳扯了以下，事实和理论产生了联系，看书的目的也就达到了。 至于为什么深圳的医保分档次，深圳的基础建设以及民生、医院、学校都是按照深圳的户籍来确定规划的，一般来说一个城市的建设是这样的。而且也是一种吸引你落户的手段，只有落户了才能享受到你在深圳这座城市搬砖后带来的发展，能够看病、能够上学之类的；但是很明显，深圳基本都是来打工的，明显医疗教育资源不够，是不如长沙的，但的的确确深圳相对于家乡能有更高的薪水，这是我们国家这些年发展的基础，就是农村人口进城务工，北上广漂。这些超一线城市的人口密度是非常大的，城市化高，这也造就了土地资源的稀缺，所以土地价格贵，房价就特别高，这和我们国家的政策是息息相关的，国家通过土地金融土地财政来加杠杆以撬动工业化城市化的进程，也的确提高国内的整体的一个经济发展，但是发展到现在，对于一些地方基础设施已经很完善了，并不需要依旧一个劲将资金什么的投入到这些里面，而是应该重民生重消费，比如医疗资源、教育资源、老百姓的生活水平、工资，降低贫富差距。我们国家人民的储蓄率是特别高的，储蓄率高就代表人民就没有多少钱去消费，这和我们国家的大背景是有关系的，如果国家还将资金投入到一些产品中，那意味着产品是过剩的，其一就是要买房，要生娃，要养老，要赡养老人，没钱那可不行。所以呢，近几年说是要重民生重消费，但是具体看来还不是很明显。 ","date":"2022-08-27","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-007-%E9%9A%90%E5%85%A5%E5%B0%98%E7%83%9F/:3:0","tags":["思考","生活","阅读","电影","水果"],"title":"生活周刊 007 隐入尘烟","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-007-%E9%9A%90%E5%85%A5%E5%B0%98%E7%83%9F/"},{"categories":["生活周刊"],"content":"工作 本周在工作上总结归纳记录下了遇到的一个问题，还是有必要的，这么久以来都没怎么归纳总结了，其实记录的过程中也会发现到一些问题，一些之前没有注意到的问题，更能加深对知识的理解。 其实工作中对于一个新的项目，我总会新建一个文件，用markdown编写，用来记录工作的背景、内容、实现方案、工作拆分、实施过程中遇到的问题，以及一个很重要的TODO列表包括工作项、待解决的问题等。 ","date":"2022-08-27","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-007-%E9%9A%90%E5%85%A5%E5%B0%98%E7%83%9F/:4:0","tags":["思考","生活","阅读","电影","水果"],"title":"生活周刊 007 隐入尘烟","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-007-%E9%9A%90%E5%85%A5%E5%B0%98%E7%83%9F/"},{"categories":["技术"],"content":"缘起 最近遇到一个NPE，是使用Kotlin定义的一个非空的浮点集合List\u003cFloat\u003e，但是在具体业务侧取用的时候，出现了如下Crash： java.lang.NullPointerException: Attempt to invoke virtual method 'float java.lang.Number.floatValue()' on a null object reference 从非空集合中取到了null，导致出现了NPE，经过一番溯源，发现这个集合是从数据库中获取的Json串通过Gsono反序列化出来的，而Gson反序列化的时候并不会报错，直到数据使用时才抛出NPE。 val type = object : TypeToken\u003cList\u003cFloat\u003e\u003e() {}.type Gson().fromJson\u003cList\u003cFloat\u003e\u003e(\"[1.0,2.0,null]\",type) ","date":"2022-08-26","objectID":"/kotlin-data-class%E4%BD%BF%E7%94%A8gson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E7%A9%BA%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/:1:0","tags":["Gson","kotlin"],"title":"kotlin data class使用Gson反序列化的空安全问题","uri":"/kotlin-data-class%E4%BD%BF%E7%94%A8gson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E7%A9%BA%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"},{"categories":["技术"],"content":"觅踪 内部都是通过TypeAdapter来处理序列化和反序列化的逻辑的，例如我的List\u003cFloat\u003e则存在一个CollectionTypeAdapterFactory来获取一个集合的适配器来处理， 而具体的元素类型又交付给ObjectTypeAdapter来处理，其中如果读到null则直接返回null了，并没有做其余的处理。 public final class CollectionTypeAdapterFactory implements TypeAdapterFactory { private final ConstructorConstructor constructorConstructor; public CollectionTypeAdapterFactory(ConstructorConstructor constructorConstructor) { this.constructorConstructor = constructorConstructor; } @Override public \u003cT\u003e TypeAdapter\u003cT\u003e create(Gson gson, TypeToken\u003cT\u003e typeToken) { ... private static final class Adapter\u003cE\u003e extends TypeAdapter\u003cCollection\u003cE\u003e\u003e { ... @Override public Collection\u003cE\u003e read(JsonReader in) throws IOException { if (in.peek() == JsonToken.NULL) { in.nextNull(); return null; } Collection\u003cE\u003e collection = constructor.construct(); in.beginArray(); while (in.hasNext()) { E instance = elementTypeAdapter.read(in); // 1. 读取集合中的元素 collection.add(instance); } in.endArray(); return collection; } ... } public final class ObjectTypeAdapter extends TypeAdapter\u003cObject\u003e { ... @Override public Object read(JsonReader in) throws IOException { JsonToken token = in.peek(); switch (token) { ... case NUMBER: return in.nextDouble(); case BOOLEAN: return in.nextBoolean(); case NULL: // 2. 如果是null则返回null in.nextNull(); return null; default: throw new IllegalStateException(); } } ... 阅读源码后我们也就可以知道Gson对Kotlin的一些特性别并不兼容：w 不支持空安全 不支持默认参数 ","date":"2022-08-26","objectID":"/kotlin-data-class%E4%BD%BF%E7%94%A8gson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E7%A9%BA%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/:2:0","tags":["Gson","kotlin"],"title":"kotlin data class使用Gson反序列化的空安全问题","uri":"/kotlin-data-class%E4%BD%BF%E7%94%A8gson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E7%A9%BA%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"},{"categories":["技术"],"content":"兼容 Gson是并没有适配Kotlin的可空类型的，会返回一个带有null的集合，导致取用的时候会NPE，但是查看了相关写入数据库的代码也并咩有找到存在写入null的情况，因此我们只能在反序列化的时候做一个兼容逻辑，如果读取到null值则则写入默认值0f到集合，以及为了进一步排查问题，也可以打印相关的日志，比如一个集合中存在多少个null值，以便可以进一步分析。 不过也有一个Square出品的与kotlin兼容极好的现代化JSON解析库——moshi 针对于List类型，我们注入一个自定义的类型适配器，Gson内部会取类型所对应的Adapter来处理序列化和反序列化。 ","date":"2022-08-26","objectID":"/kotlin-data-class%E4%BD%BF%E7%94%A8gson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E7%A9%BA%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/:3:0","tags":["Gson","kotlin"],"title":"kotlin data class使用Gson反序列化的空安全问题","uri":"/kotlin-data-class%E4%BD%BF%E7%94%A8gson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E7%A9%BA%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"},{"categories":["技术"],"content":"编写List的自定义适配器 class FloatListTypeAdapter : TypeAdapter\u003cList\u003cFloat\u003e\u003e() { override fun write(writer: JsonWriter?, value: List\u003cFloat\u003e?) { writer ?: return val list = value ?: emptyList() writer.beginArray() list.forEach { writer.value(it) } writer.endArray() } override fun read(reader: JsonReader?): List\u003cFloat\u003e { reader ?: return emptyList() reader.beginArray() val list = mutableListOf\u003cFloat\u003e() var nullValueCount = 0 while (reader.hasNext()) { if (reader.peek() == JsonToken.NULL) { nullValueCount++ list.add(0f) reader.nextNull() continue } list.add(reader.nextDouble().toFloat()) } reader.endArray() if (nullValueCount != 0) { Logger.e(TAG, \"[read] nullCount = $nullValueCount\") } return list } companion object { private const val TAG = \"FloatListTypeAdapter\" } } ","date":"2022-08-26","objectID":"/kotlin-data-class%E4%BD%BF%E7%94%A8gson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E7%A9%BA%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/:3:1","tags":["Gson","kotlin"],"title":"kotlin data class使用Gson反序列化的空安全问题","uri":"/kotlin-data-class%E4%BD%BF%E7%94%A8gson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E7%A9%BA%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"},{"categories":["技术"],"content":"注册FloatListAdapter GsonBuilder().registerTypeAdapter( object : TypeToken\u003cList\u003cFloat\u003e\u003e() {}.type, FloatListTypeAdapter() ).create() ","date":"2022-08-26","objectID":"/kotlin-data-class%E4%BD%BF%E7%94%A8gson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E7%A9%BA%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/:3:2","tags":["Gson","kotlin"],"title":"kotlin data class使用Gson反序列化的空安全问题","uri":"/kotlin-data-class%E4%BD%BF%E7%94%A8gson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E7%A9%BA%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"},{"categories":["生活周刊"],"content":" 享受生活，热爱生活，发现生活中的美 ","date":"2022-08-20","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-006-%E5%B1%B1%E6%B0%B4%E4%B9%8B%E9%97%B4/:0:0","tags":["思考","生活","阅读","旅游"],"title":"生活周刊 006 山水之间","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-006-%E5%B1%B1%E6%B0%B4%E4%B9%8B%E9%97%B4/"},{"categories":["生活周刊"],"content":"生活 ","date":"2022-08-20","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-006-%E5%B1%B1%E6%B0%B4%E4%B9%8B%E9%97%B4/:1:0","tags":["思考","生活","阅读","旅游"],"title":"生活周刊 006 山水之间","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-006-%E5%B1%B1%E6%B0%B4%E4%B9%8B%E9%97%B4/"},{"categories":["生活周刊"],"content":"运动 开始计划下半年的运动生活，由于年初的时候脚崴了，跑步也停了快大半年，周末准备了一套运动套装，免得健身房跑个步一身汗，顶着一身湿透的衣服也不太雅观。 本打算八点起床还能去公司跑半个小时步，不过也不能一下从平常的九点半提前到八点起床，不过还是能在九点起床，当然晚上还得早睡一点，保持八小时的睡眠还是必须的。还能在公司吃个早餐，也能节约一小笔开支，毕竟在这个经济下行的背景下，公司的年度关键词——降本增效，正在从各个方面开始体现，不限于裁员、薪水、福利，逐步蔓延，吐槽归吐槽，倒也能理解。 身体和心灵，总得有一个在路上。明显这是一道多选题，而我全都要 ","date":"2022-08-20","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-006-%E5%B1%B1%E6%B0%B4%E4%B9%8B%E9%97%B4/:1:1","tags":["思考","生活","阅读","旅游"],"title":"生活周刊 006 山水之间","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-006-%E5%B1%B1%E6%B0%B4%E4%B9%8B%E9%97%B4/"},{"categories":["生活周刊"],"content":"山水之间 最近总想出去旅游，想去山水之间，感受清晨的空气之中混着泥土和青草的香气，沁人心脾，身处那清爽的环境心情也定是极为畅快的，奈何疫情不间断，之前都错过了入夏前那适宜的温度，也就不了了之。 周六和奶奶提起了旅游的那些事，肉眼可见的她眼里带着光，兴致勃勃地和我说了一大串。“可以的话，还是多出去走一走”，或许这也是她在对自己说吧。 之前入夏前就想筹划和奶奶一起去桂林来着，虽是土生土长的农村人，打小在崇山峻岭中长大，相对于大海，或许更愿意享受这大自然的山与水，这壮阔的山，这清澈的水，更能唤起一些美好的回忆，只甚是可惜，下次也只能是夏末秋初了罢。 隐居山水之间 誓与浮名散 ","date":"2022-08-20","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-006-%E5%B1%B1%E6%B0%B4%E4%B9%8B%E9%97%B4/:1:2","tags":["思考","生活","阅读","旅游"],"title":"生活周刊 006 山水之间","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-006-%E5%B1%B1%E6%B0%B4%E4%B9%8B%E9%97%B4/"},{"categories":["生活周刊"],"content":"阅读 置身事内 9.1 “在成功的经济体中，经济政策一定是务实的，不是意识形态化的。是具体的，不是抽象的。” 直面真问题、深究真逻辑的复旦大学经济学“毕业课” ☆ 连接抽象经济学理论与中国发展实际 在市场机制不完善的情况下，如何实现可行的动员与资源调配，推动经济增长？ 在确保增长的过程中，如 何获得更多资源和时间去建设和完善市场经济？ ☆ 结合学界前沿研究与一线调研经历 扼要论述+延伸阅读指引，满足弹性认知需求 生动解说光伏、面板等行业案例，清晰复盘宽窄巷子、华夏幸福等建设经验 ☆ 微观机制+宏观现象 双重维度串联中国经济生活中中知识与现象的碎片 理解地方政府经济治理的决策与行动逻辑 解读城市化、房价、贫富差距、债务、国内外贸易生态等现象背后各种要素的联动 ☆ 从热闹的政经新闻中看出门道，从枯燥的政府文件中觉察到机会。 “了解政府认为应该怎么办，比了解‘我’认为应该怎么办，重要得多。” ------------------------------------------------------------------------------------------------------ 本书是是兰小欢多年教学、调研与研究内容的凝练，将经济学原理与中国经济发展的实践有机融合，以地方政府投融资为主线，深入浅出地论述了中国经济的发展，笔触简练客观，并广泛采纳了各领域学者的最新研究成果。全书分上下两篇。上篇解释微观机制，包括地方政府的基本事务、收支、土地融资和开发、投资和债务等；下篇解释这些微观行为与宏观现象的联系，包括城市化和工业化、房价、地区差异、债务风险、国内经济结构失衡、国际贸易冲突等。最后一章提炼和总结全书内容。 通过对中国政治经济体系的论述，作者简明地刻画了地方政府进行经济治理的基本方式，并指出，中国政府通过深度介入工业化和城市化的进程，在发展经济的同时逐步推动了市场机制的建立和完善，以一种有别于所谓发达国家经验的方式实现了经济奇迹。基于对改革历程与社会矛盾的回顾与分析，作者也在书中对当前推进的市场化改革与政府转型进行了解读，帮助读者增进对中国发展现实的把握。 本周主要读了《置身事内：中国政府与经济发展》，本书说得通俗易懂，虽说比较浅，但大大拓宽了我对于政府和经济的认知，一直不知道政府会对企业进行大力扶持，政府和企业也是水乳交融着；一直不知道土地、房价为什么会如此暴涨，原来与国家的城市化、工业化以及政府的经济政策息息相关。 ","date":"2022-08-20","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-006-%E5%B1%B1%E6%B0%B4%E4%B9%8B%E9%97%B4/:2:0","tags":["思考","生活","阅读","旅游"],"title":"生活周刊 006 山水之间","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-006-%E5%B1%B1%E6%B0%B4%E4%B9%8B%E9%97%B4/"},{"categories":["生活周刊"],"content":"电影 这周和泽敏一起看了《未麻的部屋》，是一个很看起来很压抑的电影，由于情节是现实和主角拍戏的情节交融的，看到后面甚至都看不明白了，不过还是觉得是一个很好的片子，看完还得找个解说来理一理。 影片通过艺人未麻、成为经纪人的过气明星留美、未麻的粉丝马脸怪人等人，展现了娱乐圈中偶像—粉丝的关系：留美通过扮演未麻，控制了极端粉丝马脸人；经纪公司又通过“培养明星”的名头，让未麻接大尺度的强奸戏，拍裸体写真——这实质上是对艺人的消费和控制；极端粉丝则以跟踪、威胁、建网站曝光艺人隐私等等手段，对艺人进行精神上的控制和道德绑架。经济公司/制作方、艺人、粉丝之间，形成了一个复杂的环，互相依赖，互相控制。其结果，就是人的本性迷失、扭曲，变成了某种社会符号，成为了资本或他人的附庸。作为一部23年前的动画作品，不得不说其认识深刻、超前。 ","date":"2022-08-20","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-006-%E5%B1%B1%E6%B0%B4%E4%B9%8B%E9%97%B4/:3:0","tags":["思考","生活","阅读","旅游"],"title":"生活周刊 006 山水之间","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-006-%E5%B1%B1%E6%B0%B4%E4%B9%8B%E9%97%B4/"},{"categories":["生活周刊"],"content":" 享受生活，热爱生活，发现生活中的美 ","date":"2022-08-14","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-005-%E6%9D%82/:0:0","tags":["思考","生活","阅读","双拼","电影"],"title":"生活周刊 005 杂","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-005-%E6%9D%82/"},{"categories":["生活周刊"],"content":"杂 ","date":"2022-08-14","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-005-%E6%9D%82/:1:0","tags":["思考","生活","阅读","双拼","电影"],"title":"生活周刊 005 杂","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-005-%E6%9D%82/"},{"categories":["生活周刊"],"content":"双拼 还是放弃了双拼输入，终究是不能习惯，感觉有的按键输入就很别扭，全拼输入毕竟符合人的直觉和习惯，对于本身键盘打字很快的人感觉实在受不了，而且就算打得很熟练了，快得也是多余。 ","date":"2022-08-14","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-005-%E6%9D%82/:1:1","tags":["思考","生活","阅读","双拼","电影"],"title":"生活周刊 005 杂","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-005-%E6%9D%82/"},{"categories":["生活周刊"],"content":"乐呵 虽说今年的涨薪并不是让人满意，毕竟在这个大环境下，也还算过得去罢。由于在8月份才知道调薪，公司给予3个月的涨幅补发，这点钱当也感觉可有可无，何不用它来做点有意义的事，于是想买点什么来提升下生活品质，但一时半会也想不到，毕竟还是一个人居住在比较小的单间，也没什么可买的了。 那就撒点钱出去吧，给阿眭安排了一波衣服，平时看她买衣服也难受，一个月逛下来都挑不中，于是在我的威逼下迅速买了几套衣服回来试试再说，还是希望能买些品质好一点的衣服，也就是贵一点的，感觉还是会好不少。 询问了下妹妹每个月的零花钱，的确不是很够，每个月300元，除去两个月交一次的水电费150，基本上就是剩下225元可支配了，除了每个月买点零食，感觉就没多少钱可用了，更何谈和朋友一起出去玩玩吃个饭之类的活动了。于是让她可以和妈妈说一下，水电费另外要就好，想着这个学期也刚开始，给了500元。 由于自己也才工作没多久，妈妈也还年轻，还不需要我来赡养，所以会在生日、过节的时候发个红包来表达心意，也算师出有名，这次就比较直率，就是说涨工资了，给你们撒点钱乐呵乐呵 我自己乐呵，她们也乐呵，大家一起乐呵乐呵。 ","date":"2022-08-14","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-005-%E6%9D%82/:1:2","tags":["思考","生活","阅读","双拼","电影"],"title":"生活周刊 005 杂","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-005-%E6%9D%82/"},{"categories":["生活周刊"],"content":"阅读 置身事内 9.1 “在成功的经济体中，经济政策一定是务实的，不是意识形态化的。是具体的，不是抽象的。” 直面真问题、深究真逻辑的复旦大学经济学“毕业课” ☆ 连接抽象经济学理论与中国发展实际 在市场机制不完善的情况下，如何实现可行的动员与资源调配，推动经济增长？ 在确保增长的过程中，如 何获得更多资源和时间去建设和完善市场经济？ ☆ 结合学界前沿研究与一线调研经历 扼要论述+延伸阅读指引，满足弹性认知需求 生动解说光伏、面板等行业案例，清晰复盘宽窄巷子、华夏幸福等建设经验 ☆ 微观机制+宏观现象 双重维度串联中国经济生活中中知识与现象的碎片 理解地方政府经济治理的决策与行动逻辑 解读城市化、房价、贫富差距、债务、国内外贸易生态等现象背后各种要素的联动 ☆ 从热闹的政经新闻中看出门道，从枯燥的政府文件中觉察到机会。 “了解政府认为应该怎么办，比了解‘我’认为应该怎么办，重要得多。” ------------------------------------------------------------------------------------------------------ 本书是是兰小欢多年教学、调研与研究内容的凝练，将经济学原理与中国经济发展的实践有机融合，以地方政府投融资为主线，深入浅出地论述了中国经济的发展，笔触简练客观，并广泛采纳了各领域学者的最新研究成果。全书分上下两篇。上篇解释微观机制，包括地方政府的基本事务、收支、土地融资和开发、投资和债务等；下篇解释这些微观行为与宏观现象的联系，包括城市化和工业化、房价、地区差异、债务风险、国内经济结构失衡、国际贸易冲突等。最后一章提炼和总结全书内容。 通过对中国政治经济体系的论述，作者简明地刻画了地方政府进行经济治理的基本方式，并指出，中国政府通过深度介入工业化和城市化的进程，在发展经济的同时逐步推动了市场机制的建立和完善，以一种有别于所谓发达国家经验的方式实现了经济奇迹。基于对改革历程与社会矛盾的回顾与分析，作者也在书中对当前推进的市场化改革与政府转型进行了解读，帮助读者增进对中国发展现实的把握。 本周主要读了《置身事内：中国政府与经济发展》，本书说得通俗易懂，虽说比较浅，但大大拓宽了我对于政府和经济的认知，一直不知道政府会对企业进行大力扶持，政府和企业也是水乳交融着；一直不知道土地、房价为什么会如此暴涨，原来与国家的城市化、工业化以及政府的经济政策息息相关。 ","date":"2022-08-14","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-005-%E6%9D%82/:2:0","tags":["思考","生活","阅读","双拼","电影"],"title":"生活周刊 005 杂","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-005-%E6%9D%82/"},{"categories":["生活周刊"],"content":"电影 周末想去看电影，在本着经过市场印证的两部电影《独行月球》和《神探大战》还没看的情况下，选择了刚上映的《断桥》，电影由王俊凯、范伟、马思纯主演，剧情犯罪类型的，扫了一眼豆瓣，评分还未出来，评论区前几个评论均是三星以上，感觉应该会不错，也就随即下单。 从一开始就感觉是低配版的《少年的你》，前面节奏极慢，剧情也奇奇怪怪的，傻不拉几，看得我有冲出电影院的冲动，阿眭也在旁边一个劲地吐槽，好是无语。不过范伟老师的演技还是在线，也是我挺喜欢的一个演员，想一想之前扫了一眼演员表，想着也是范伟老师在，感觉应该也会不错吧，因为之前看的《一秒钟》《私人订制》《不速之客》等，都挺有意思的，感觉演戏的味道别具一格。 ","date":"2022-08-14","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-005-%E6%9D%82/:3:0","tags":["思考","生活","阅读","双拼","电影"],"title":"生活周刊 005 杂","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-005-%E6%9D%82/"},{"categories":["生活周刊"],"content":" 享受生活，热爱生活，发现生活中的美 ","date":"2022-08-06","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-004-%E6%97%A0%E9%A2%98/:0:0","tags":["思考","生活","阅读","双拼","美食","好物"],"title":"生活周刊 004 无题","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-004-%E6%97%A0%E9%A2%98/"},{"categories":["生活周刊"],"content":"阅读 ","date":"2022-08-06","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-004-%E6%97%A0%E9%A2%98/:1:0","tags":["思考","生活","阅读","双拼","美食","好物"],"title":"生活周刊 004 无题","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-004-%E6%97%A0%E9%A2%98/"},{"categories":["生活周刊"],"content":"《兄弟》 看了大概300页，在那文革的背景下，文中的人物的命运可真是太惨了。时代的一粒灰落到一个普通人身上都是一座山，令人印象深刻的是对红卫兵和批斗的描写，毫无人性的、荒唐的、令人窒息的迫害。 ","date":"2022-08-06","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-004-%E6%97%A0%E9%A2%98/:1:1","tags":["思考","生活","阅读","双拼","美食","好物"],"title":"生活周刊 004 无题","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-004-%E6%97%A0%E9%A2%98/"},{"categories":["生活周刊"],"content":"《被讨厌的勇气》 本周看的是关于课题分离论述的章节，主张一个人只管好自己的事、做好自己就可以了，不干涉别人的事，但我也不能完全苟同，只能取其精华罢。 这一部分看下来，还是不能完全赞同，应该是有一个限定条件的，当孩子有一定的认知，对自己的人生有一份责任感，那尊重他的选择，在旁加以引导，是完全可以的。但如果只是成天混日子的那种，还放任不管，那便是没尽父母之责。 ","date":"2022-08-06","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-004-%E6%97%A0%E9%A2%98/:1:2","tags":["思考","生活","阅读","双拼","美食","好物"],"title":"生活周刊 004 无题","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-004-%E6%97%A0%E9%A2%98/"},{"categories":["生活周刊"],"content":"电影 周六晚和高中同学聚完餐后去看了古天乐的《明日战记》还不错，第一次看到国产机甲科幻片，俗套的剧情，打斗场面还不错，值得一看，虽说某些情节有点多余。 ","date":"2022-08-06","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-004-%E6%97%A0%E9%A2%98/:2:0","tags":["思考","生活","阅读","双拼","美食","好物"],"title":"生活周刊 004 无题","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-004-%E6%97%A0%E9%A2%98/"},{"categories":["生活周刊"],"content":"美食 高中同学来我家附近博物馆看展览，择日不如撞日，就相约一起吃饭，好久没有去吃烤肉了，最近又新开的一家烤肉店——悟能八戒烤肉，所以今晚就去烤肉了。 这家店味道还不错，不过吃到一个新鲜的玩意——芝士地瓜，味道很是不错，甜甜的，因为加了芝士，再搅拌一下可以拉丝，甜甜黏黏的。 ","date":"2022-08-06","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-004-%E6%97%A0%E9%A2%98/:3:0","tags":["思考","生活","阅读","双拼","美食","好物"],"title":"生活周刊 004 无题","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-004-%E6%97%A0%E9%A2%98/"},{"categories":["生活周刊"],"content":"习惯 偶然间在即刻上看到双拼输入法，大致了解了一下，熟练以后打字的效率应该是会比全拼好不少的，从按键机时代过来的人，一直以来用的都是九宫格的全拼输入法，甚至以至于可以盲打，加上词库，打字的效率还是挺高的。 由于最近升级到了iOS16，目前第三方输入法会出现卡死的情况，所以换到了iOS系统输入法，由于系统输入法没有词库，打字也挺费劲，感觉还是可以尝试一下双拼的，尝试下新东西还可以的。 正如你所见，这篇文章就是用双拼打出来的，我这边选的是小鹤双拼的方案。刚开始速度也是真的慢，需要记一下键位图，多打一下应该就会习惯了，两次敲击一个字的感觉还不错，非常有节奏感。 这边也有一个双拼练习网站。 ","date":"2022-08-06","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-004-%E6%97%A0%E9%A2%98/:4:0","tags":["思考","生活","阅读","双拼","美食","好物"],"title":"生活周刊 004 无题","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-004-%E6%97%A0%E9%A2%98/"},{"categories":["生活周刊"],"content":"好物 因为床边太多线头，凌乱不堪，也老掉在地上导致容易被踩踏到，所以最近就pdd买入这样的数据线收纳固定器，很实用！ ","date":"2022-08-06","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-004-%E6%97%A0%E9%A2%98/:5:0","tags":["思考","生活","阅读","双拼","美食","好物"],"title":"生活周刊 004 无题","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-004-%E6%97%A0%E9%A2%98/"},{"categories":["生活周刊"],"content":" 享受生活，热爱生活，发现生活中的美 ","date":"2022-07-30","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-003-%E5%9B%B4%E5%9F%8E/:0:0","tags":["思考","生活","摄影","治愈","阅读"],"title":"生活周刊 003 围城","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-003-%E5%9B%B4%E5%9F%8E/"},{"categories":["生活周刊"],"content":"阅读 围城 9 《围城》是钱钟书所著的长篇小说。第一版于1947年由上海晨光出版公司出版。1949年之后，由于政治等方面的原因，本书长期无法在中国大陆和台湾重印，仅在香港出现过盗印本。1980年由作者重新修订之后，在中国大陆地区由人民文学出版社刊印。此后作者又曾小幅修改过几次。《围城》 自从出版以来，就受到许多人的推崇。由于1949年后长期无法重印，这本书逐渐淡出人们的视野。1960年代，旅美汉学家夏志清在《中国现代小说史》(A History of Modern Chinese Fiction)中对本书作出很高的评价，这才重新引起人们对它的关注。人们对它的评价一般集中在两方面，幽默的语言和对生活深刻的观察。从1990年代开始，也有人提出对本书的不同看法，认为这是一部被“拔高”的小说，并不是一部出色的作品。很多人认为这是一部幽默作品。除了各具特色的人物语言之外，作者夹叙其间的文字也显着机智与幽默。这是本书的一大特色。也有人认为这是作者卖弄文字，语言显得尖酸刻薄。但这一说法并不为大多数人接受。 本周读的是钱钟书先生的《围城》，百闻不如一读，读之前与之有关的无非是下面这一句话，乍一看这本书可能是说婚姻的，细读才知道是说那时候知识分子的生活，留学、回国、工作、恋爱、结婚种种。 婚姻如围城，城外的人想进去，城里的人想出来 其实整本读下来的时候，疑惑有两点： 其一：孙柔嘉为什么会看上方鸿渐？ 孙柔嘉也是刚大学毕业，应该不必急着恋爱结婚，等着便罢。后来和妹妹聊到才发现，是我处于上帝视角先入为主了，假如代入孙柔嘉的视角，一个海外留学的博士，乡绅世家，长相出众，谈吐幽默，对当时的她来说是一个不错的选择，可真的相处下来，自己千方百计嫁给的人不过是一个披着光鲜外壳、不求上进的混子。 其二：方鸿渐的“口才”为什么到后面并没用再表现出来 之前所谓的口才好，无非只是在聊天吹牛扯皮怼人，说起来生龙活虎，旁征博引，但也就止步于此，其中学校演讲便可知真章，并没有什么真材实料，后续教书的故事倒也便正常，对于一个刚开始教书的来说可能会有一定的过渡期，但是那窘迫感描写都使我都要感觉窒息了，不得不佩服钱老的写作功底。 ","date":"2022-07-30","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-003-%E5%9B%B4%E5%9F%8E/:1:0","tags":["思考","生活","摄影","治愈","阅读"],"title":"生活周刊 003 围城","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-003-%E5%9B%B4%E5%9F%8E/"},{"categories":["生活周刊"],"content":"摘录 婚姻是一座围城，城外的人想进去，城里的人想出来 围在城里的人想逃出来，站在城外的人想冲进去，婚姻也罢、事业也罢，人生的欲望大都如此 你不讨厌，可是全无用处 对于丑人，细看是一种残忍 忠厚老实人的恶毒，像饭里的沙砾或者出骨鱼片里未净的刺，会给人一种不期待的伤痛 旅行是最劳顿，最麻烦，叫人本相必现的时候。经过长期苦旅行而彼此不讨厌的人，才可以结交作朋友 有时候，“不再坐一会么？”可以撵走人，有时候“再会”可以挽留人 他所说的“让她三分”，不是“三分流水七分尘”的“三分”，而是“天下只有三分月色”的“三分” ","date":"2022-07-30","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-003-%E5%9B%B4%E5%9F%8E/:1:1","tags":["思考","生活","摄影","治愈","阅读"],"title":"生活周刊 003 围城","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-003-%E5%9B%B4%E5%9F%8E/"},{"categories":["生活周刊"],"content":"播客 记得前些天看到文化有限出来一期聊《围城》的播客，当时暂且没听，毕竟没看过也只是听个响催个眠，这周看了再听才是比较有意思，嘉宾们分享了下自己觉得有意思的一些桥段以及自己对于围城的理解。 Vol.135：“你不讨厌，可是全无用处” ","date":"2022-07-30","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-003-%E5%9B%B4%E5%9F%8E/:2:0","tags":["思考","生活","摄影","治愈","阅读"],"title":"生活周刊 003 围城","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-003-%E5%9B%B4%E5%9F%8E/"},{"categories":["生活周刊"],"content":"视频 其实前两周推荐看到这个up主的视频就点进去了，也就是上一期视频，看了以后感觉很治愈，行走在大街上，看人，看景，并通过摄影的方式记录下来，这一期再看这个视频却萌生到一个想法：摄影是不是刚好符合我喜欢观察人的喜好呢？人的记忆是会随着时间慢慢消退的，虽说可以通过文字来描写出身临其境般的环境以及人物，但那毕竟是大师水准，毕竟目前的我还不配，那如果通过摄影，将我们所见所感的那一刻记录下来，未尝也是一种好的选择。 ","date":"2022-07-30","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-003-%E5%9B%B4%E5%9F%8E/:3:0","tags":["思考","生活","摄影","治愈","阅读"],"title":"生活周刊 003 围城","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-003-%E5%9B%B4%E5%9F%8E/"},{"categories":["技术"],"content":"创建博客的起初，就想有一个页面用来置放看过的书籍、电影等，之前用hexo搭建博客，其实就有个豆瓣的插件，后来迁移到了hugo也一直在找，但是可惜没有找到。 本周一时兴起，想再找找，就看到了一个豆瓣书影音同步的GitHub Action：doumark-action ，这个 Action可以帮我们拉到指定用户的书籍、影视信息并保存下来，这样一来有了数据，就可以通过网页将其渲染出来就好。 ","date":"2022-07-23","objectID":"/hugo-%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E9%A1%B5%E9%9D%A2/:0:0","tags":["hugo","blog"],"title":"Hugo-添加阅读页面","uri":"/hugo-%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E9%A1%B5%E9%9D%A2/"},{"categories":["技术"],"content":"配置GitHub Action 配置Github Action，在博客仓库新建.github/workflows/douban.yml文件，配置正确用于拉取数据 # .github/workflows/douban.yml name: douban on: schedule: - cron: \"0 5,11,18,23 * * *\" // 支持cron配置 watch: types: [started] // 仓库收到star会自动触发workflow jobs: douban: name: Douban mark data sync runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v2 - name: book uses: lizheming/doumark-action@master with: id: 161758056 type: book format: csv dir: ./data/douban # - name: movie # uses: lizheming/doumark-action@master # with: # id: 161758056 # type: movie # format: csv # dir: ./data/douban - name: Commit uses: EndBug/add-and-commit@v8 with: message: 'chore: update douban data' add: './data/douban' ","date":"2022-07-23","objectID":"/hugo-%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E9%A1%B5%E9%9D%A2/:1:0","tags":["hugo","blog"],"title":"Hugo-添加阅读页面","uri":"/hugo-%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E9%A1%B5%E9%9D%A2/"},{"categories":["技术"],"content":"添加阅读页面 添加阅读页面，新建文件，content/books/index.md --- title: \"阅读\" type: static layout: books --- 添加页面渲染文件，layouts/static/books.html，可参考我的阅读页面html文件：books.html 菜单栏添加阅读入口 ... [languages.zh-cn.menu] [[languages.zh-cn.menu.main]] weight = -1 identifier = \"\" pre = \"\" post = \"\" name = \"主页\" url = \"/\" title = \"\" [[languages.zh-cn.menu.main]] weight = 1 identifier = \"\" pre = \"\" post = \"\" name = \"阅读\" url = \"/books\" title = \"\" ... ","date":"2022-07-23","objectID":"/hugo-%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E9%A1%B5%E9%9D%A2/:2:0","tags":["hugo","blog"],"title":"Hugo-添加阅读页面","uri":"/hugo-%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E9%A1%B5%E9%9D%A2/"},{"categories":["技术"],"content":"踩坑 配置好GitHub Action后，触发这个Action执行后，发现一直跑不过，一度怀疑是不是配置错了以及我的豆瓣账号是否有问题，改了好几次配置然后触发执行，甚至还在别人blog帖下留言帮忙看看为啥一直跑不过。 之前是想配置个拉取电影信息的试试，没想到一直跑不过，后面改成拉取书籍信息试试，结果成功了，应该是作者提供的拉取豆瓣电影数据接口存在的问题，而不是Action配置问题。 ","date":"2022-07-23","objectID":"/hugo-%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E9%A1%B5%E9%9D%A2/:3:0","tags":["hugo","blog"],"title":"Hugo-添加阅读页面","uri":"/hugo-%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E9%A1%B5%E9%9D%A2/"},{"categories":["技术"],"content":"参考 豆瓣书影音同步 GitHub Action 「电影 / 阅读」页面，顶！ ","date":"2022-07-23","objectID":"/hugo-%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E9%A1%B5%E9%9D%A2/:4:0","tags":["hugo","blog"],"title":"Hugo-添加阅读页面","uri":"/hugo-%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E9%A1%B5%E9%9D%A2/"},{"categories":["效率"],"content":"自动切换输入法 使用电脑的时候，每次切换App，都要先切换一下中/英文，以免输入有误，就有点烦，一般来说某些App就存在一个默认的输入方式，比如编码的时候就是英文，打开浏览器一般输入中文，如果有个小工具，能在我们切换应用的时候帮我们自动切换输入法就很方便了。 后来逛V2EX的时候还真的遇见了这样一款小工具：Input Source Pro 有没有经常弄混 macOS 输入法的？我实在是受不了了 😤 ","date":"2022-07-23","objectID":"/mac%E5%AE%9E%E7%94%A8app%E6%8E%A8%E8%8D%90/:1:0","tags":["实用","App"],"title":"Mac实用App推荐","uri":"/mac%E5%AE%9E%E7%94%A8app%E6%8E%A8%E8%8D%90/"},{"categories":["效率"],"content":"菜单栏管理工具 使用MacBook会发现菜单栏不够把所有的App入口显示出来，所以找了这样一款工具，可以将菜单栏折叠起来。 bartender ","date":"2022-07-23","objectID":"/mac%E5%AE%9E%E7%94%A8app%E6%8E%A8%E8%8D%90/:2:0","tags":["实用","App"],"title":"Mac实用App推荐","uri":"/mac%E5%AE%9E%E7%94%A8app%E6%8E%A8%E8%8D%90/"},{"categories":["效率"],"content":"第三方输入法使用Caps_Lock切换中英文和大小写 发现MacOs上面的Caps_Lock切换中英文很方便，并且配合Input Source Pro更是很舒适的体验，但是第三方输入法却不支持，如果使用第三方输入法，是需要按两个键(例如：control+空格键)去切换输入法的，很不方便，经过Google搜索到了一下的解决方案： 配置参考 ","date":"2022-07-23","objectID":"/mac%E5%AE%9E%E7%94%A8app%E6%8E%A8%E8%8D%90/:3:0","tags":["实用","App"],"title":"Mac实用App推荐","uri":"/mac%E5%AE%9E%E7%94%A8app%E6%8E%A8%E8%8D%90/"},{"categories":["生活周刊"],"content":" 享受生活，热爱生活，发现生活中的美 ","date":"2022-07-23","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-002-%E5%9C%A8%E7%BB%86%E9%9B%A8%E4%B8%AD%E5%91%BC%E5%96%8A/:0:0","tags":["思考","生活","Switch","余华","牙齿"],"title":"生活周刊 002 在细雨中呼喊","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-002-%E5%9C%A8%E7%BB%86%E9%9B%A8%E4%B8%AD%E5%91%BC%E5%96%8A/"},{"categories":["生活周刊"],"content":"阅读 在细雨中呼喊 8.7 《在细雨中呼喊》是二十世纪九十年代的经典文本，是余华的第一部长篇力作。小说描述了一位江南少年的成长经历和心灵历程。《在细雨中呼喊 》的结构来自于对时间的感受，确切地说是对记忆中的时间的感受，叙述者 天马行空地在过去、现在和将来这三个时间维度里自由穿行，将忆记的 碎片 穿插、结集、拼嵌完整。 这周读的是余华的《在细雨中呼喊》，讲述的是一个少年的成长经历和心路历程，以及身旁的人一些经历，其中最为深刻的就是对他祖父以及父亲的描写，祖父老年生活的悲哀，对那战战兢兢地生活的描写都是如此具有画面感，那一段回忆是人心是黑暗的、压抑的、可怖的。 有句话很出名，是祖父对天的一声绝望的怒吼： 老天爷，你下屌吧，操死我吧。 看到这句话才让我想起书名，原来这就是在细雨中呼喊啊，也一直在想为什么不是在暴雨中呐喊呢？或许是因为没有希望吧，而肖申克的救赎中安迪逃出监狱，在暴风雨中的那一身呐喊就比较贴切，是存在希望的。而这本书中，大多数人的命运都是很悲惨的，所有的希望只能在绵绵细雨中被消磨殆尽，直到最后一声对天不公的怒吼。 ","date":"2022-07-23","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-002-%E5%9C%A8%E7%BB%86%E9%9B%A8%E4%B8%AD%E5%91%BC%E5%96%8A/:1:0","tags":["思考","生活","Switch","余华","牙齿"],"title":"生活周刊 002 在细雨中呼喊","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-002-%E5%9C%A8%E7%BB%86%E9%9B%A8%E4%B8%AD%E5%91%BC%E5%96%8A/"},{"categories":["生活周刊"],"content":"游戏 周末打开了吃灰以久的switch，看商城上新了一个游戏《铸时匠》，反正没啥事，30元也不算太贵，看steam的评价也不错，也就入手了。 《铸时匠》是一款与时间相关的解谜类游戏。游戏讲述了一段父亲与女儿间的故事，采用了双主角的叙事手法，通过分别控制父亲与女儿，从而慢慢解开故事中的谜题，推进故事的进展。独有的时间解谜机制，唯美的手绘画风，充满趣味的谜题以及扣人心弦的剧情，一场神奇的冒险正在等待着你。 游戏时长大概2～3小时左右，主要是解密治愈类的游戏，游戏的音乐、绘画风格都很不错，很有特色的是它的游玩方式：游戏世界的时间暂停，通过控制单个人物的时间轴来推动故事的进展进行解密，其中不免有几个场景卡住了，看看b站的攻略视频：铸时匠解谜全流程-克莱解说即可，不影响游戏体验。 最后成功收集到物品，迎来结局，父女还是没有相见，因为齿轮还是缺了一节，看了下攻略视频才发现还有一个真结局，也就是二周目，需要再收集4个物品，下次再玩！！！不过最后游戏中有句话挺不错： 就算挣扎前行不一定能让你抵达终点，它也会让你离终点更进一步 ","date":"2022-07-23","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-002-%E5%9C%A8%E7%BB%86%E9%9B%A8%E4%B8%AD%E5%91%BC%E5%96%8A/:2:0","tags":["思考","生活","Switch","余华","牙齿"],"title":"生活周刊 002 在细雨中呼喊","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-002-%E5%9C%A8%E7%BB%86%E9%9B%A8%E4%B8%AD%E5%91%BC%E5%96%8A/"},{"categories":["生活周刊"],"content":"音乐 《还在流浪》和《红颜如霜》真香！！！编曲太好听了，往返循环。 ","date":"2022-07-23","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-002-%E5%9C%A8%E7%BB%86%E9%9B%A8%E4%B8%AD%E5%91%BC%E5%96%8A/:3:0","tags":["思考","生活","Switch","余华","牙齿"],"title":"生活周刊 002 在细雨中呼喊","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-002-%E5%9C%A8%E7%BB%86%E9%9B%A8%E4%B8%AD%E5%91%BC%E5%96%8A/"},{"categories":["生活周刊"],"content":"无题 这周左边智齿发炎牙龈肿痛，右上倒数第二颗牙痛，吃饭的时候左右为难，只能尽量去吃面条，少吃饭。 但是想想自从前些年补牙后，一直在用电动牙刷，也坚持早晚刷牙，怎么又牙痛了，就不太理解，并且那颗牙貌似也没有牙洞，只能尽快挂个号去医院看看了。 不过难受的是错过了附近医院的放号时间，附近的医院是每周四上午9点放号，感觉就不太合理，如果错过了就要等一周，那也可太难受了。 ","date":"2022-07-23","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-002-%E5%9C%A8%E7%BB%86%E9%9B%A8%E4%B8%AD%E5%91%BC%E5%96%8A/:4:0","tags":["思考","生活","Switch","余华","牙齿"],"title":"生活周刊 002 在细雨中呼喊","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-002-%E5%9C%A8%E7%BB%86%E9%9B%A8%E4%B8%AD%E5%91%BC%E5%96%8A/"},{"categories":["技术"],"content":"背景 有收到用户反馈，存在图片保存到相册Crash以及相册中找不到到问题，看了下是因为目前App还未适配Android10以上的设备，所以一些Api在一些厂商Android10以上的设备会存在一些问题。 为了能够使用到新的Api来实现保存到相册的逻辑，为了迅速修复保存相册的问题我们可以先升级compileApi到30，以至于我们代码中可以正常访问到新的Api，而targetApi可以先不升，如果升了不做充分的兼容性测试肯定是会存在大大小小的一些问题的。 ","date":"2022-07-20","objectID":"/android%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%9B%B8%E5%86%8C%E5%85%BC%E5%AE%B9android10-/:1:0","tags":["kotlin","Android"],"title":"Android保存图片到本地相册（兼容Android10+）","uri":"/android%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%9B%B8%E5%86%8C%E5%85%BC%E5%AE%B9android10-/"},{"categories":["技术"],"content":"代码实现 具体的实现可以看以下代码，看目前网上的代码实现可能会存在一些缺陷，这份代码主要是参考Google官方文档以及结合网上的一些文章，并且通过了一些主流设备的兼容性测试的。 import android.content.ContentResolver import android.content.ContentUris import android.content.ContentValues import android.content.Context import android.content.Intent import android.graphics.Bitmap import android.net.Uri import android.os.Build import android.os.Environment import android.provider.MediaStore import com.tencent.videocut.utils.log.Logger import java.io.File import java.io.FileNotFoundException import java.io.OutputStream import java.util.Locale import java.util.concurrent.TimeUnit private const val TAG = \"ImageExt\" private const val SUFFIX_JPEG = \".jpeg\" private const val SUFFIX_JPG = \".jpg\" private const val SUFFIX_PNG = \".png\" private const val SUFFIX_WEBP = \".webp\" private const val MIME_TYPE_JPEG = \"image/jpeg\" private const val MIME_TYPE_PNG = \"image/png\" private const val MIME_TYPE_WEBP = \"image/webp\" private data class InsertResult( val uri: Uri, // 插入的Uri val file: File?,// 插入的文件，Android Q以下需要用于获取文件名 ) /** * 保存Bitmap到相册的Pictures文件夹 * * 参考：https://developer.android.google.cn/training/data-storage/shared/media * * @param context 上下文 * @param fileName 文件名，需要携带后缀 * @param quality 图片压缩质量 * @return 本地图片的Uri，返回null则代表保存失败，否则成功 */ suspend fun Bitmap.saveToAlbum( context: Context, fileName: String, quality: Int = 75, ): Uri? { // 插入图片信息 val insertResult = context.contentResolver.insertMediaImage(fileName) if (insertResult == null) { Logger.e(TAG, \"[saveToAlbum] insert media image fail\") return null } // 保存图片并压缩 val outputStream = insertResult.uri.outputStream(context.contentResolver) if (outputStream == null) { Logger.e(TAG, \"[saveToAlbum] outputStream is null\") return null } outputStream.use { compress(fileName.getBitmapFormat(), quality, it) } // 同步到相册 insertResult.syncToAlbum(context) return insertResult.uri } private fun String.getBitmapFormat(): Bitmap.CompressFormat { val fileName = toLowerCase(Locale.getDefault()) return when { fileName.endsWith(SUFFIX_PNG) -\u003e Bitmap.CompressFormat.PNG fileName.endsWith(SUFFIX_JPG) || fileName.endsWith(SUFFIX_JPEG) -\u003e Bitmap.CompressFormat.JPEG fileName.endsWith(SUFFIX_WEBP) -\u003e Bitmap.CompressFormat.WEBP else -\u003e Bitmap.CompressFormat.PNG } } private fun Uri.outputStream(resolver: ContentResolver): OutputStream? { return try { resolver.openOutputStream(this) } catch (e: FileNotFoundException) { Logger.e(TAG, \"[outputStream]\", e) null } } @Suppress(\"DEPRECATION\") private fun InsertResult.syncToAlbum(context: Context) { if (Build.VERSION.SDK_INT \u003c Build.VERSION_CODES.Q) { val imageValues = ContentValues() // 写入文件大小 file?.let { imageValues.put(MediaStore.Images.Media.SIZE, it.length()) } context.contentResolver.update(uri, imageValues, null, null) // 通知媒体库更新 context.sendBroadcast(Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, uri)) } else { val imageValues = ContentValues() // Android Q添加了IS_PENDING状态，为0时其他应用才可见 imageValues.put(MediaStore.Images.Media.IS_PENDING, 0) context.contentResolver.update(uri, imageValues, null, null) } } private fun String.getMimeType(): String? { val fileName = toLowerCase(Locale.getDefault()) return when { fileName.endsWith(SUFFIX_PNG) -\u003e MIME_TYPE_PNG fileName.endsWith(SUFFIX_JPG) || fileName.endsWith(SUFFIX_JPEG) -\u003e MIME_TYPE_JPEG fileName.endsWith(SUFFIX_WEBP) -\u003e MIME_TYPE_WEBP else -\u003e null } } /** * 插入图片到媒体库 */ @Suppress(\"DEPRECATION\") private fun ContentResolver.insertMediaImage(fileName: String): InsertResult? { val imageValues = ContentValues().apply { fileName.getMimeType()?.let { put(MediaStore.Images.Media.MIME_TYPE, it) } TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis()).let { put(MediaStore.Images.Media.DATE_ADDED, it) put(MediaStore.Images.Media.DATE_MODIFIED, it) } } val collection: Uri var file: File? = null if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.Q) { imageValues.apply { put(MediaStore.Images.Media.DISPLAY_NAME, fileName) put(MediaStore.Images.Media.RELATIVE_PATH, Environment.DIRECTORY_PICTURES) put(MediaStore.Images.Media.","date":"2022-07-20","objectID":"/android%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%9B%B8%E5%86%8C%E5%85%BC%E5%AE%B9android10-/:2:0","tags":["kotlin","Android"],"title":"Android保存图片到本地相册（兼容Android10+）","uri":"/android%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%9B%B8%E5%86%8C%E5%85%BC%E5%AE%B9android10-/"},{"categories":["技术"],"content":"参考 Access media files from shared storage java.lang.IllegalStateException:Failed to build unique file: ","date":"2022-07-20","objectID":"/android%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%9B%B8%E5%86%8C%E5%85%BC%E5%AE%B9android10-/:3:0","tags":["kotlin","Android"],"title":"Android保存图片到本地相册（兼容Android10+）","uri":"/android%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%9B%B8%E5%86%8C%E5%85%BC%E5%AE%B9android10-/"},{"categories":["生活周刊"],"content":" 享受生活，热爱生活，发现生活中的美 ","date":"2022-07-16","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-001-%E5%A4%A9%E9%9D%92%E8%89%B2%E7%AD%89%E7%83%9F%E9%9B%A8/:0:0","tags":["思考","生活"],"title":"生活周刊 001 天青色等烟雨","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-001-%E5%A4%A9%E9%9D%92%E8%89%B2%E7%AD%89%E7%83%9F%E9%9B%A8/"},{"categories":["生活周刊"],"content":"阅读 许三观卖血记 9.1 《许三观卖血记》是余华1995年创作的一部长篇小说。《许三观卖血记》以博大的温情描绘了磨难中的人生，以激烈的故事形式表达了人在面对厄运时求生的欲望。小说讲述了许三观靠着卖血渡过了人生的一个个难关，战胜了命运强加给他的惊涛骇浪，而当他老了，知道自己的血再也没有人要时，精神却崩溃了。 这周看了余华的《许三观卖血记》，本以为会是和《活着》那样结局很凄惨的，不过书中后半段连续卖血以及对一同卖血的人一一逝去的描写也足以让人提着一颗心，生怕许三观步入前人后尘。 这本书很好读，一天下来抽点时间很快就看完了，读完感觉前半部分和后半部分，对许三观、许玉兰的人物刻画貌似有点不太对劲，前半部分对他们的行为无法理解，后半部分则缓和了许多，人之间也充满了温情。人之间是很难共情的，更何况我们未曾立于书中人物的处境以及时代背景下，倒是有个灵魂逼问，如果我是许三观，我能否做出更好的选择呢？ ","date":"2022-07-16","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-001-%E5%A4%A9%E9%9D%92%E8%89%B2%E7%AD%89%E7%83%9F%E9%9B%A8/:1:0","tags":["思考","生活"],"title":"生活周刊 001 天青色等烟雨","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-001-%E5%A4%A9%E9%9D%92%E8%89%B2%E7%AD%89%E7%83%9F%E9%9B%A8/"},{"categories":["生活周刊"],"content":"电影 周五逛豆瓣看《咒》上线流媒体了，这也就意味着网上有资源了，这可是等了好久，因此第一时间下载了下来，虽说口中说着今晚就看，但是直到周日还没敢看下去。好久没看恐怖片了，更何况这种带有中国元素的恐怖片，更是buff加满。 记得《咒》在台湾上映的时候，豆瓣评分大概在8分左右，目前上线流媒体后，居然跌到了6.8分，据说是因为影片对观众的诅咒，让不少观众感觉晦气。 电影是通过伪纪录片的方式来拍摄的，记得之前看过类似的——《中邪》，还挺不错的，只是结局都是走向科学可解释的范畴。 记得上次和同事讨论，提到一点，为什么中国电影不采取分级制度？一时间语塞，超出了我们的认知，大概猜测了一下，可能是以前为了破除封建迷信，走向科学，到现在还没有改变罢了。 ","date":"2022-07-16","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-001-%E5%A4%A9%E9%9D%92%E8%89%B2%E7%AD%89%E7%83%9F%E9%9B%A8/:2:0","tags":["思考","生活"],"title":"生活周刊 001 天青色等烟雨","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-001-%E5%A4%A9%E9%9D%92%E8%89%B2%E7%AD%89%E7%83%9F%E9%9B%A8/"},{"categories":["生活周刊"],"content":"音乐 周杰伦的新专辑如期上线，但是能很直接感受到嗓音不行了，唱不了很高key，一遍听下来，没有听到很喜欢的。可能还得让子弹飞一下，再等等。 晚上b站看到了叶湘伦升2key翻唱《还在流浪》，的确是有那味了，哈哈。。。不免让人心酸，原来偶像也是会老的，不知道有生之年还能不能听一次周杰伦的演唱会。之前19年在深圳实习的时候就错过了那场演唱会，后续直到现在还在持续疫情，每每想起都悔恨当初不应该省那钱省那时间，青春无价啊。 还记得八年前，那时候还在高中，《哎呦，不错哦》这首专辑的发售陪我熬过了那寒冷的冬天，十二首有八九首挺喜欢的，歌曲的风格也是多样的，很耐听。 那学期放寒假后还要补课，不过是补一周的课，相对于县城的中学，轻松了不少。教学地点从教室转移到了化学实验室，实验楼里一般铺满瓷砖，这冰冷的瓷砖把周围的热气都统统吸净，只剩冰冷的空气和笔尖在纸张上的刷刷声。 ","date":"2022-07-16","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-001-%E5%A4%A9%E9%9D%92%E8%89%B2%E7%AD%89%E7%83%9F%E9%9B%A8/:3:0","tags":["思考","生活"],"title":"生活周刊 001 天青色等烟雨","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-001-%E5%A4%A9%E9%9D%92%E8%89%B2%E7%AD%89%E7%83%9F%E9%9B%A8/"},{"categories":["生活周刊"],"content":"视频 ","date":"2022-07-16","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-001-%E5%A4%A9%E9%9D%92%E8%89%B2%E7%AD%89%E7%83%9F%E9%9B%A8/:4:0","tags":["思考","生活"],"title":"生活周刊 001 天青色等烟雨","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-001-%E5%A4%A9%E9%9D%92%E8%89%B2%E7%AD%89%E7%83%9F%E9%9B%A8/"},{"categories":["生活周刊"],"content":"激荡四十年-1997 前些天还在惦记大象放映室的激荡四十年系列，已经很久没更新了，应该快更到我出生那年了，没想到周五晚下班就收到推送了，在线观看的人数超过2w人，实属精品。 重点事件： 香港回归 邓工去世 亚洲爆发了金融危机，虽然说当时的中国没有完全开放金融市场，直接影响不大，但是间接影响还是有的。 索罗斯在泰国做空泰铢得手后又盯上了香港，由于政府的支持，索罗斯铩羽而归，之前看过《半小时经济漫画学》，对经济方面的一些大事件有过了解 认识了一些那个年代的歌星，原来张雨生那么年轻就逝去了，年仅31，还是张惠妹的老师，令人嘘唏。 王小波、汪曾祺去世；之前看了王小波的《黄金时代》，用很不同的视角去描述那个知青上山下乡的时代，虽然说有的东西可能还不能get到，但是行文是真的有趣。之前看过汪老的《家人闲坐，灯火可亲》，汪老描述的生活带有一种诗意，是一个爱生活、享受生活、捣鼓美食的可爱老头，这本书让我了解了很多吃的东西。 ","date":"2022-07-16","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-001-%E5%A4%A9%E9%9D%92%E8%89%B2%E7%AD%89%E7%83%9F%E9%9B%A8/:4:1","tags":["思考","生活"],"title":"生活周刊 001 天青色等烟雨","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-001-%E5%A4%A9%E9%9D%92%E8%89%B2%E7%AD%89%E7%83%9F%E9%9B%A8/"},{"categories":["生活周刊"],"content":"天青色等烟雨，而我在等你 也是一个很喜欢的up主狂阿弥更新了，和老婆一起去景德镇旅行，整个视频看下来还是很让人神往的，感受着陌生城市的风味的同时，还有着思想的碰撞，这样的旅途着实令人开心。 有个很有意思的一点，当我从评论区摘抄下面的评论时，想着我也评论下吧，当我在评论框输入“天青色等烟雨，而我在等你”，忽然瞅了一眼视频的标题，居然就是。。。可见我是get到了up主的（一般看熟悉的up主发视频，还真的没有去看标题，所以就忽视了）。 以下摘抄评论区的评论 两个人明明都结婚了，但感觉还是像两个大学生情侣逃课出来玩一样 感觉两个人真是天生一对，身上有着经过无数次阅读的沉淀，尊重思想的碰撞，聆听对方的声音。看你们一起旅行就像很久之前两人行与江南烟雨中 天地都安静 ","date":"2022-07-16","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-001-%E5%A4%A9%E9%9D%92%E8%89%B2%E7%AD%89%E7%83%9F%E9%9B%A8/:4:2","tags":["思考","生活"],"title":"生活周刊 001 天青色等烟雨","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-001-%E5%A4%A9%E9%9D%92%E8%89%B2%E7%AD%89%E7%83%9F%E9%9B%A8/"},{"categories":["生活周刊"],"content":"小知识 之前一直不知道为啥有的饮料解渴，有的喝了越喝越渴，以及为什么冰镇的喝起来更解渴，直到看到这篇文章： 为什么有些饮料能解渴，有些却越喝嗓子越干，是什么影响了饮料「解渴」的效果？ 渗透压低的饮料是真·解渴，比如低糖、低电解质的饮料(和水)； 温度低、带气泡的饮料(和水) 让人「感觉·解渴」； 只满足第 2 点、不满足第 1 点的饮料实际不解渴。 ","date":"2022-07-16","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-001-%E5%A4%A9%E9%9D%92%E8%89%B2%E7%AD%89%E7%83%9F%E9%9B%A8/:5:0","tags":["思考","生活"],"title":"生活周刊 001 天青色等烟雨","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-001-%E5%A4%A9%E9%9D%92%E8%89%B2%E7%AD%89%E7%83%9F%E9%9B%A8/"},{"categories":["随笔"],"content":"https://book.douban.com/subject/30199434/ 最近在读《原生家庭：如何修补自己的性格缺陷》，其中书友对一句话的想法引发了我的回忆： 父母在我们心里种下了精神和情感的种子，它们会随我们一同成长。在有些家庭里，父母种下的是爱、尊重和独立，而在另一些家庭里，则是恐惧、责任或负罪感。——《原生家庭：如何修补自己的性格缺陷》 直到我谈了恋爱，我才意识到原来不是所有的父母都会和孩子坐下来好好沟通、做错了道歉以及与孩子共同成长进步。这一刻，我无比庆幸生在我的家庭里。父母以及弟弟带给我的这种爱，让我会勇敢、大胆、明确的表达爱意和对方让我舒服不舒服的点，不必委曲求全，使我清楚的知道有效沟通、清楚的表达是很重要的一件事。以前的我从来没有想到“自信、落落大方、家教好、有教养”诸如此类的词会集中体现在我的身上，当它们出现的时候，我才恍然大悟，原来我的成长里藏了这么多父母对我的爱啊即使在我成长的过程中，我们的相处有过许多的摩擦，但现在看来，那并不影响他们爱我，只不过是一开始不懂如何爱、如何表达爱。——一只鸭鸭 我和我的妹妹是由爷爷奶奶带大的，近年来我已经毕业了，母亲也就回家带我妹妹，届时妹妹已经上高中了，一个人的心性既已成熟，是一个寻求认同感的年龄。母亲在县城公安局帮忙炒菜，早晚接送下妹妹，但她们相处的其中爆发了很多争吵与怨恨，说来也在意料之中。 的确就是如同书友的想法所描述的那样，并不是所有的父母都会和孩子坐下来好好沟通，并且做错了事并不会承认错误，是那种很坚决的那种，就算大家都心知肚明，而去宁愿引发更大的矛盾或者争吵，当然这可能只是具有某种特定背景下的行为，如果全盘否定是过于不公平。 因为当初我是目睹的，一直以来都很不理解，后来追问其缘由。答道：“如果我承认了错误，那她岂不是更加不听话”，其中的她当然指的是我妹妹，不听话也不是字面笼统的意思，而是缺乏一个对象，更加不听她的话。顿时就觉得十分可笑，这个答案已经出乎我的意料，传统以来以父母不会错的观念是真的有毒。当我明确表述她这种想法是错误的，得到的回应也让我不知所措。“你还不懂，你以后当父母了就会懂的”，很有把握地轻轻说道。 ","date":"2022-07-09","objectID":"/%E8%B0%88%E8%B0%88%E5%8E%9F%E7%94%9F%E5%AE%B6%E5%BA%AD/:0:0","tags":["碎碎念","情感"],"title":"谈谈原生家庭","uri":"/%E8%B0%88%E8%B0%88%E5%8E%9F%E7%94%9F%E5%AE%B6%E5%BA%AD/"},{"categories":["生活周刊"],"content":" 享受生活，热爱生活，发现生活中的美 ","date":"2022-07-09","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-000-%E5%BC%80%E7%AB%AF/:0:0","tags":["思考","生活"],"title":"生活周刊 000 开端","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-000-%E5%BC%80%E7%AB%AF/"},{"categories":["生活周刊"],"content":"缘起 数月前开始寻找中文互联网的一些优质的内容，至于契机是什么，也想不起来了，不过也无妨，总之接触到了RSS、newsletter的概念，也让我对blog的定义有了新的认识，因为我的职业是程序员，也经常看一些技术博客，所以在印象中blog=技术博客，没想到一些人会建立私站，作为个人的一份自留地，分享着自己的想法、思考、总结，是这信息爆炸的时代的一份净土。 ","date":"2022-07-09","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-000-%E5%BC%80%E7%AB%AF/:1:0","tags":["思考","生活"],"title":"生活周刊 000 开端","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-000-%E5%BC%80%E7%AB%AF/"},{"categories":["生活周刊"],"content":"偏好 近几个月来订阅了不少优质内容，相对于咨询来说，我比较喜欢看有价值的文章，所谓有价值的文章并不只是说知识的分享，也可以是作者的一些想法与思考，可以让我相对于昨天的自己有所收获。 例如我关注的一个推特ID为happy xiao的一份名为《可乐周报》的newsletter，其每份周报的前言如下： 我是 happy xiao，欢迎你订阅可乐周报，我在这里分享过去一周里值得推荐的想法。我不关注新闻，不关注科技，不关注政治，不关注知识。 我只关注让你我成长的想法。 这句话就恰恰击中了内心，可谓可遇不可求。 ","date":"2022-07-09","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-000-%E5%BC%80%E7%AB%AF/:2:0","tags":["思考","生活"],"title":"生活周刊 000 开端","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-000-%E5%BC%80%E7%AB%AF/"},{"categories":["生活周刊"],"content":"破茧 过程中渐渐摆脱了所谓的信息茧房，无非做了如下几点： 关闭各种软件的个性推荐；如b站、淘宝、豆瓣、抖音等 每日坚持使用微信读书阅读；其实阅读的时长不重要，重要的是阅读习惯 订阅优质的内容；blog、newsletter、周报、日报等，我目前使用的是iOS平台的RSS客户端Redder ","date":"2022-07-09","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-000-%E5%BC%80%E7%AB%AF/:3:0","tags":["思考","生活"],"title":"生活周刊 000 开端","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-000-%E5%BC%80%E7%AB%AF/"},{"categories":["生活周刊"],"content":"抖音 因为个人是比较排斥抖音的，但由于工作缘故会装上友商的App，关闭个推的前后对比是很明显的。 关闭前：对于使用次数少、用户标签不明显的用户，会推荐一些大众喜好的内容，还是会令人想继续看下去的，以此慢慢给用户打标签。 关闭后：推荐的内容很少有我想看下去的，甚至不乏一些制作粗糙的内容。 ","date":"2022-07-09","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-000-%E5%BC%80%E7%AB%AF/:3:1","tags":["思考","生活"],"title":"生活周刊 000 开端","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-000-%E5%BC%80%E7%AB%AF/"},{"categories":["生活周刊"],"content":"b站 b站是经常使用的一个平台，其上不乏很多优质的视频。虽然说我很少从推荐流中点开视频或者挖掘宝藏up主，但之前一直推荐一些同质化的内容，也是有些许视觉疲劳。自从关闭以后，内容的品类丰富很多，有时候还真能发现一些不错的视频。 ","date":"2022-07-09","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-000-%E5%BC%80%E7%AB%AF/:3:2","tags":["思考","生活"],"title":"生活周刊 000 开端","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-000-%E5%BC%80%E7%AB%AF/"},{"categories":["生活周刊"],"content":"开端 至于为什么我要开始撰写生活周刊呢？ 希望能够静下心来思考，能够发现生活中的美好，并努力用优美的笔触将其记录下来。 在阅读的过程中，想收藏一些优质的内容，其中萌发的一些想法与思考，需要个总结记录的地方以及能够简单分享他人的方式。 暂时没有达到很厉害的水平，能够输出很好的观点与思考，因此立足于个人生活及其迸发出来的想法。 ","date":"2022-07-09","objectID":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-000-%E5%BC%80%E7%AB%AF/:4:0","tags":["思考","生活"],"title":"生活周刊 000 开端","uri":"/%E7%94%9F%E6%B4%BB%E5%91%A8%E5%88%8A-000-%E5%BC%80%E7%AB%AF/"},{"categories":["技术"],"content":"简介 MVI 与 MVVM 比较相似，其借鉴了前端框架的思想，着重强调数据的单向流动和唯一数据源 ","date":"2022-06-01","objectID":"/mvi/:1:0","tags":["kotlin","mvi"],"title":"mvi","uri":"/mvi/"},{"categories":["技术"],"content":"优势 强调数据单向流动，很容易对状态变化进行跟踪和回溯 使用ViewState对State集中管理，只需要订阅一个 ViewState 便可获取页面的所有状态，相对 MVVM 减少了不少模板代码 View通过ViewAction与ViewModel进行通信，又通过StateAction以触发State的变化 ","date":"2022-06-01","objectID":"/mvi/:2:0","tags":["kotlin","mvi"],"title":"mvi","uri":"/mvi/"},{"categories":["技术"],"content":"问题 当页面复杂，State容易膨胀 ","date":"2022-06-01","objectID":"/mvi/:3:0","tags":["kotlin","mvi"],"title":"mvi","uri":"/mvi/"},{"categories":["技术"],"content":"最佳实践 ","date":"2022-06-01","objectID":"/mvi/:4:0","tags":["kotlin","mvi"],"title":"mvi","uri":"/mvi/"},{"categories":["技术"],"content":"以页面为维度定义State，并且注意State中数据的定义，切勿数据裸在State里面 例如一个按钮的状态可能对应State中的数个字段，可进行包裹为ButtonState放置在State。 当State复杂起来 ","date":"2022-06-01","objectID":"/mvi/:4:1","tags":["kotlin","mvi"],"title":"mvi","uri":"/mvi/"},{"categories":["技术"],"content":"案例 ","date":"2022-06-01","objectID":"/mvi/:5:0","tags":["kotlin","mvi"],"title":"mvi","uri":"/mvi/"},{"categories":["技术"],"content":"收藏逻辑 我要收藏一个视频，UI发送一个事件到ViewModel，ViewModel调用Repository触发我们的收藏请求。 收藏请求回来需要展示一个Toast，提示用户收藏成功或者失败，这就以为着我们的ViewModel处理请求结果后，触发State变化，也就是我们CollectButtonSetate的变化。除此之外，还要想办法通知UI显示一条Toast。 如果存储一个字段用于标识UI需要显示的Toast，UI collect到该状态时候会显示该Toast，但如果切后台再返回，UI又会显示该Toast了，因为我们的State是StateFlow承载的， ","date":"2022-06-01","objectID":"/mvi/:5:1","tags":["kotlin","mvi"],"title":"mvi","uri":"/mvi/"},{"categories":["技术"],"content":"新手引导 用户打开一个页面，需要一次显示2个引导浮窗。 如果是在MVI的架构下，做这个逻辑；判断是否显示新手引导的逻辑得再逻辑层，即ViewModel层； ","date":"2022-06-01","objectID":"/mvi/:5:2","tags":["kotlin","mvi"],"title":"mvi","uri":"/mvi/"},{"categories":["技术"],"content":"使用误区 如图，初次使用MVI的同学在该页面的State中定义了2个字段来描述引导浮窗的状态 其中存在两个问题： 使用2个字段来描述是丑陋的 使用可空类型来描述引导流程中的状态更是丑陋的 最佳实践：定义一个枚举类描述引导流程中的状态 enum class GuideState{ NOTHING, SHOW_TITLE_GUIDE, SHOW_DIRECT_ITEM_GUIDE } 其次，再看看UI层的逻辑 其实这个逻辑也是挺奇怪的，监听Title变化的地方，存在引导显示的逻辑；这就违背了我们的原则，View只需监听相对应的状态变化即可。 其次，再看看这个ViewAction的具体执行逻辑，如图，通过判断是否需要显示来更新引导的状态。 所以第二个疑惑的点就是，引导的状态其实并不依赖于其他的UI上面的东西，和用户的操作无关，正如与用户的操作无关却发送一个ViewAction是不太合适的，其实只需要在列表数据加载成功后，通过接口查询当前是否展示引导 去更新引导的状态即可。 OK，我们总结下如何在MVI架构添加业务逻辑： 定义一个状态来描述这个元素 在UI层监听这个状态的变化做相应的逻辑 在合适的时机更改这个状态 ","date":"2022-06-01","objectID":"/mvi/:6:0","tags":["kotlin","mvi"],"title":"mvi","uri":"/mvi/"},{"categories":["技术"],"content":"规范 ViewAction定义：用户在UI层的输入，例如：点击、下拉刷新、上拉加载更多，ClickTitle、LoadMore、Refresh StateAction定义：触发状态改变的操作，例如：修改按钮状态的可见性，则可定义为 UpdateXXBtnVisibility State定义：以页面为单位描述该页面的UI状态 Store定义：以页面为单位存储当前页面的UI状态 用户的输入事件向下流动，UI状态向上流动 如果要dispatch一个Action，不要一个行为派发多个Action，一个行为对应一个Action；例如：如果我们定义了两个Action，依次dispatch，以完成一个操作；倘若后面某个Action的能力改变了，是否会影响到另外一个Action呢？ ","date":"2022-06-01","objectID":"/mvi/:7:0","tags":["kotlin","mvi"],"title":"mvi","uri":"/mvi/"},{"categories":["技术"],"content":"待解决问题 ","date":"2022-06-01","objectID":"/mvi/:8:0","tags":["kotlin","mvi"],"title":"mvi","uri":"/mvi/"},{"categories":["技术"],"content":"页面初始化逻辑 目前页面数据的加载的触发由名为LoadTypeFlow的流驱动，而目前在UI层主动向ViewModel dispatch一个ViewAction以触发LoadTypeFlow的改变以触发页面数据拉取 其实这种流向是不符合我们的规范的，用户只是打开了该页面并没有输入一个事件，实际上应该是可以做成在ViewModel初始化的时候去触发数据加载的。 ","date":"2022-06-01","objectID":"/mvi/:8:1","tags":["kotlin","mvi"],"title":"mvi","uri":"/mvi/"},{"categories":["技术"],"content":"参考 Android官方-应用架构指南 Android官方-界面事件 ","date":"2022-06-01","objectID":"/mvi/:9:0","tags":["kotlin","mvi"],"title":"mvi","uri":"/mvi/"},{"categories":["生活"],"content":"摩的 双月湾的出行很是不便，滴滴是无人接单的，于是晚上出去觅食只能暂且步行而去。 天下着小雨，路上瞅见小巷里的几辆电动单车，心中不免一般欢喜，可以少走两步了。记得上一次骑电单车还是毕业那会，去衡阳看女朋友那会了，骑着一辆单人电单车，从工学院门口一路骑到市区的商圈，也不失一番乐趣。 扫码后才发现起步价贵得惊人，十元起步，已经快赶上打车了，况且路程也不过2公里，实属不划算，只能作罢，继续往前走去。 不久一辆摩的从身旁经过，正纠结走路还是摩的，差不多走来三分之一的路程了，咬咬牙还是继续往前走吧！不过走了一会又开始后悔没叫下那辆摩的了，终究还是想坐摩的的，其一是饿得不行了，已过饭点2小时了；其二是这淅淅沥沥的雨，似乎很难停下，容易让人感到这路程的漫长。 一番纠结过后，还是决定叫下一辆摩的，起初一辆摩的叫价属实颇高，2公里的路居然还要20元，也不愿意被回价，我们只能望着他的背影扬长而去。 ","date":"2022-05-03","objectID":"/%E5%8F%8C%E6%9C%88%E6%B9%BE%E6%B8%B8%E8%AE%B0/:1:0","tags":["旅行","海边"],"title":"双月湾游记","uri":"/%E5%8F%8C%E6%9C%88%E6%B9%BE%E6%B8%B8%E8%AE%B0/"},{"categories":["生活"],"content":"1+1糖水铺 等待女朋友化妆的间隙，上小红书翻翻看周边有什么好吃的，看到一帖子推荐一个吃糖水的地方，想来在深圳呆的两年多里也没找到一家地道的糖水铺，难道在这小小的惠东县能有，也是抱着一试的心态奔过去了。 天落着小雨，打了个摩的，到了当地的菜市场，顺着地图正在街上寻着，打开手机看了看地图，地图分明显示就在身前，但却没见着所谓的店面，正疑惑时，女朋友一声，”诶，这不就是嘛！“。侧身一看，推车旁挂着的招牌上面分明写着几个大字“1+1老字号糖水”，原来没有门面啊，只是街边的一个摊位，带着两辆小推车。但思来想去，却又拥有门面固定的性质，因为地图上还标注了它呀！ 难怪在对面摊位买柠檬鸡爪时，还惊讶这个摊位为啥这么多人买，到底是卖啥的。 看过招牌上的菜单，选了个莲子元肉，其实一时我也没想起来这是个啥，但后来又正中下怀。果然，缘，妙不可言。 莲子元肉糖水，第一口就让我想再买一碗，第一口就让我回味到了几年前的那碗糖水，清甜微凉，我想糖水本应如此，在这淅淅沥沥的雨天，吃一口糖水也挺合适。 一碗喝完，想想还是别再买了，令人欢喜的可并不只是那清甜，而是那许久尚未品尝的味道，生怕再吃一碗日后就没有这份回忆了。 ","date":"2022-05-03","objectID":"/%E5%8F%8C%E6%9C%88%E6%B9%BE%E6%B8%B8%E8%AE%B0/:2:0","tags":["旅行","海边"],"title":"双月湾游记","uri":"/%E5%8F%8C%E6%9C%88%E6%B9%BE%E6%B8%B8%E8%AE%B0/"},{"categories":["生活"],"content":"路边老人 记得小时候，还住在农村，看到载客中巴在远处的山路经过，听到一阵喇叭声，满心欢喜地跟着嘟——嘟——嘟。 看到路边老人，搬个小凳，坐在自家门口，淡然地看着人来车往，或许这一坐就是半天。 一个正欣喜入世，一个已悄然出世。 ","date":"2022-05-03","objectID":"/%E5%8F%8C%E6%9C%88%E6%B9%BE%E6%B8%B8%E8%AE%B0/:3:0","tags":["旅行","海边"],"title":"双月湾游记","uri":"/%E5%8F%8C%E6%9C%88%E6%B9%BE%E6%B8%B8%E8%AE%B0/"},{"categories":["生活"],"content":"菜市场的果贩 喝完一碗糖水，吃下一碗潮汕汤粉后，已然十点，自当满意离去。 沿着小街往回走，路边的店铺基本打烊了，走过一家水果铺，摊位前的数个果盆中还分别泡着几块菠萝、奈李、芒果、桃子，至于为什么是泡在水里的，还心存疑惑，可以理解菠萝是可以泡在盐水里的，其他的就不应该呀，驻足一会，老板就开口，顺手递过来了一个塑料袋。 刚饱餐一顿，本不想再吃其他东西，但是女友却欣喜接过，兴致勃勃地指着菠萝、桃子，说道要三块菠萝，两块桃子，我只好无奈看看同行的朋友，相视一笑，便随她吧。 女友回头问了问我们要不要吃，我们只能笑着说吃不下了，你就自个买点吃吧。老板用铲子从果盆中帮挑出水果，本就为数不多的菠萝，被挑走了几个，还剩下一个，但看到老板还继续把铲子向最后一块菠萝伸去，我们连忙罢手说吃不了那么多啦，可老板的手丝毫没有停下，直到最后一块菠萝入袋。后续其他水果也多舀了点，当女朋友还在想要点啥的时候，还自顾地帮舀了几个剩下的李子入袋。 虽然一直在说着不要，可我们并没有一丝恼怒，我在一旁静静观赏着这路灯下极具人间烟火气的情景，觉得颇有意思。老板也只是想把零星的几块水果都卖出吧，很可能这是他今天最后的顾客了吧。虽说我内心再觉得如何有意思，可我怎么也描写不出来那有意思的场景，受限于文笔，受限于不那么细致入微的观察，挺可惜的。 ","date":"2022-05-03","objectID":"/%E5%8F%8C%E6%9C%88%E6%B9%BE%E6%B8%B8%E8%AE%B0/:4:0","tags":["旅行","海边"],"title":"双月湾游记","uri":"/%E5%8F%8C%E6%9C%88%E6%B9%BE%E6%B8%B8%E8%AE%B0/"},{"categories":["技术"],"content":"kotlin Android-Redux-Intro ","date":"2021-05-29","objectID":"/%E4%B8%8D%E9%94%99%E7%9A%84%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/:0:0","tags":["kotlin"],"title":"不错的技术文章","uri":"/%E4%B8%8D%E9%94%99%E7%9A%84%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"},{"categories":["技术"],"content":"协程 KotlinConf 2017 - Roman Elizarov深入探讨JVM上的协程 Coroutines : First things first 如何优雅的取消协程 ？ Kotlin Coroutines(协程) 完全解析（三），封装异步回调、协程间关系及协程的取消 [译] 如何优雅的处理协程的异常？ Kotlin 协程五 —— 在Android 中使用 Kotlin 协程 Kotlin Coroutines dispatchers Kotlin 协程 谈了谈CPS变换以及状态机 硬核万字解读——Kotlin协程原理解析 贴了比较多的源码，说得也很不错，搭配类图很直观，很硬核 Design of Kotlin Coroutines 也是源码解析，和上面的有点类似 Which of coroutines (goroutines and kotlin coroutines) are faster 为什么无栈协程不能被非协程函数嵌套调用？ 官方Coroutines doc ","date":"2021-05-29","objectID":"/%E4%B8%8D%E9%94%99%E7%9A%84%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/:1:0","tags":["kotlin"],"title":"不错的技术文章","uri":"/%E4%B8%8D%E9%94%99%E7%9A%84%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"},{"categories":["技术"],"content":"疑问 CPS变换 既然kotlin协程从实现方式来说一种无栈协程，continuation和callback的区别到底在哪里？ 「无栈协程」大多数都是类似 Kotlin 这种实现，将一个函数体拆成多个 subroutine ，执行异步操作时，通过 continuation 保存上下文状态（包括代码行号、局部变量），并从当前函数退出；当异步操作完成时，会通过 continuation 重新进入该函数，并恢复上下文。 ","date":"2021-05-29","objectID":"/%E4%B8%8D%E9%94%99%E7%9A%84%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/:1:1","tags":["kotlin"],"title":"不错的技术文章","uri":"/%E4%B8%8D%E9%94%99%E7%9A%84%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"},{"categories":["技术"],"content":"flow 实战 | 使用 Kotlin Flow 构建数据流 “管道” 设计repeatOnLifecycle API 背后的故事 repeatOnLifecycle API design story A safer way to collect flows from Android UIs Flow 操作符 shareIn 和 stateIn 使用须知 Deep dive into Coroutine Flow 2 Migrating from LiveData to Kotlin’s Flow ","date":"2021-05-29","objectID":"/%E4%B8%8D%E9%94%99%E7%9A%84%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/:2:0","tags":["kotlin"],"title":"不错的技术文章","uri":"/%E4%B8%8D%E9%94%99%E7%9A%84%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"},{"categories":["技术"],"content":"内存泄露 ViewLifecycleLazy and other ways to avoid View memory leaks in Android Fragments android ","date":"2021-05-29","objectID":"/%E4%B8%8D%E9%94%99%E7%9A%84%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/:3:0","tags":["kotlin"],"title":"不错的技术文章","uri":"/%E4%B8%8D%E9%94%99%E7%9A%84%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"},{"categories":["技术"],"content":"binder Binder | 内存拷贝的本质和变迁 认真分析mmap：是什么 为什么 怎么用 java 算法动画 | 被 “废弃” 的 Java 栈，为什么还在用 起因是在于做一道关于栈相关的算法题的时候，发现用ArrayQueue、LinkedList比用Stack，耗时相对于少很多（2ms vs 7ms） ","date":"2021-05-29","objectID":"/%E4%B8%8D%E9%94%99%E7%9A%84%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/:4:0","tags":["kotlin"],"title":"不错的技术文章","uri":"/%E4%B8%8D%E9%94%99%E7%9A%84%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"},{"categories":["技术"],"content":"jvm 你知道 JVM 的方法区是干什么用的吗？ ","date":"2021-05-29","objectID":"/%E4%B8%8D%E9%94%99%E7%9A%84%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/:5:0","tags":["kotlin"],"title":"不错的技术文章","uri":"/%E4%B8%8D%E9%94%99%E7%9A%84%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"},{"categories":["技术"],"content":"gradle.properties中定义变量 light_sdk_version = 2.2.5.14 ","date":"2021-04-29","objectID":"/gradle.properties%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F/:0:0","tags":["gradle"],"title":"gradle.properties中定义变量","uri":"/gradle.properties%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F/"},{"categories":["技术"],"content":"build.gradle中使用 现在gradle中定义一个函数 def getProperty(String filename, String propName) { def propsFile = rootProject.file(filename) if (propsFile.exists()) { def props = new Properties() props.load(new FileInputStream(propsFile)) if (props[propName] != null) { return props[propName] } else { print(\"No such property \" + propName + \" in file \" + filename) } } else { print(filename + \" does not exist!\") } } 使用 lightsdk : \"com.tencent.light-withoutso:lightsdk:${getProperty(\"gradle.properties\", \"light_sdk_version\")}\" ","date":"2021-04-29","objectID":"/gradle.properties%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F/:1:0","tags":["gradle"],"title":"gradle.properties中定义变量","uri":"/gradle.properties%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F/"},{"categories":["技术"],"content":"代码中使用 在build.gradle中定义 defaultConfig { buildConfigField \"String\", \"LIGHT_SDK_VERSION\", \"${light_sdk_version}\" } 使用 BuildConfig.LIGHT_SDK_VERSION build.gradle中定义变量 ext { light_sdk_version = \"2.2.5.14\" light_sdk_component_level = \"78\" pag_sdk_version = \"3.3.0.138\" pag_sdk_tag_level=\"3\" } ","date":"2021-04-29","objectID":"/gradle.properties%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F/:2:0","tags":["gradle"],"title":"gradle.properties中定义变量","uri":"/gradle.properties%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F/"},{"categories":["技术"],"content":"build.gradle中使用 defaultConfig { buildConfigField \"String\", \"LIGHT_SDK_VERSION\", \"\\\"${project.light_sdk_version}\\\"\" } ","date":"2021-04-29","objectID":"/gradle.properties%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F/:3:0","tags":["gradle"],"title":"gradle.properties中定义变量","uri":"/gradle.properties%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F/"},{"categories":["技术"],"content":"代码中使用 在build.gradle中定义 defaultConfig { buildConfigField \"String\", \"LIGHT_SDK_VERSION\", \"\\\"${project.light_sdk_version}\\\"\" } 使用 BuildConfig.LIGHT_SDK_VERSION ","date":"2021-04-29","objectID":"/gradle.properties%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F/:4:0","tags":["gradle"],"title":"gradle.properties中定义变量","uri":"/gradle.properties%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F/"},{"categories":["生活"],"content":"零食 ","date":"2020-07-16","objectID":"/%E4%B8%80%E4%BA%9B%E9%9B%B6%E9%A3%9F%E6%8E%A8%E8%8D%90/:0:0","tags":["零食"],"title":"一些零食推荐","uri":"/%E4%B8%80%E4%BA%9B%E9%9B%B6%E9%A3%9F%E6%8E%A8%E8%8D%90/"},{"categories":["生活"],"content":"百草味 商品名 推荐指数 满300-200 价格 菠萝干 100g ★★★★ 25.50 ￥8.73 泡椒凤爪 160g ★★★★★ 26.90 ￥9.21 脆冬枣 35g ★★★ 10.90 ￥3.73 椰丝球 210g ★★★ 32.50 ￥11.13 夏威夷果 100g ★★★★ 29.50 ￥10.11 猪肉脯（白芝麻味） 100g ★★★★ 29.50 ￥10.11 手撕鱿鱼条 80g ★★★★ 32.50 ￥11.13 一字豆干（五香味） 200g ★★★ 25.90 ￥8.87 卤鹌鹑蛋（五香味） 135g ★★★★ 26.90 ￥9.21 牛肉条 50g ★★★★ 32.50 ￥11.13 碧根果仁 56g ★★★★★ 31.50 ￥10.78 麻辣植物牛肉 100g ★★★★★ 25.90 ￥8.60 满300减200 买了12包共104.10元，谁知过不到几天，就有满300减210的活动了（这个应该是最划算的了） ","date":"2020-07-16","objectID":"/%E4%B8%80%E4%BA%9B%E9%9B%B6%E9%A3%9F%E6%8E%A8%E8%8D%90/:1:0","tags":["零食"],"title":"一些零食推荐","uri":"/%E4%B8%80%E4%BA%9B%E9%9B%B6%E9%A3%9F%E6%8E%A8%E8%8D%90/"},{"categories":["生活"],"content":"源于最近需要换眼镜，因此做了下功课。 防蓝光非球面镜片 其实现在镜片都会带有防蓝光的属性，但是这个会更好一些，不过会造成镜片偏黄，透光度下降。生活中有害蓝光大都来自于电屏幕，可能用眼久了，多起来走走看看远方效果会更好一点，所以不考虑这种镜片。 折射率 阿贝数 价格 1.70 71L 37 688送镜架（淘宝） 1.67 67L 32 455送镜架（淘宝） 1.60 60L Pro 40 不考虑 1.60 60L 33 不考虑 PMC非球面镜片 PMC是一个新的材料，这种镜片透光度是98%相对于普通镜片（93%~95%）好一些，戴起来效果会更好一点，相对来说价格也更贵。 折射率 阿贝数 价格 1.70 71L 37 751送镜架（淘宝） 1.60 60KP 40 378送镜架（淘宝） 1.71非球面镜片 对于500°以上的近视患者，相对来说会选择折射率高的镜片，折射率越高镜片可以做得越薄，但是不能一味追求轻薄，因为镜片有一个阿贝尔指数，这个指数和折射率成反比，阿贝尔数越高镜片成像越清晰。 型号 阿贝数 价格 71L 37 KR树脂、蓝光防护膜 688送镜架（淘宝） 71KP 37 PMC超亮、天视A6膜 751送镜架（淘宝） 71AS 37 KR树脂、明视复合膜 598送镜架（淘宝） 明视复合膜又称绿膜，天视A6膜又称蓝膜，蓝膜相对绿膜防油污容易清洁 ","date":"2020-05-16","objectID":"/%E6%98%8E%E6%9C%88%E7%9C%BC%E9%95%9C%E5%AF%B9%E6%AF%94/:0:0","tags":["眼镜"],"title":"明月眼镜对比","uri":"/%E6%98%8E%E6%9C%88%E7%9C%BC%E9%95%9C%E5%AF%B9%E6%AF%94/"},{"categories":["生活"],"content":"18年末 年后便是大三，驾照也已到手，也没其余杂事。那可要准备面试，年后就得找暑期实习了。虽说离毕业还有两年，但学校里的课程是不能再学到可用的知识了，更应该投入到实际项目的开发中去，能对专业能力有很大的改进和提升，同时也是一段可贵的实习经验，加速自己各方面的成长。如果实习表现优秀，能得到leader的认可，通过转正拿到毕业生offer，后面一学年也就没什么压力可言，不过找到一份好的实习还是具有挑战性的。 一同学年前就拿到了字节跳动的offer，可以说是非常优秀。能够领先这么多，想想看，他每天坚持学习，当然水到渠成，不足为奇。我与他的关系也仅限于点头之交，不好询问面试的诸多问题。当然字节跳动的offer对我的吸引力不亚于bat，极其羡慕。 想买的技术书籍有好几本并且价格不菲（60+），倒不如买个Ipad看PDF版，也易于携带去上课。价格（2300）相对于穷学生来说还是比较昂贵，也不想让妈妈给我付账，想着过年的红包钱可以预支，再三纠结后还是分期买下了，当然Apple Pencil是还让妈妈付的，用于学习，也心安理得。 善于投资自己，对自己有好处的东西，尽管去做吧，切勿因小失大 ","date":"2020-02-03","objectID":"/2019%E5%B9%B4%E6%80%BB%E7%BB%93/:1:0","tags":["总结","心得","面试","学生时代"],"title":"2019年总结","uri":"/2019%E5%B9%B4%E6%80%BB%E7%BB%93/"},{"categories":["生活"],"content":"复习 实验室Android部门上一任部长在字节跳动工作，年末实习离职了，可内推几位同学的简历（免笔试），由于当时的我还刚开始复习，并没有太大的把握去面试，但还是认真地制作了简历。但由于年前错过了内推的时间，因此也错失了这次机会，当时的自己依旧没有把握去应对这场面试，也就不了了之 。 了解到另外一位同学也让学长内推了简历，但是一面直接没过，问的问题当中我自己也不能保证初次面试下有条理的说出来。 当时也进入了复习的状态，日常翘课，上课也只带自己的Ipad去复习，日常刷牛客看面经，复习的日子就是这样有条不紊的进行着。 刷牛客网的Java基础题+剑指offer+八大排序 看牛客网面经 Android基础 Android开发者艺术探索 Android常用框架源码解析 复习不是学习，是需要知识储备的，知识储备又源于长期坚持学习 ","date":"2020-02-03","objectID":"/2019%E5%B9%B4%E6%80%BB%E7%BB%93/:2:0","tags":["总结","心得","面试","学生时代"],"title":"2019年总结","uri":"/2019%E5%B9%B4%E6%80%BB%E7%BB%93/"},{"categories":["生活"],"content":"面试 开始也投了些中小公司，对于BAT这种大企业依旧没有十足的把握。 随着准备得越来越充足，其中也面试了大大小小几家公司，当然充满遗憾和心酸，然而面试经验也越发丰富，到最后面试腾讯的时候也是十分顺利哈。 凡事需要准备，准备越充足也会越自信，自然手到擒来 ","date":"2020-02-03","objectID":"/2019%E5%B9%B4%E6%80%BB%E7%BB%93/:3:0","tags":["总结","心得","面试","学生时代"],"title":"2019年总结","uri":"/2019%E5%B9%B4%E6%80%BB%E7%BB%93/"},{"categories":["生活"],"content":"CVTE 一面 第一次面试是CVTE的电话面，问的问题都比较常规，其中两个问题不会，不过也通过了。 hr面 当时也比较开心，本以为可以首战告捷，也没有想到还有后来这么一些事情。当时在网上看了些这个公司的一些帖子，知乎上面大部分都是黑这家公司的，同时牛客网上面也了解到这家公司的hr面很多人被刷。不过的确也实际体验到了，也不足为奇。 询问未来规划、理想、家长里短，性格缺陷等一系列私人问题，其实让你卸下心防，其次再问对薪资的要求、对加班的看法、工作地的想法。还是太年轻，不愿当舔狗，对薪资要求稍高又不想加班。事后想想，其实可以先拿到offer再说，没必要这么真实。 见人说人话，见鬼说鬼话 ","date":"2020-02-03","objectID":"/2019%E5%B9%B4%E6%80%BB%E7%BB%93/:3:1","tags":["总结","心得","面试","学生时代"],"title":"2019年总结","uri":"/2019%E5%B9%B4%E6%80%BB%E7%BB%93/"},{"categories":["生活"],"content":"蘑菇街 一面 项目组内的一个小哥，面试很顺利，对我的印象很好，实在地夸赞了我一番。 二面 组内的leader，项目难点和自定义View（如何实现一个列表下拉刷新控件）答得不好，就算其他问题回答得不错并且算法也秒了，但是还是很遗憾的得被刷了。其实也觉得项目难点不好回答，如今想想当时的回答的确很差劲，后面让自己实现自定义控件也慌了，应该好好思考，或许还能够得到提示，而不是直接说不知道。 面试结束后的几天内，每隔几十分钟刷新一次蘑菇街招聘页面，最终还是收到了感谢信。记得当时连去了蘑菇街要做什么都想好了，终究情非得已。 事情没有尘埃落定之前都不能掉以轻心 ","date":"2020-02-03","objectID":"/2019%E5%B9%B4%E6%80%BB%E7%BB%93/:3:2","tags":["总结","心得","面试","学生时代"],"title":"2019年总结","uri":"/2019%E5%B9%B4%E6%80%BB%E7%BB%93/"},{"categories":["生活"],"content":"网易 一个老大哥和一个小老哥一起视频面试的我，无语了都。 ","date":"2020-02-03","objectID":"/2019%E5%B9%B4%E6%80%BB%E7%BB%93/:3:3","tags":["总结","心得","面试","学生时代"],"title":"2019年总结","uri":"/2019%E5%B9%B4%E6%80%BB%E7%BB%93/"},{"categories":["生活"],"content":"拼多多 在图书馆的走廊座椅上被一位全栈大佬用微信视频面了两个小时，被问到怀疑人生也毫不为过，处境甚是窘迫，看到了自己很多不足，对于自身这种不服输、自尊心强的性格，难免会被问得面红耳赤。 ","date":"2020-02-03","objectID":"/2019%E5%B9%B4%E6%80%BB%E7%BB%93/:3:4","tags":["总结","心得","面试","学生时代"],"title":"2019年总结","uri":"/2019%E5%B9%B4%E6%80%BB%E7%BB%93/"},{"categories":["生活"],"content":"腾讯 牛客网面经 面试官是湖南老乡（后来才知道是我的leader），面试过程很亲和，面试也就很自信，受到了面试官的青睐。 厚积薄发 ","date":"2020-02-03","objectID":"/2019%E5%B9%B4%E6%80%BB%E7%BB%93/:3:5","tags":["总结","心得","面试","学生时代"],"title":"2019年总结","uri":"/2019%E5%B9%B4%E6%80%BB%E7%BB%93/"},{"categories":["生活"],"content":"初来乍到 安排好学校的代课事宜就立马逃脱了学校，和同学一起组队来到了深圳。 入住了公司为实习生安排的中转酒店，同住的是一名研究生。 第二天便去公司报道，领取了工卡、公仔，去了自己的工位，不过没有见到leader。 由于酒店住宿洗衣服不方便，而且和陌生人同住，感觉不是那么愉快，便下午就去看房子。 下午再过来的时候，遇见了我的leader和我的导师，在导师的帮助下安装好了iMac，初次见面当然是比较拘谨。 ","date":"2020-02-03","objectID":"/2019%E5%B9%B4%E6%80%BB%E7%BB%93/:4:0","tags":["总结","心得","面试","学生时代"],"title":"2019年总结","uri":"/2019%E5%B9%B4%E6%80%BB%E7%BB%93/"},{"categories":["生活"],"content":"租房 ","date":"2020-02-03","objectID":"/2019%E5%B9%B4%E6%80%BB%E7%BB%93/:5:0","tags":["总结","心得","面试","学生时代"],"title":"2019年总结","uri":"/2019%E5%B9%B4%E6%80%BB%E7%BB%93/"},{"categories":["生活"],"content":"留用答辩 当然实习的时候也无不想过留用答辩的事情，毕竟如果能够顺利留用，对之后毕业的压力会减轻很多，不用再复习去秋招，不用担心毕业的事情等等，安心学习、好好生活就可以了。 当然，更重要的是自己也愿意留下来。在我自己看来，短视频是未来生活的一部分，这点是毋容置疑的，短视频目前似乎在很多人的生活中代替了以往的媒体，成为了获取信息的重要来源之一。 记得和我一起实习的女同学对我说过这样的一句话：你真的好稳啊，看起来做什么事都那么从容。可能是之前找实习的时候一起聊过天，那时候她已经拿到了Tencent的offer，而我一无所有，但是我的脸上也还能挂着一副笑容，从容不迫地和他们聊着，再结合如今我的工作态度以及对留用的看法才得出这样的一种结论。而我回了她一句范仲淹的《岳阳楼记》中的一句话：不以物喜，不以己悲。 其实，担忧未来本是一件好事，但不需要过分担忧，更重要的是能够做好当前的事。目前实习的工作做好了，个人能力得到了领导的认可，工作成果得到领导的赞赏，这些事不正是作为留用的一个考核点。很多时候，当前的所作所为往往成就着将来，当然前提是目标明确 同组还有一个华中科技大学的研究生，本科就读于厦门大学，可以说在学历背景上面已经甩我几条街了，同时年龄也比我大三岁，但是这也不能足以将我battel下去，终究还是得看个人能力。 记得一起接受一个模块重构的需求，自己在团队协作以及解决问题的能力就很完美的体现出来，以致于导师都愿意和我交流，我们两个人当中把我当做这个需求的负责人。而又为什么使得别人信服我呢？总结了一下几点（Ta指代同组那位研究生）： 谦虚好问，善于沟通，及时同步开发进度以及遇见的困难并请教相应的同事；多次请教导师、同事问题，并一起讨论解决方案。相对来说，Ta就比较沉闷，很少去找导师或同事。 解决问题能力强；能够比较高效完成自己负责模块以及解决遇见的问题。相对来说，Ta开发效率比较低，甚至有些常见的问题都不知道如何解决。 团队意识；完成自己分配的需求后，又去关注其他人负责的模块，帮助同事解决问题（此条在个人能力强的基础上进行）。相对来说，Ta自己的模块的需求都不能高效完成，那就何谈帮助别人。 以至于答辩完成以后，leader也和我说了为什么留下了我：学历不代表学力，他在学历背景方面可以说甩你几条街，但是在学习能力方面你很厉害 答辩不久后，同组实习生离职去准备秋招了，而我仍呆在鹅厂实习。期间也给我换了一个导师——一个大我4岁的老哥，后面也成为了我关系最好的同事，亦师亦友，给予了我很多帮助，总而言之还是很幸运的。 ","date":"2020-02-03","objectID":"/2019%E5%B9%B4%E6%80%BB%E7%BB%93/:6:0","tags":["总结","心得","面试","学生时代"],"title":"2019年总结","uri":"/2019%E5%B9%B4%E6%80%BB%E7%BB%93/"},{"categories":["生活"],"content":"尚未入职，leader跑了 后面部门进行组织架构调整，当前微视的业务换了一波人来接手，原leader带一批人去做底层能力的业务，当时leader也有找各位同事一一聊过去，可以说大部分人都想过去吧。可唯独没有找我聊，也许我只是一个实习生，并不能对他产生很大的价值，而名额又是有限的，那就很好理解了。还没正式入职就换leader了，感觉还是很不好的，毕竟换了一个新的leader，又得重新建立信任，展示自己的能力。 记得，新来的leader有一一找我们谈话，那是一个战战兢兢，说话都很是拘谨，说话结结巴巴的，时而哆嗦，现在想来真是可笑呵！ 后面也就那样，组织架构的变化，对我也并未产生多大的影响，只是默默地搬砖，做好自己的工作，兢兢业业干到年底。那时疫情并不起眼，正慢慢袭来，临走前去企鹅医生买了两袋口罩以备路上之需。 ","date":"2020-02-03","objectID":"/2019%E5%B9%B4%E6%80%BB%E7%BB%93/:7:0","tags":["总结","心得","面试","学生时代"],"title":"2019年总结","uri":"/2019%E5%B9%B4%E6%80%BB%E7%BB%93/"},{"categories":["生活"],"content":"疫情之年，不串门的春节 回家以后，疫情迅速发展起来，爆发地——武汉市已做封城处理，城内有的人想出来，城外有的人想进去，境地不同，心志不同。远处十八线小县城，周围没有感染的病例，但每天看看全国感染新增人数也闹得人心惶惶，不敢出门，整个春节基本都在家里度过。就算想出门，也没有口罩可用，市面上的口罩早已销售一空，家里人的一个口罩也是用好久，以维持正常生活所需。 ","date":"2020-02-03","objectID":"/2019%E5%B9%B4%E6%80%BB%E7%BB%93/:8:0","tags":["总结","心得","面试","学生时代"],"title":"2019年总结","uri":"/2019%E5%B9%B4%E6%80%BB%E7%BB%93/"},{"categories":["技术"],"content":"视频加滤镜播放 MediaCodec解码——\u003eOpenGL es——\u003e GLSurfaceView ","date":"2019-08-04","objectID":"/opengl-es%E8%A7%86%E9%A2%91%E5%8A%A0%E6%BB%A4%E9%95%9C%E5%90%8E%E5%AF%BC%E5%87%BA/:1:0","tags":["OpenGL ES"],"title":"OpenGL ES：视频加滤镜后导出","uri":"/opengl-es%E8%A7%86%E9%A2%91%E5%8A%A0%E6%BB%A4%E9%95%9C%E5%90%8E%E5%AF%BC%E5%87%BA/"},{"categories":["技术"],"content":"视频滤镜合成导出 MediaCodec解码——\u003eOpenGL es——\u003e MediaCodec编码 大体来说就是OpenGL渲染后的输出不一样，需要使用编码器编码保存到本地，由于OpenGL ES并不负责窗口管理以及上下文管理，该职责由各个平台自行完成，没有了GLSurfaceView为我们创建的上下文环境，因此我们需要使用相关的API初始化OpenGL的上下文环境以支持后续的操作。 主要流程还是上图所示，该功能的实现，需要对整体的流程有一定的了解同时也需要掌握MediaCodec的使用以及需要注意一些坑，否则可能会导致视频无法播放。 ","date":"2019-08-04","objectID":"/opengl-es%E8%A7%86%E9%A2%91%E5%8A%A0%E6%BB%A4%E9%95%9C%E5%90%8E%E5%AF%BC%E5%87%BA/:2:0","tags":["OpenGL ES"],"title":"OpenGL ES：视频加滤镜后导出","uri":"/opengl-es%E8%A7%86%E9%A2%91%E5%8A%A0%E6%BB%A4%E9%95%9C%E5%90%8E%E5%AF%BC%E5%87%BA/"},{"categories":["技术"],"content":"注意 MediaMuxer写完数据需要手动停止并释放资源，否则写的视频文件没有文件尾会导致不能播放。同理解码器和编码器在用完以后也需要释放。 一个线程对应一个OpenGL es 上下文，因此我们需要初始化俩个上下文环境，一个用于OpenGL着色器、顶点数据等渲染配置的初始化，一个用于在编解码线程中渲染。编解码线程中的上下文需要设置与OpenGL的初始化的线程共享上下文资源，包括纹理、FrameBuffer以及其他的Buffer等资源。 渲染一次完成后，需要切换一次egl的frame buffer，EGL的工作模式是双缓存模式，内部拥有俩个frame buffer（fb），当EGL将一个fb渲染到屏幕上的时候，另一个就在后台等待OpenGL进行交换。 EGL14.eglSwapBuffers(mEglDisplay, mEglSurfaceEncoder); ","date":"2019-08-04","objectID":"/opengl-es%E8%A7%86%E9%A2%91%E5%8A%A0%E6%BB%A4%E9%95%9C%E5%90%8E%E5%AF%BC%E5%87%BA/:3:0","tags":["OpenGL ES"],"title":"OpenGL ES：视频加滤镜后导出","uri":"/opengl-es%E8%A7%86%E9%A2%91%E5%8A%A0%E6%BB%A4%E9%95%9C%E5%90%8E%E5%AF%BC%E5%87%BA/"},{"categories":["技术"],"content":"注意点 MediaCodec 解码后的原始数据，格式为yuv，而OpenGL所能渲染的格式为rgb，因此我们需要使用扩展库中的扩展纹理 GLES11Ext.GL_TEXTURE_EXTERNAL_OES 而它的作用就是实现YUV格式到RGB的自动转化。 片段着色器中需使用扩展采样器： uniform samplerExternalOES sTexture COLOR_FormatYUV420Flexible YUV420Flexible并不是一种确定的YUV420格式，而是包含COLOR_FormatYUV411Planar, COLOR_FormatYUV411PackedPlanar, COLOR_FormatYUV420Planar, COLOR_FormatYUV420PackedPlanar, COLOR_FormatYUV420SemiPlanar和COLOR_FormatYUV420PackedSemiPlanar。在API 21引入YUV420Flexible的同时，它所包含的这些格式都deprecated掉了。 那么为什么所有的解码器都支持YUV420Flexible呢？官方没有说明这点，但我猜测，只要解码器支持YUV420Flexible中的任意一种格式，就会被认为支持YUV420Flexible格式。也就是说，几乎所有的解码器都支持YUV420Flexible代表的格式中的一种或几种。 此处引用： https://www.polarxiong.com/archives/Android-MediaCodec视频文件硬件解码-高效率得到YUV格式帧-快速保存JPEG图片-不使用OpenGL.html ","date":"2019-07-11","objectID":"/opengl-es%E9%85%8D%E5%90%88mediacodec%E7%A1%AC%E8%A7%A3%E7%A0%81%E6%B8%B2%E6%9F%93%E8%A7%86%E9%A2%91%E5%8A%A0%E6%BB%A4%E9%95%9C%E6%92%AD%E6%94%BE/:1:0","tags":["OpenGL ES"],"title":"OpenGL ES：配合MediaCodec硬解码渲染（视频加滤镜播放）","uri":"/opengl-es%E9%85%8D%E5%90%88mediacodec%E7%A1%AC%E8%A7%A3%E7%A0%81%E6%B8%B2%E6%9F%93%E8%A7%86%E9%A2%91%E5%8A%A0%E6%BB%A4%E9%95%9C%E6%92%AD%E6%94%BE/"},{"categories":["技术"],"content":"原理步骤： 生成一个oes纹理，并且以此得到一个SurfaceTexture，并设置帧可用回调监听，可用时请求渲染，再得到一个 Surface，并将它回调给外部MediaCodec 配置并启动解码器。（在ESL上下文环境中生成，因此需要通过回调给外部使用） 渲染完一帧后，需调用 surfaceTexture.updateTexImage() //更新纹理数据 onFrameAvailable可用时，请求GLSurfaceView渲染重绘即可 ","date":"2019-07-11","objectID":"/opengl-es%E9%85%8D%E5%90%88mediacodec%E7%A1%AC%E8%A7%A3%E7%A0%81%E6%B8%B2%E6%9F%93%E8%A7%86%E9%A2%91%E5%8A%A0%E6%BB%A4%E9%95%9C%E6%92%AD%E6%94%BE/:2:0","tags":["OpenGL ES"],"title":"OpenGL ES：配合MediaCodec硬解码渲染（视频加滤镜播放）","uri":"/opengl-es%E9%85%8D%E5%90%88mediacodec%E7%A1%AC%E8%A7%A3%E7%A0%81%E6%B8%B2%E6%9F%93%E8%A7%86%E9%A2%91%E5%8A%A0%E6%BB%A4%E9%95%9C%E6%92%AD%E6%94%BE/"},{"categories":["技术"],"content":"解码器 MediaCodec的准备： 使用MediaExtract选择相应的视频/音频轨道，获取相应的格式信息（MediaFormat）。 使用MdiaCodec的类接口创建codec对象，配置音视频格式以及surface。（ OpenGL回调出来的 Surface surface = new Surface(surfaceTexture);） 启动解码器。 启动一个线程，循环从MediaExtract读取媒体文件数据到MdiaCodec的输入缓冲区，直至文件尾。 从MdiaCodec中取出被成功解码的buffer的 index 和 buffer的信息。index无误则把此buffer渲染到surface上去。 MediaCodec代码如下： package com.example.myapplication.ui.video; import android.media.MediaCodec; import android.media.MediaCodecInfo; import android.media.MediaExtractor; import android.media.MediaFormat; import android.util.Log; import android.view.Surface; import java.io.IOException; import java.nio.ByteBuffer; public class VideoCodec { private static final long TIMEOUT_USEC = 10000; private String TAG = \"VideoCodec\"; private MediaCodec videoDecoder; private MediaExtractor mediaExtractor; private boolean isAvailable = false; //视频路径 private String path; //OpenGL回调出来的 Surface Surface surface = new Surface(surfaceTexture); //surfaceTexture设置帧可用监听 //用于解码后数据的输出，交给OpenGL渲染 private Surface surface; public VideoCodec(String path,Surface surface) { mediaExtractor = new MediaExtractor(); this.path = path; this.surface = surface; } //传入指定的视频或音频格式，例如：video/、audio/ //返回当前格式轨道的index public int getTrackIndex(String mime) { int trackCount = mediaExtractor.getTrackCount(); int videoIndex=-1; for (int i = 0; i \u003c trackCount; i++) { MediaFormat format = mediaExtractor.getTrackFormat(i); if (format.getString(MediaFormat.KEY_MIME).startsWith(mime)) { videoIndex = i; break; } } return videoIndex; } private boolean isPlaying = false; public void start(){ isPlaying = true; DecoderMP4Thread thread = new DecoderMP4Thread(); thread.start(); } //视频的解码放到子线程中进行，防止阻塞主线程 private class DecoderMP4Thread extends Thread { @Override public void run() { try { //首先设置待解码文件的路径 mediaExtractor.setDataSource(path); int videoIndex = getTrackIndex(\"video/\"); //当前index无效则直接退出 if (videoIndex \u003c 0) { return; } //选取当前轨道 mediaExtractor.selectTrack(videoIndex); //获取视频的格式信息 MediaFormat mediaFormat = mediaExtractor.getTrackFormat(videoIndex); //设置解码支持的格式 mediaFormat.setInteger(MediaFormat.KEY_COLOR_FORMAT, MediaCodecInfo.CodecCapabilities.COLOR_FormatRGBFlexible); String mime = mediaFormat.getString(MediaFormat.KEY_MIME); //通过MIME创建解码器 videoDecoder = MediaCodec.createDecoderByType(mime); //配置 videoDecoder.configure(mediaFormat, surface, null, 0); } catch (IOException e) { e.printStackTrace(); } //启动解码器 videoDecoder.start(); int frameIndex = 0; boolean isVideoOver = false; // 开始循环，一直到视频资源结束 MediaCodec.BufferInfo videoBufferInfo = new MediaCodec.BufferInfo(); // 开始的时间 long startMs = System.currentTimeMillis(); // 当前Thread 没有被中断 while (!Thread.interrupted()) { if (!isPlaying) { continue; } if (!isVideoOver) { // 视频没有结束 提取一个单位的视频资源放到 解码器(mediaCodec) 缓冲区中 isVideoOver = putBufferToMediaCodec(mediaExtractor, videoDecoder); } // 返回一个被成功解码的buffer的 index 或者是一个信息 同时更新 videoBufferInfo 的数据 int outputBufferIndex = videoDecoder.dequeueOutputBuffer(videoBufferInfo, TIMEOUT_USEC); switch (outputBufferIndex) { case MediaCodec.INFO_OUTPUT_FORMAT_CHANGED: Log.v(TAG, \"format changed\"); break; case MediaCodec.INFO_TRY_AGAIN_LATER: Log.v(TAG, \"超时\"); break; case MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED: //outputBuffers = videoCodec.getOutputBuffers(); Log.v(TAG, \"output buffers changed\"); break; default: //延时操作 //如果缓冲区里的可展示时间\u003e当前视频播放的总时间，就休眠一下 展示当前的帧， sleepRender(videoBufferInfo, startMs); //渲染为true就会渲染到surface configure() 设置的surface videoDecoder.releaseOutputBuffer(outputBufferIndex, true); frameIndex ++; Log.v(TAG, \"frameIndex \" + frameIndex); break; } if ((videoBufferInfo.flags \u0026 MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) { Log.v(TAG, \"buffer stream end\"); break; } } //释放资源 videoDecoder.stop(); videoDecoder.release(); mediaExtractor.release(); } } /** * 将缓冲区传递至解码器 * 如果到了文件末尾，返回true;否则返回false */ private boolean putBufferToMediaCodec(MediaExtractor extractor, MediaCodec decoder) { boolean isMediaEOS = false; // 解码器 要填充有效数据的输入缓冲区的索引 —————— 此id的缓冲区可以被使用 int inputBufferIndex = decoder.dequeueInputBuffer(TIM","date":"2019-07-11","objectID":"/opengl-es%E9%85%8D%E5%90%88mediacodec%E7%A1%AC%E8%A7%A3%E7%A0%81%E6%B8%B2%E6%9F%93%E8%A7%86%E9%A2%91%E5%8A%A0%E6%BB%A4%E9%95%9C%E6%92%AD%E6%94%BE/:3:0","tags":["OpenGL ES"],"title":"OpenGL ES：配合MediaCodec硬解码渲染（视频加滤镜播放）","uri":"/opengl-es%E9%85%8D%E5%90%88mediacodec%E7%A1%AC%E8%A7%A3%E7%A0%81%E6%B8%B2%E6%9F%93%E8%A7%86%E9%A2%91%E5%8A%A0%E6%BB%A4%E9%95%9C%E6%92%AD%E6%94%BE/"},{"categories":["技术"],"content":"滤镜类（BaseFilter） ","date":"2019-07-11","objectID":"/opengl-es%E9%85%8D%E5%90%88mediacodec%E7%A1%AC%E8%A7%A3%E7%A0%81%E6%B8%B2%E6%9F%93%E8%A7%86%E9%A2%91%E5%8A%A0%E6%BB%A4%E9%95%9C%E6%92%AD%E6%94%BE/:4:0","tags":["OpenGL ES"],"title":"OpenGL ES：配合MediaCodec硬解码渲染（视频加滤镜播放）","uri":"/opengl-es%E9%85%8D%E5%90%88mediacodec%E7%A1%AC%E8%A7%A3%E7%A0%81%E6%B8%B2%E6%9F%93%E8%A7%86%E9%A2%91%E5%8A%A0%E6%BB%A4%E9%95%9C%E6%92%AD%E6%94%BE/"},{"categories":null,"content":"关于本站 这是博主的个人博客，记录思考，分享生活，总结技术 网站生成：hugo 主题：LoveIt 方案：vscode + github pages + github action 关于博主 程序员，一名Android开发者，湖南人，在深圳打工 ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"","uri":"/about/"},{"categories":null,"content":"兴趣爱好 阅读 看电影 折腾 ","date":"0001-01-01","objectID":"/about/:1:0","tags":null,"title":"","uri":"/about/"},{"categories":null,"content":"常用工具 vscode，用来写博客工具，配合 markdown 插件，撰写体验很不错 微信读书，打败了对书的占有欲，完全建立起阅读的习惯 ","date":"0001-01-01","objectID":"/about/:2:0","tags":null,"title":"","uri":"/about/"}]